<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Apache Camel 3.6 - More camel-core optimizations coming (Part 4)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/fkJ7cCYUY6M/apache-camel-36-more-camel-core.html" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_clausibsen" scheme="searchisko:content:tags" /><category term="roadmap" scheme="searchisko:content:tags" /><author><name>Claus Ibsen</name></author><id>searchisko:content:id:jbossorg_blog-apache_camel_3_6_more_camel_core_optimizations_coming_part_4</id><updated>2020-10-09T09:32:31Z</updated><published>2020-10-09T09:32:00Z</published><content type="html">&lt;p&gt;I have previously blogged about the optimziations we are doing in the Apache Camel core. The first 3 blogs (&lt;a href="http://www.davsclaus.com/2020/01/apache-camel-31-more-camel-core.html" target="_blank"&gt;part1&lt;/a&gt;, &lt;a href="http://www.davsclaus.com/2020/01/apache-camel-31-more-camel-core_30.html" target="_blank"&gt;part2&lt;/a&gt;, &lt;a href="http://www.davsclaus.com/2020/02/apache-camel-31-more-camel-core.html" target="_blank"&gt;part3&lt;/a&gt;) were a while back leading up to the 3.4 LTS release.&lt;/p&gt;&lt;p&gt;Now we have done some more work that is coming in Camel 3.6 leading up to the next 3.7 LTS release.&lt;/p&gt;&lt;p&gt;To speedup startup we switched to a new uuid generator. The old (classic) generator was inherited from Apache ActiveMQ which needed to ensure its ids were unique in a network of brokers, and therefore to ensure this the generator was using the hostname as prefix in the id. This required on startup to do a network access to obtain this information which costs a little time. Also depending on networks this can be more restrictive and delay the startup. The new generator is a pure in-memory fast generator that was used by Camel K and Camel Quarkus.&lt;/p&gt;&lt;p&gt;We also identified a few other spots during route initialization. For example one small change was to avoid doing some regular expression masking on route endpoints which wasn't necessary anymore.&lt;/p&gt;&lt;p&gt;Now the bigger improvements are in the following areas&lt;/p&gt;&lt;p&gt;&lt;b&gt;Avoid throwing exceptions&lt;/b&gt;&lt;/p&gt;&lt;p&gt;We identified on spring runtimes that Camel would query the spring bean registry for known beans by id, which the Spring framework would throw a NoSuchBeanDefinitionException if the bean is not present. As Camel does a bit of optional bean discovery during bootstrap, we found a way to avoid this which prevents this.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Singleton languages&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Another related problem is that in Camel 3 due to the modularization then some of the languages (bean, simple, and others) have been changed from being a singleton to prototype scoped. This is in fact one of the biggest problems and we had a Camel user report a problem with thread contention in a high concurrent use-case would race for resolving languages (they are prototype scoped). So you would have this problem, and because the language resolver would query the registry first then Spring would throw that no such bean exception, and then Camel would resolve the language via its own classpath resolver. So all together this cost performance. We can see this in the screenshots from the profiler in the following.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-Z1cfZX4UPfI/X4AnjnSnc5I/AAAAAAAACTU/XqQSfdCpd2wvI_0KXgyY7w6IovlRBbTGgCLcBGAsYHQ/s2482/350-blocked.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="1068" data-original-width="2482" src="https://1.bp.blogspot.com/-Z1cfZX4UPfI/X4AnjnSnc5I/AAAAAAAACTU/XqQSfdCpd2wvI_0KXgyY7w6IovlRBbTGgCLcBGAsYHQ/s320/350-blocked.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-6g2ysd-nAAE/X4Anjqjjn7I/AAAAAAAACTY/CHXzTVx2uqkAtaJ1D5ESolGci-PHnRN8ACLcBGAsYHQ/s2388/360-blocked.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="840" data-original-width="2388" src="https://1.bp.blogspot.com/-6g2ysd-nAAE/X4Anjqjjn7I/AAAAAAAACTY/CHXzTVx2uqkAtaJ1D5ESolGci-PHnRN8ACLcBGAsYHQ/s320/360-blocked.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;p&gt;The top screenshot is using Camel 3.5 and the bottom 3.6. In the top we can see the threads are blocked in Camels resolveLanguage method. And in 3.6 then its actually the log4j logger that is blocking for writing to the log file. Both applications are using the same Camel application and have been running for about 8 minutes.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Reduce object allocations&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The next screenshots are showing a sample of the object allocations.&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-qgdNqOhKbyo/X4AoUiYZ-_I/AAAAAAAACTg/0QaLtbYwtSor8Xv6s2Q18yIxa6GfabqCgCLcBGAsYHQ/s2046/350-allocations.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="544" data-original-width="2046" src="https://1.bp.blogspot.com/-qgdNqOhKbyo/X4AoUiYZ-_I/AAAAAAAACTg/0QaLtbYwtSor8Xv6s2Q18yIxa6GfabqCgCLcBGAsYHQ/s320/350-allocations.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-bFRCi1trEBE/X4AoUgq3H6I/AAAAAAAACTk/plymeUJZZ8Y7DW91zBobjtW-GW0qQbKvQCLcBGAsYHQ/s1846/360-allocations.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="534" data-original-width="1846" src="https://1.bp.blogspot.com/-bFRCi1trEBE/X4AoUgq3H6I/AAAAAAAACTk/plymeUJZZ8Y7DW91zBobjtW-GW0qQbKvQCLcBGAsYHQ/s320/360-allocations.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;p&gt;With Camel 3.5 we are average about 1000 obj/sec and with 3.6 we are down to about a 1/3th.&lt;/p&gt;&lt;p&gt;One of the improvements to help reduce the object allocations was how parameters to languages was changed from using a Map to a plain object array. The Map takes up more memory and object allocations than a single fixed object array.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Do as much init as possible&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Another performance improvement that aids during runtime was that we moved as much we could from the evaluation to the initialization phase in the Camel languages (simple, bean, etc.). We did this by introducing the init phase and ensuring CamelContext was carried around in the interns so we can use the context during the init phase, where its really needed. This ensures the runtime evaluation is as fast as possible.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Other smaller optimizations&lt;/b&gt;&lt;/p&gt;&lt;p&gt;We also improved the simple language to be a bit smarter in its binary operators (such as header.foo &amp;gt; 100). Now the simple language has stronger types for numeric and boolean types during its parsing, which allows us to know better from the right and left hand side of the binary operator to do type coercion so the types are comparable by the JVM. Before we may end up with falling back to converting to string types on both sides. And there is more to come, I have some ideas how to work on a compiled simple language.&lt;/p&gt;&lt;p&gt;The screenshots below shows a chart with the CPU, object allocations and thrown exceptions.&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-bkWON32w2NE/X4ArD16CGII/AAAAAAAACT4/HGhG-t_A6HoUPTNCx_LxvhXf_6X8cH2FQCLcBGAsYHQ/s2048/350-performance.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="1047" data-original-width="2048" src="https://1.bp.blogspot.com/-bkWON32w2NE/X4ArD16CGII/AAAAAAAACT4/HGhG-t_A6HoUPTNCx_LxvhXf_6X8cH2FQCLcBGAsYHQ/s320/350-performance.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-PGPnX2alJNw/X4ArD3d7l3I/AAAAAAAACT0/Q8g-4MMhCG8yr6dPwvmMHcsw7If04E6gACLcBGAsYHQ/s2232/360-performance.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="936" data-original-width="2232" src="https://1.bp.blogspot.com/-PGPnX2alJNw/X4ArD3d7l3I/AAAAAAAACT0/Q8g-4MMhCG8yr6dPwvmMHcsw7If04E6gACLcBGAsYHQ/s320/360-performance.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;p&gt;As we can see this summarise what was mentioned was done to optimize. The number of exceptions has been reduced to 0 at runtime. There is about 3500 thrown during bootstrap (that is Java JAXB which is used for loading the spring XML file with the Camel routes used for the sample application). We do have a &lt;a href="http://www.davsclaus.com/2020/03/apache-camel-31-fast-loading-of-xml.html" target="_blank"&gt;fast XML loader&lt;/a&gt; in Camel that is not using JAXB.&lt;/p&gt;&lt;p&gt;Another improvement we did was to build a source code generator for a new UriFactory which allows each component to quickly build dynamic endpoint URIs from a Map of parameters. The previous solution was to use RuntimeCamelCatalog that was more generic and required loading component metadata from json descriptor files. A few components use this to optimize the toD (such as http components). By this change we avoid the runtime catalog as dependency (reduce JAR size) and the source code generated uri factory is much faster (its speedy plain Java). However the sample application used for this blog did not use toD nor the UriFactory.&lt;/p&gt;&lt;p&gt;Apache Camel 3.6 is scheduled for release later this month of October. It's going to be the fastest Camel ever ;)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=s7G7E1djXZM:clqBe53SGjc:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=s7G7E1djXZM:clqBe53SGjc:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=s7G7E1djXZM:clqBe53SGjc:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=s7G7E1djXZM:clqBe53SGjc:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=s7G7E1djXZM:clqBe53SGjc:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=s7G7E1djXZM:clqBe53SGjc:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=s7G7E1djXZM:clqBe53SGjc:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ApacheCamel/~4/s7G7E1djXZM" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/fkJ7cCYUY6M" height="1" width="1" alt=""/&gt;</content><summary>I have previously blogged about the optimziations we are doing in the Apache Camel core. The first 3 blogs (part1, part2, part3) were a while back leading up to the 3.4 LTS release. Now we have done some more work that is coming in Camel 3.6 leading up to the next 3.7 LTS release. To speedup startup we switched to a new uuid generator. The old (classic) generator was inherited from Apache ActiveMQ...</summary><dc:creator>Claus Ibsen</dc:creator><dc:date>2020-10-09T09:32:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/ApacheCamel/~3/s7G7E1djXZM/apache-camel-36-more-camel-core.html</feedburner:origLink></entry><entry><title>Static analysis with KubeAudit for Red Hat OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Ib3GHDxqQ0w/" /><category term="DevOps" /><category term="Kubernetes" /><category term="Microservices" /><category term="jq json" /><category term="KubeAudit" /><category term="kubernetes manifest" /><category term="openshift" /><category term="static analyzer" /><author><name>Sean Pryor</name></author><id>https://developers.redhat.com/blog/?p=788447</id><updated>2020-10-09T07:00:20Z</updated><published>2020-10-09T07:00:20Z</published><content type="html">&lt;p&gt;In this article, we introduce a new utility for developers who want to ensure that their code transitions cleanly from upstream &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; to &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;. &lt;a target="_blank" rel="nofollow" href="https://github.com/AICoE/OpenShiftKubeAudit"&gt;OpenShiftKubeAudit&lt;/a&gt; (KubeAudit) is a static analyzer that semantically checks a user&amp;#8217;s code for known incompatibilities so you can fix them before bringing the code into OpenShift. KubeAudit is also simple to use and easy to extend.&lt;/p&gt; &lt;h2&gt;Running an audit&lt;/h2&gt; &lt;p&gt;This being the first release, KubeAudit currently offers only a handful of audits, but they&amp;#8217;re easy to write. We&amp;#8217;re looking for feedback and additional use cases from the community to help make the tool more comprehensive.&lt;/p&gt; &lt;p&gt;&lt;span id="more-788447"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;To start, find &lt;a target="_blank" rel="nofollow" href="https://github.com/AICoE/OpenShiftKubeAudit"&gt;KubeAudit&lt;/a&gt; on GitHub.&lt;/p&gt; &lt;p&gt;You&amp;#8217;ll want to clone the git repo somewhere on the same machine where the manifests to audit reside, and set up a Python virtual environment:&lt;/p&gt; &lt;pre&gt;$ git clone https://github.com/AICoE/OpenShiftKubeAudit.git $ cd OpenShiftKubeAudit $ python3 -m virtualenv venv $ source venv/bin/activate $ python3 -m pip install -r requirements.txt&lt;/pre&gt; &lt;p&gt;Now, let&amp;#8217;s run the auditing tool:&lt;/p&gt; &lt;pre&gt;$ ./audit.py /path/to/yaml/directory&lt;/pre&gt; &lt;p&gt;It should produce similar output to this:&lt;/p&gt; &lt;pre&gt;$ ./audit.py ./testaudits Audit Results: Issue: Pod Security Policies in manifests Severity: 1 - High Resolution: In OpenShift PodSecurityPolicies are replaced by SecurityContextConstraints. See https://docs.openshift.com/container-platform/4.5/authentication/managing-security-context-constraints.html Affected Files: Matched regex: testaudits/yaml/PodSecurityPolicies.yaml Issue: NetworkPolicy has an IPBlock Severity: 2 - Medium Resolution: The Kubernetes v1 NetworkPolicy features are available in OpenShift Container Platform except for egress policy types and IPBlock. Affected Files: Matched regex: testaudits/yaml/NetworkPolicies.yaml Issue: Egress network policy set Severity: 2 - Medium Resolution: The Kubernetes v1 NetworkPolicy features are available in OpenShift Container Platform except for egress policy types and IPBlock. Affected Files: Matched regex: testaudits/yaml/NetworkPolicies.yaml&lt;/pre&gt; &lt;p&gt;Now with these issues identified, a developer could fix them before they become issues in production. However, since the tool is new, there are many use cases that have not yet been identified, which is why the tool is easy to extend.&lt;/p&gt; &lt;h2&gt;Adding a custom audit&lt;/h2&gt; &lt;p&gt;KubeAudit uses a simple initialization (INI) syntax to define an audit with a few fields:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: A name or title to identify the audit.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Query (optional)&lt;/strong&gt;: This is a &lt;a target="_blank" rel="nofollow" href="https://stedolan.github.io/jq/"&gt;jq-syntax query&lt;/a&gt;, which the auditing tool uses for semantic analysis of parts of a manifest. Note that the &lt;code&gt;query&lt;/code&gt; is optional if you are using &lt;code&gt;regex&lt;/code&gt;. This type of query is useful when you need a more comprehensive analysis.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Regex (optional)&lt;/strong&gt;: You can specify a &lt;code&gt;regex&lt;/code&gt; to search for in each file. Although &lt;code&gt;regex&lt;/code&gt; is a simpler check than &lt;code&gt;query&lt;/code&gt;, the utility can ignore &lt;code&gt;regex&lt;/code&gt;es found in the code comments.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Regexes section (optional)&lt;/strong&gt;: Use this section when you need multiple &lt;code&gt;regex&lt;/code&gt;es. Once again, the utility ignores &lt;code&gt;regex&lt;/code&gt; matches found in comments, and it matches the results in the order that they appear. If all of the &lt;code&gt;regex&lt;/code&gt;es are found in the corresponding order, it is considered a match.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Severity&lt;/strong&gt;: This message indicates the relative severity of the issue. It needs to start with a number, and can then be followed by a text description of the severity.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Message&lt;/strong&gt;: The diagnostic message to output to the user.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Below is an example audit:&lt;/p&gt; &lt;pre&gt;[Default] # The name/title of the issue, e.g., "Pod Security Policies in manifests" name = RunAsUser is set outside range, has some known issues # A jq-syntax query to be applied to the yaml files. The query must return # either True or False, but can be otherwise any valid jq string query = ((.. | .runAsUser? | numbers) != 0) and ((.. | .runAsUser? | numbers) &amp;#60; 10000000 or (.. | .runAsUser? | numbers) &amp;#62; 20000000) # Python-compatible regex to search for. The script automatically ignores # commented lines regex = runAsUser: # Severity to help the user prioritize fixes severity = 4 - Warning # Message to output to the user, usually a resolution or more information message = Setting runAsUser ID explicitly is not recommended. Additionally setting runAsUser explicitly outside of the expected range in OpenShift (10000000 - 20000000) has known incompatibilities # This section can be used to construct a multiline regex for the files. # Each regex is searched for in the order that it appears and automatically # ignores comments. Any number of regexes can be added this way [regexes] regex1 = regex2 = &lt;/pre&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;This auditing tool currently only supports Kubernetes manifests, but we plan to expand it to include &lt;a href="https://developers.redhat.com/blog/2020/07/20/advanced-helm-support-in-the-openshift-4-5-web-console/"&gt;Helm charts&lt;/a&gt; and &lt;a href="https://developers.redhat.com/blog/category/go/"&gt;Go code&lt;/a&gt;, as well. The tool is in very early stages, but is looking for community input to help add use cases.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F09%2Fstatic-analysis-with-kubeaudit-for-red-hat-openshift%2F&amp;#38;linkname=Static%20analysis%20with%20KubeAudit%20for%20Red%20Hat%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F09%2Fstatic-analysis-with-kubeaudit-for-red-hat-openshift%2F&amp;#38;linkname=Static%20analysis%20with%20KubeAudit%20for%20Red%20Hat%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F09%2Fstatic-analysis-with-kubeaudit-for-red-hat-openshift%2F&amp;#38;linkname=Static%20analysis%20with%20KubeAudit%20for%20Red%20Hat%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F09%2Fstatic-analysis-with-kubeaudit-for-red-hat-openshift%2F&amp;#38;linkname=Static%20analysis%20with%20KubeAudit%20for%20Red%20Hat%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F09%2Fstatic-analysis-with-kubeaudit-for-red-hat-openshift%2F&amp;#38;linkname=Static%20analysis%20with%20KubeAudit%20for%20Red%20Hat%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F09%2Fstatic-analysis-with-kubeaudit-for-red-hat-openshift%2F&amp;#38;linkname=Static%20analysis%20with%20KubeAudit%20for%20Red%20Hat%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F09%2Fstatic-analysis-with-kubeaudit-for-red-hat-openshift%2F&amp;#38;linkname=Static%20analysis%20with%20KubeAudit%20for%20Red%20Hat%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F09%2Fstatic-analysis-with-kubeaudit-for-red-hat-openshift%2F&amp;#038;title=Static%20analysis%20with%20KubeAudit%20for%20Red%20Hat%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2020/10/09/static-analysis-with-kubeaudit-for-red-hat-openshift/" data-a2a-title="Static analysis with KubeAudit for Red Hat OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/09/static-analysis-with-kubeaudit-for-red-hat-openshift/"&gt;Static analysis with KubeAudit for Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Ib3GHDxqQ0w" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In this article, we introduce a new utility for developers who want to ensure that their code transitions cleanly from upstream Kubernetes to Red Hat OpenShift. OpenShiftKubeAudit (KubeAudit) is a static analyzer that semantically checks a user&amp;#8217;s code for known incompatibilities so you can fix them before bringing the code into OpenShift. KubeAudit is also [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/09/static-analysis-with-kubeaudit-for-red-hat-openshift/"&gt;Static analysis with KubeAudit for Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/10/09/static-analysis-with-kubeaudit-for-red-hat-openshift/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">788447</post-id><dc:creator>Sean Pryor</dc:creator><dc:date>2020-10-09T07:00:20Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/09/static-analysis-with-kubeaudit-for-red-hat-openshift/</feedburner:origLink></entry><entry><title>Migrating C and C++ applications from Red Hat Enterprise Linux version 7 to version 8</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/QFKrisKVNwo/" /><category term="C" /><category term="C++" /><category term="Linux" /><category term="Programming Languages" /><category term="application migration" /><category term="binary interface" /><category term="rhel 7" /><category term="rhel 8" /><category term="share libraries" /><author><name>Thomas Rodgers</name></author><id>https://developers.redhat.com/blog/?p=782477</id><updated>2020-10-08T07:00:22Z</updated><published>2020-10-08T07:00:22Z</published><content type="html">&lt;p&gt;When moving an application that you&amp;#8217;ve compiled on &lt;a href="https://developers.redhat.com/topics/linux"&gt;Red Hat Enterprise Linux&lt;/a&gt; (RHEL) 7 to RHEL 8, you will likely encounter issues due to changes in the application binary interface (ABI). The ABI describes the low-level binary interface between an application and its operating environment. This interface requires tools such as compilers and linkers, as well as the produced runtime libraries and the operating system itself, to agree upon the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The application&amp;#8217;s data type, size, and alignment.&lt;/li&gt; &lt;li&gt;The calling conventions, which define how function arguments are passed and how return values are retrieved.&lt;/li&gt; &lt;li&gt;The function and symbol names and their versions.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;As the toolchain and operating environment evolve with successive versions of Red Hat Enterprise Linux, the details of the ABI will change. Red Hat makes certain guarantees regarding application compatibility between releases. Those guarantees are outlined in the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/articles/rhel-abi-compatibility"&gt;RHEL 7 Application Compatibility Guide&lt;/a&gt; (ACG) and the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/articles/rhel8-abi-compatibility"&gt;RHEL 8 Application Compatibility Guide&lt;/a&gt;. This article is a companion to the ACG guides.&lt;/p&gt; &lt;h2&gt;Migrating compatible C and C++ applications&lt;/h2&gt; &lt;p&gt;The most straightforward way to avoid compatibility problems when migrating your &lt;a href="https://developers.redhat.com/topics/c"&gt;C and C++&lt;/a&gt; application code from RHEL 7 to RHEL 8 is to rebuild the code on RHEL 8. Users can leverage a containerized or virtualized environment to build and test in a RHEL 8 environment on a RHEL 7 system before migrating to the newer version.&lt;/p&gt; &lt;p&gt;In some cases, it might be possible to deploy C and C++ applications built on RHEL 7 to RHEL 8 without first rebuilding. If you&amp;#8217;ve followed the guidance in the RHEL 7 ACG, and depend only on the C and C++ libraries in &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/articles/rhel-abi-compatibility#Appendix"&gt;compatibility level 1 (CL1)&lt;/a&gt;, then Red Hat provides a compatible version of those libraries in RHEL 8. Indeed, we maintain stable versions of those libraries for three major RHEL releases. Note, however, that there are no guarantees that RHEL 8 will provide RHEL 7-compatible libraries beyond CL1.&lt;/p&gt; &lt;h2&gt;Migrating shared libraries&lt;/h2&gt; &lt;p&gt;Unless a C application loads shared libraries via &lt;code&gt;dlopen()&lt;/code&gt;, the &lt;code&gt;ldd&lt;/code&gt; command shows what libraries a given application depends on (in the case of &lt;code&gt;dlopen()&lt;/code&gt;, you can use &lt;code&gt;LD_DEBUG=all my_application&lt;/code&gt; or the &lt;code&gt;strace&lt;/code&gt; command to observe which libraries are being loaded). However, shared libraries for C++ applications are more complicated and restricted.&lt;/p&gt; &lt;h3&gt;C++ ABI incompatibility between RHEL 7 and RHEL 8&lt;/h3&gt; &lt;p&gt;C++ libraries from RHEL 7 are likely to be incompatible with the corresponding libraries from RHEL 8. The reason is that the system compiler for RHEL 8 uses a new ABI for C++ code, which is different from the ABI used by the RHEL 7 system compiler. The RHEL 7 version of the C++ libraries uses the old ABI, whereas the RHEL 8 version uses the new one. Applications linked to an RHEL 7 version of a C++ library cannot use the RHEL 8 version of that library. The only C++ libraries that are in ACG CL1 are the C++ standard library (&lt;code&gt;libstdc++&lt;/code&gt;) and Thread Building Blocks libraries (&lt;code&gt;libtbb&lt;/code&gt; and &lt;code&gt;libtbbmalloc&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;Changes in the C++ ABI between RHEL 7 and RHEL 8 are due to introducing new versions of &lt;code&gt;std::string&lt;/code&gt; and &lt;code&gt;std::list&lt;/code&gt; in the C++ standard library. For details about the changes to the &lt;code&gt;std::string&lt;/code&gt; ABI, see Jason Merril&amp;#8217;s article, &lt;a href="https://developers.redhat.com/blog/2015/02/05/gcc5-and-the-c11-abi/"&gt;GCC5 and the C++11 ABI&lt;/a&gt;. The changes to the C++ ABI apply to all language modes, so it doesn&amp;#8217;t matter whether you are compiling for &lt;code&gt;-std=c++11&lt;/code&gt; or any other &lt;code&gt;-std&lt;/code&gt; option.&lt;/p&gt; &lt;h3&gt;Workarounds that do not work&lt;/h3&gt; &lt;p&gt;If your application code depends on libraries not in ACG CL1, it might be tempting to simply copy those other binary dependencies over; however, this is neither supported nor likely to work. It might also be tempting to statically link all dependencies on RHEL 7 and deploy to RHEL 8. Statically linking &lt;code&gt;glibc&lt;/code&gt; prevents some features from functioning, so this option is also unsupported and not recommended by Red Hat. It is possible to statically link to &lt;code&gt;libstdc++&lt;/code&gt;, but doing that shouldn&amp;#8217;t be necessary. The &lt;code&gt;libstdc++.so.6&lt;/code&gt; that shipped with RHEL 8 is backward compatible. Statically linking to other C++ libraries could be a solution if the versions of those libraries on RHEL 8 are incompatible with the RHEL 7 versions.&lt;/p&gt; &lt;h3&gt;Build guidance&lt;/h3&gt; &lt;p&gt;Finally, the ACG provides a recommended approach to building applications on RHEL 7 that will run on RHEL 8. This essentially means building your application against your own version(s) of library dependencies outside of those specifically listed in ACG CL1, rather than those provided by the base system. See the ACG for guidance on providing compatibility libraries for applications that have been built with libraries that are outside of the desired compatibility level.&lt;/p&gt; &lt;h2&gt;Frequently asked questions (F.A.Q.)&lt;/h2&gt; &lt;p&gt;Before closing, I&amp;#8217;ll answer the most pertinent questions that we&amp;#8217;ve received since releasing RHEL 8.&lt;/p&gt; &lt;h3&gt;Q: What does Red Hat recommend if I want to deploy an application on RHEL 8? Where should I build my application?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: The most straightforward way to avoid compatibility problems is to build your application on RHEL 8.&lt;/p&gt; &lt;h3&gt;Q: Can I build my application on RHEL 7 and deploy it on RHEL 8?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: Yes, if you follow the guidance in the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/articles/rhel-abi-compatibility"&gt;Application Compatibility Guide&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Whether a given application built on RHEL 7 can be deployed on RHEL 8 depends on the system libraries the application is linked with. For libraries within the RHEL 7 ACG&amp;#8217;s CL1, a compatible version of the library is provided in RHEL 8. For all other libraries, there is no guarantee that RHEL 8 provides a compatible version.&lt;/p&gt; &lt;p&gt;For C++ libraries, this advice is not hypothetical, as C++ libraries from RHEL 7 are likely to be incompatible with the corresponding libraries from RHEL 8. To build applications on RHEL 7 that will run on RHEL 8, the ACG suggests the following:&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Provide compatibility libraries for applications that have been built with libraries that are not at the desired compatibility level.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;In other words, build your application against your own version of the libraries, rather than the RHEL 7 versions. That way, your application depends on a library that you control, not one that belongs to RHEL, and will be incompatible between major releases.&lt;/p&gt; &lt;h3&gt;Q: Why are C++ libraries built with the system compiler on RHEL 7 not compatible with RHEL 8?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: The system compiler on RHEL 8 uses a new ABI for C++ code, which is different from the ABI used by the RHEL 7 system compiler. The RHEL 7 versions of C++ libraries use the old ABI, and the RHEL 8 versions use the new one. Applications linked to the RHEL 7 version of a C++ library will not be able to use the RHEL 8 version of that library.&lt;/p&gt; &lt;h3&gt;Q: What has changed in the C++ compiler and libraries to cause ABI incompatibilities between RHEL 7 and 8?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: Starting with RHEL 8, new versions of the &lt;code&gt;std::string&lt;/code&gt; and &lt;code&gt;std::list&lt;/code&gt; types are defined in the C++ standard library. As a result, C++ binaries (applications and libraries) built on RHEL 7 could fail to link with C++ binaries built on RHEL 8—or they might link successfully but fail at runtime.&lt;/p&gt; &lt;h3&gt;Q: If I want to build a C++ application on RHEL 8, do I need to compile with &lt;code&gt;-std=c++11&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: No. The changes to the C++ ABI apply to all language modes, whether you compile with &lt;code&gt;-std=c++11&lt;/code&gt; or &lt;code&gt;-std=c++98&lt;/code&gt; or any other &lt;code&gt;-std&lt;/code&gt; option.&lt;/p&gt; &lt;h3&gt;Q: Can I fix library ABI compatibility problems by copying shared libraries from RHEL 7 over to RHEL 8?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: Copying a RHEL 7 library to RHEL 8 might work, but Red Hat does not support it. There are downsides of copying RHEL 7 libraries to RHEL 8, such as the library not being automatically updated by &lt;code&gt;yum&lt;/code&gt;/&lt;code&gt;dnf&lt;/code&gt; when Red Hat issues an erratum for the package to fix bugs or security flaws.&lt;/p&gt; &lt;h3&gt;Q: I built my application on RHEL 6, and it ran fine on RHEL 7. Will my application work on RHEL 8 as well?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: It depends. If the application only uses libraries from CL1 in the RHEL 6 ACG, then it should work on RHEL 8 because those libraries are stable for three major releases (RHEL versions 6, 7, and 8). If the application uses RHEL 6 libraries that are outside of CL1, but which still happen to work on RHEL 7, it might also run on RHEL 8, but it might not. There was never a guarantee that such an application would run on RHEL 7.&lt;/p&gt; &lt;h3&gt;Q: Which packages are guaranteed to be ABI compatible across major RHEL releases?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: See the Application Compatibility Guides for each version of RHEL. Libraries in compatibility level 1 are guaranteed to be compatible. On RHEL 7, the only C++ libraries in CL1 are &lt;code&gt;libstdc++&lt;/code&gt; and the Thread Building Blocks (TBB) libs.&lt;/p&gt; &lt;h3&gt;Q: Are there libraries that support both the old and new C++ ABIs?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: Yes, &lt;code&gt;libstdc++&lt;/code&gt; does. The TBB libraries are not affected by the ABI change, so they are also compatible with both ABIs.&lt;/p&gt; &lt;h3&gt;Q: How can I find out which libraries my application depends on?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: The &lt;code&gt;ldd&lt;/code&gt; command displays all the shared libraries that a binary depends on (including indirect dependencies from other libraries).&lt;/p&gt; &lt;h3&gt;Q: Can I build an application for RHEL 8 (with the RHEL 8 system compiler) on RHEL 7?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: While theoretically possible, doing so would be awkward and error-prone. If developing on RHEL 7 is a requirement for applications to be deployed on RHEL 8, Red Hat recommends running RHEL 8 in a container or virtual machine.&lt;/p&gt; &lt;h3&gt;Q: If I link statically to glibc/libstdc++ on RHEL 7, will the resulting binary work fine on RHEL 8?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: Red Hat does not support statically linking applications. Statically linking &lt;code&gt;glibc&lt;/code&gt; prevents some features from functioning and is not recommended. Statically linking &lt;code&gt;libstdc++&lt;/code&gt; is possible, but it should not be necessary because the &lt;code&gt;libstdc++.so.6&lt;/code&gt; library on RHEL 8 is backward compatible. Statically linking to other C++ libraries could be a solution if the versions of those libraries on RHEL 8 are incompatible with the RHEL 7 versions.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F08%2Fmigrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8%2F&amp;#38;linkname=Migrating%20C%20and%20C%2B%2B%20applications%20from%20Red%20Hat%20Enterprise%20Linux%20version%207%20to%20version%208" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F08%2Fmigrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8%2F&amp;#38;linkname=Migrating%20C%20and%20C%2B%2B%20applications%20from%20Red%20Hat%20Enterprise%20Linux%20version%207%20to%20version%208" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F08%2Fmigrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8%2F&amp;#38;linkname=Migrating%20C%20and%20C%2B%2B%20applications%20from%20Red%20Hat%20Enterprise%20Linux%20version%207%20to%20version%208" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F08%2Fmigrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8%2F&amp;#38;linkname=Migrating%20C%20and%20C%2B%2B%20applications%20from%20Red%20Hat%20Enterprise%20Linux%20version%207%20to%20version%208" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F08%2Fmigrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8%2F&amp;#38;linkname=Migrating%20C%20and%20C%2B%2B%20applications%20from%20Red%20Hat%20Enterprise%20Linux%20version%207%20to%20version%208" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F08%2Fmigrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8%2F&amp;#38;linkname=Migrating%20C%20and%20C%2B%2B%20applications%20from%20Red%20Hat%20Enterprise%20Linux%20version%207%20to%20version%208" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F08%2Fmigrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8%2F&amp;#38;linkname=Migrating%20C%20and%20C%2B%2B%20applications%20from%20Red%20Hat%20Enterprise%20Linux%20version%207%20to%20version%208" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F08%2Fmigrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8%2F&amp;#038;title=Migrating%20C%20and%20C%2B%2B%20applications%20from%20Red%20Hat%20Enterprise%20Linux%20version%207%20to%20version%208" data-a2a-url="https://developers.redhat.com/blog/2020/10/08/migrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8/" data-a2a-title="Migrating C and C++ applications from Red Hat Enterprise Linux version 7 to version 8"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/08/migrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8/"&gt;Migrating C and C++ applications from Red Hat Enterprise Linux version 7 to version 8&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/QFKrisKVNwo" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;When moving an application that you&amp;#8217;ve compiled on Red Hat Enterprise Linux (RHEL) 7 to RHEL 8, you will likely encounter issues due to changes in the application binary interface (ABI). The ABI describes the low-level binary interface between an application and its operating environment. This interface requires tools such as compilers and linkers, as [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/08/migrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8/"&gt;Migrating C and C++ applications from Red Hat Enterprise Linux version 7 to version 8&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/10/08/migrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">782477</post-id><dc:creator>Thomas Rodgers</dc:creator><dc:date>2020-10-08T07:00:22Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/08/migrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8/</feedburner:origLink></entry><entry><title>Payments Architecture - Fraud Detection Example</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/uDN6qP6Q_II/payments-architecture-fraud-detection-example.html" /><category term="Architecture Blueprints" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="Decision Manager" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="JBossAMQ" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-payments_architecture_fraud_detection_example</id><updated>2020-10-08T09:07:50Z</updated><published>2020-10-08T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-NhImz2b--gU/X1jsrXrG_jI/AAAAAAAAxeI/2I4wj4AD4YUcuxWk1-464UVs5OiejZFwQCNcBGAsYHQ/s1600/christiann-koepke-0jPuWm8_9wY-unsplash.jpg" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="fraud detection" border="0" data-original-height="1067" data-original-width="1600" height="213" src="https://1.bp.blogspot.com/-NhImz2b--gU/X1jsrXrG_jI/AAAAAAAAxeI/2I4wj4AD4YUcuxWk1-464UVs5OiejZFwQCNcBGAsYHQ/s320/christiann-koepke-0jPuWm8_9wY-unsplash.jpg" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="font-size: 12.8px; text-align: center;"&gt;Part 5 - Fraud detection&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;Cloud technology is changing the way payment services are architectured. In this series we will be presenting insight from our customers on adopting open source and cloud technology to modernize their payment service.&lt;br /&gt;&lt;br /&gt;So far we've presented research-based architectural blueprints of&amp;nbsp;&lt;a href="http://www.schabell.org/2018/11/integration-key-to-customer-experience-introduction.html" target="_blank"&gt;omnichannel customer experience&lt;/a&gt;,&amp;nbsp;&lt;a href="https://www.schabell.org/2020/01/integrating-saas-applications-an-introduction.html" target="_blank"&gt;integrating with SaaS applications&lt;/a&gt;, and&amp;nbsp;&lt;a href="https://www.schabell.org/2020/05/cloud-native-development-a-blueprint.html" target="_blank"&gt;cloud-native development solutions&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;In&amp;nbsp;&lt;a href="https://www.schabell.org/2020/10/payments-architecture-anti-money-laundering-example.html" target="_blank"&gt;the previous article&lt;/a&gt;&amp;nbsp;in this series we walked through the anti-money laundering physical architecture.&lt;br /&gt;&lt;br /&gt;In this article we're exploring the physical architecture for fraud detection, one based on successful customer solutions.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Blueprints&lt;/h3&gt;&lt;div&gt;As a reminder, the architectural details covered here are base on real customer integration solutions using open source technologies.&lt;br /&gt;&lt;br /&gt;The example scenario presented here is a generic common blueprint that was uncovered researching customer solutions. It's our intent to provide a blueprint that provides guidance and not deep technical details.&lt;br /&gt;&lt;br /&gt;This section covers the visual representations as presented. There are many ways to represent each element in this architectural blueprint, but we've chosen icons, text and colors that I hope are going to make it all easy to absorb. Feel free to post comments at the bottom of this post, or&amp;nbsp;&lt;a href="https://www.schabell.org/p/contact.html" target="_blank"&gt;contact us&lt;/a&gt;&amp;nbsp;directly with your feedback.&lt;br /&gt;&lt;br /&gt;Now let's take a look at the details in this blueprint and outline the example.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;h3 style="text-align: left;"&gt;Fraud detection&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;The example blueprint shown on the right entitled&amp;nbsp;&lt;i&gt;Fraud detection data example&lt;/i&gt;&amp;nbsp;outlines the solution in a physical architecture. Note that this diagram is focusing on the highest level of the fraud detection solution and the element groupings that apply to this process.&lt;br /&gt;&lt;br /&gt;&lt;a href="https://1.bp.blogspot.com/-0GQIu-f-WKw/X23N4z7u93I/AAAAAAAAxkI/EqDgHpBkT_4MK5ed6xXUsNVPweL06i7VACNcBGAsYHQ/s1600/payments-fraud-detection-sd.png" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="fraud detection" border="0" data-original-height="900" data-original-width="1600" height="180" src="https://1.bp.blogspot.com/-0GQIu-f-WKw/X23N4z7u93I/AAAAAAAAxkI/EqDgHpBkT_4MK5ed6xXUsNVPweL06i7VACNcBGAsYHQ/s320/payments-fraud-detection-sd.png" title="" width="320" /&gt;&lt;/a&gt;When you look at&amp;nbsp;&lt;a href="https://www.schabell.org/2020/09/payments-architecture-immediate-payments-example.html" target="_blank"&gt;our previous article&amp;nbsp;&lt;/a&gt;where the immediate payments architecture was laid out as an overview, but if you look closely you'll notice one of the elements was called &lt;i&gt;fraud detection microservices.&amp;nbsp;&lt;/i&gt;This section takes a closer look at what happens behind the scenes to a payments request that triggers a need for fraud processing.&lt;br /&gt;&lt;br /&gt;In this example, starting from the top left corner, a user sends an event or message to execute a payment as an entry point. The users can be mobile, web, or any external device / application that acts as the entry point with the organizations payments architecture.&lt;br /&gt;&lt;br /&gt;This request to execute payments connects through API gateways (not depicted) to internal centralized p&lt;i&gt;ayments event streams&lt;/i&gt;. This element takes these streams and determines what selection or sub-selection of actions need to be taken. For this example, we'll proceed through this architecture as if fraud processing is necessary.&lt;br /&gt;&lt;br /&gt;When an event triggers a compliance issue, such as possible fraudulent transactions, the payment transaction(s) are analysed in&amp;nbsp;&lt;i&gt;transaction scoring and labeling.&amp;nbsp;&lt;/i&gt;It's a collection of rules fueled by data analytics that examine the suspect transactions, score them with a value, and tag them with labels before sending them on for specific evaluation as potentially suspicious transactions.&lt;br /&gt;&lt;br /&gt;Feeding into&amp;nbsp;&lt;i&gt;transaction scoring and labeling&lt;/i&gt;&amp;nbsp;are several elements of interest that provide a bit of data, analysis, and potential for applying artificial intelligence along with machine learning concepts. This starts with&amp;nbsp;&lt;i&gt;know your customer (KYC)&amp;nbsp;&lt;/i&gt;applications that are used to&amp;nbsp;verify the identity, suitability, and risks involved with maintaining a business relationship with each customer. Feeding the&amp;nbsp;&lt;i&gt;KYC&amp;nbsp;&lt;/i&gt;applications is data from&amp;nbsp;&lt;i&gt;customers and transaction data.&amp;nbsp;&amp;nbsp;&lt;/i&gt;Both of these elements are providing input to the&amp;nbsp;&lt;i&gt;model training and serving&lt;/i&gt;&amp;nbsp;elements that generate models for scoring and labeling transactions.&lt;br /&gt;&lt;br /&gt;After modeling, scoring, and labeling suspect transactions, they're sent to&amp;nbsp;&lt;i&gt;fraud detection rules&lt;/i&gt;, a collection of decision services that provide final evaluations and decision making on the suspect transactions. If it's determined the transactions are not fraudulent actions, this outcome's fed back into the&amp;nbsp;&lt;i&gt;payments event stream&amp;nbsp;&lt;/i&gt;in a topic for further clearing processing (not shown in this diagram, see the previous article for clearing and routing architectural details).&lt;br /&gt;&lt;br /&gt;Finally, if the outcome is that the transactions are suspect, then they are passed off to the&amp;nbsp;&lt;i&gt;malicious activity streams&lt;/i&gt;&amp;nbsp;element to start a topic of investigation. The action taken is to&amp;nbsp;start the&amp;nbsp;&lt;i&gt;fraud prevention process&lt;/i&gt;. When investigations into the fraudulent activity is done processing, an event is sent back to the &lt;i&gt;payments event streams&lt;/i&gt;&amp;nbsp;to continue on its journey through the payments architecture&lt;i&gt;.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;The fraud detection architecture blueprint shown here is detailing the internal workings of the scoring, labeling, evanuation, processing, and reporting of suspect fraudulent transactions. It's to be viewed as zooming in on the previous article's single element to provide more details on the physical architecture blueprint for this specific solution.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Project examples&lt;/h3&gt;&lt;div&gt;Sharing the process results for our payments blueprint is what this series is about, but there are project artifacts and diagrams that can also be shared with you the reader. We've pulled together an&amp;nbsp;&lt;a href="https://gitlab.com/redhatdemocentral/portfolio-architecture-examples" target="_blank"&gt;examples repository&lt;/a&gt;&amp;nbsp;for all our architecture blueprint diagrams.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: right;"&gt;&lt;/div&gt;The&amp;nbsp;&lt;a href="https://gitlab.com/redhatdemocentral/portfolio-architecture-examples" target="_blank"&gt;Portfolio Architecture Examples&lt;/a&gt;&amp;nbsp;repository makes it possible to collect and share individual images from each diagram element as well as the entire project as a whole.&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: right;"&gt;&lt;a href="https://1.bp.blogspot.com/-4t4sRfvBdlA/X2CrzVQ9sFI/AAAAAAAAxgY/vZ61Z75fKhk3GFBC3ZZlOyGpIJWtBgDngCNcBGAsYHQ/s1600/Screenshot%2B2020-09-15%2Bat%2B13.55.42.png" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="fraud detection" border="1" data-original-height="232" data-original-width="530" height="139" src="https://1.bp.blogspot.com/-4t4sRfvBdlA/X2CrzVQ9sFI/AAAAAAAAxgY/vZ61Z75fKhk3GFBC3ZZlOyGpIJWtBgDngCNcBGAsYHQ/s320/Screenshot%2B2020-09-15%2Bat%2B13.55.42.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;For example, if you scroll down to the file listings on the main page, you can locate all the example physical diagrams as shown on the right.&lt;br /&gt;&lt;div style="text-align: right;"&gt;&lt;/div&gt;&lt;br /&gt;This is the collection associated with payments:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;in this case there are multiple images you can click to view&lt;/li&gt;&lt;li&gt;a project file you can download to your local machine using the&amp;nbsp;&lt;i&gt;Download Diagram&lt;/i&gt;&amp;nbsp;link&lt;/li&gt;&lt;li&gt;a&amp;nbsp;&lt;i&gt;Load Diagram&lt;/i&gt;&amp;nbsp;link that you can&amp;nbsp;&lt;a href="https://redhatdemocentral.gitlab.io/portfolio-architecture-tooling/index.html?#/portfolio-architecture-examples/projects/schematic-diagrams-payments.drawio" target="_blank"&gt;click to automatically open the project diagrams&lt;/a&gt;&amp;nbsp;in the diagram tooling used in this blueprint (use private or incognito browser mode to avoid caching issues and a smoother tooling experience)&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;Give it a try and feel free to explore the collection of logical, schematic, detailed, solution, and community diagrams. This should allow you to get started much quicker than from scratch if you can kick-start a project with existing diagrams.&lt;br /&gt;&lt;br /&gt;Should you desire to start designing your own diagrams, please contribute the project file (ending in .drawio) by raising an issue with the file attached. We'd love to continue collecting these projects for others to use.&lt;br /&gt;&lt;br /&gt;Finally, there is a free online&amp;nbsp;&lt;a href="https://redhatdemocentral.gitlab.io/portfolio-architecture-workshops" target="_blank"&gt;beginners guide workshop&lt;/a&gt;&amp;nbsp;available focused on using the diagram tooling, please explore to learn tips and tricks from the experts.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;What's next&lt;/h3&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;An overview of the series on the payments portfolio architecture blueprint can be found here:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/09/financial-payments-architecture-an-introduction.html" target="_blank"&gt;An introduction&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/09/payments-architecture-common-elements.html" target="_blank"&gt;Common architecture elements&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/09/payments-architecture-immediate-payments-example.html" target="_blank"&gt;Immediate payments example&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/10/payments-architecture-anti-money-laundering-example.html" target="_blank"&gt;Anti-money laundering example&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/10/payments-architecture-fraud-detection-example.html" target="_blank"&gt;Fraud detection example&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Financial calculations example&lt;/li&gt;&lt;/ol&gt;&lt;ol style="text-align: left;"&gt;&lt;/ol&gt;Catch up on any articles you missed by following one of the links above.&lt;br /&gt;&lt;br /&gt;Next in this series, taking a look at the&amp;nbsp;generic&amp;nbsp;&lt;i&gt;financial calculations example&lt;/i&gt;&amp;nbsp;in a cloud-native architecture focused on payment processing.&lt;br /&gt;&lt;br /&gt;(Article co-authored by&amp;nbsp;&lt;a href="https://www.linkedin.com/in/ramonv/?originalSubdomain=uk" target="_blank"&gt;Ramon Villarreal&lt;/a&gt;)&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4Rg9d11H8Nk:PxPbHHg9zmU:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4Rg9d11H8Nk:PxPbHHg9zmU:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4Rg9d11H8Nk:PxPbHHg9zmU:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=4Rg9d11H8Nk:PxPbHHg9zmU:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4Rg9d11H8Nk:PxPbHHg9zmU:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=4Rg9d11H8Nk:PxPbHHg9zmU:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4Rg9d11H8Nk:PxPbHHg9zmU:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=4Rg9d11H8Nk:PxPbHHg9zmU:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4Rg9d11H8Nk:PxPbHHg9zmU:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=4Rg9d11H8Nk:PxPbHHg9zmU:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=4Rg9d11H8Nk:PxPbHHg9zmU:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/4Rg9d11H8Nk" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/uDN6qP6Q_II" height="1" width="1" alt=""/&gt;</content><summary>Part 5 - Fraud detectionCloud technology is changing the way payment services are architectured. In this series we will be presenting insight from our customers on adopting open source and cloud technology to modernize their payment service. So far we've presented research-based architectural blueprints of omnichannel customer experience, integrating with SaaS applications, and cloud-native develo...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-10-08T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/4Rg9d11H8Nk/payments-architecture-fraud-detection-example.html</feedburner:origLink></entry><entry><title>Install a signed certificate with Open Liberty 20.0.0.10’s Automatic Certificate Management Environment Support 2.0</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/KIJsoz8dh50/" /><category term="Java" /><category term="Kubernetes" /><category term="Microservices" /><category term="Security" /><category term="ACME protocol" /><category term="Let's Encrypt" /><category term="OpenLiberty" /><category term="signed certificate" /><author><name>Jakub Pomykala</name></author><id>https://developers.redhat.com/blog/?p=790407</id><updated>2020-10-07T07:00:23Z</updated><published>2020-10-07T07:00:23Z</published><content type="html">&lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/products/runtimes"&gt;Red Hat Runtimes&lt;/a&gt; now supports the new &lt;a href="https://github.com/OpenLiberty/open-liberty/releases"&gt;Open Liberty 20.0.0.10&lt;/a&gt; Java runtime. Open Liberty 20.0.0.10 features support for the &lt;a target="_blank" rel="nofollow" href="https://tools.ietf.org/html/rfc8555"&gt;Automatic Certificate Management Environment&lt;/a&gt; (ACME) protocol, which automates the process of obtaining a certificate signed by a certificate authority (CA). The Open Liberty 20.0.0.10 release also includes many bug fixes.&lt;/p&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://openliberty.io/"&gt;Open Liberty&lt;/a&gt; is a fast, lightweight &lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java&lt;/a&gt; runtime for building cloud-native applications and &lt;a href="https://developers.redhat.com/topics/microservices/"&gt;microservices&lt;/a&gt;. It is compatible with MicroProfile and Jakarta EE and enables you to include as much or as little of Liberty as you need to support your application. With releases every four weeks and zero migration, it&amp;#8217;s easier to remain current and avoid technical debt.&lt;/p&gt; &lt;p&gt;In this article, I introduce the new ACME CA Support 2.0 (&lt;code&gt;acmeCA-2.0&lt;/code&gt;) feature, including how to use it to install a CA-signed certificate. Visit Open Liberty&amp;#8217;s GitHub repository to view the &lt;a href="https://github.com/OpenLiberty/open-liberty/issues?q=label%3Arelease%3A200010+label%3A%22release+bug%22+"&gt;list of fixed bugs&lt;/a&gt; for this release.&lt;/p&gt; &lt;h2&gt;Run your apps using Open Liberty 20.0.0.10&lt;/h2&gt; &lt;p&gt;Use the following coordinates to install Open Liberty 20.0.0.10 with &lt;a target="_blank" rel="nofollow" href="https://openliberty.io//guides/maven-intro.html"&gt;Maven&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;io.openliberty&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;openliberty-runtime&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;20.0.0.10&amp;#60;/version&amp;#62; &amp;#60;type&amp;#62;zip&amp;#60;/type&amp;#62; &amp;#60;/dependency&amp;#62; &lt;/pre&gt; &lt;p&gt;For &lt;a target="_blank" rel="nofollow" href="https://openliberty.io//guides/gradle-intro.html"&gt;Gradle&lt;/a&gt;, use:&lt;/p&gt; &lt;pre&gt;dependencies { libertyRuntime group: 'io.openliberty', name: 'openliberty-runtime', version: '[20.0.0.10,)' } &lt;/pre&gt; &lt;p&gt;If you&amp;#8217;re using docker, it&amp;#8217;s:&lt;/p&gt; &lt;pre&gt;FROM open-liberty&lt;/pre&gt; &lt;h2&gt;Install a signed certificate with ACME CA 2.0&lt;/h2&gt; &lt;p&gt;By default, Open Liberty provides a self-signed certificate for transport security (SSL/TLS) support. The self-signed certificate lets you establish transport security right away, but most browsers will mark the certificate as insecure. As a result, users accessing your website will receive a warning or error message.&lt;/p&gt; &lt;p&gt;Having a CA-signed certificate solves this problem, but obtaining one can be costly. In some cases, a signed certificate might not be available during development and testing. A certificate signed by a public certificate authority, such as &lt;a target="_blank" rel="nofollow" href="https://letsencrypt.org/"&gt;Let&amp;#8217;s Encrypt&lt;/a&gt;, offers a middle ground.&lt;/p&gt; &lt;p&gt;With Open Liberty 20.0.0.10, we&amp;#8217;ve added support for the ACME protocol, which automates interactions between a certificate authority and your web server. You can use the new ACME CA 2.0 feature to install a CA-signed certificate for improved testing and user experience.&lt;/p&gt; &lt;h2&gt;Add the acmeCA-2.0 feature in your server.xml&lt;/h2&gt; &lt;p&gt;In your &lt;code&gt;server.xml&lt;/code&gt;, simply provide the directory URI for a certificate authority that uses the ACME 2.0 protocol, along with the domain name for your Open Liberty server. The ACME provider calls back on port 80 to verify domain ownership. Once it has verified ownership, the CA issues a certificate. On starting, the Open Liberty server uses the provided CA directory URI to request the certificate. The CA-signed certificate is installed in the keystore and acts as the default certificate.&lt;/p&gt; &lt;p&gt;To include the ACME CA 2.0 feature in your Open Liberty 20.0.0.10 installation, update your &lt;code&gt;server.xml&lt;/code&gt; as follows:&lt;/p&gt; &lt;pre&gt;&amp;#60;featureManager&amp;#62; &amp;#60;feature&amp;#62;acmeCA-2.0&amp;#60;/feature&amp;#62; &amp;#60;/featureManager&amp;#62; &amp;#60;acmeCA directoryURI="https://acme.host.com/directory" &amp;#62; &amp;#60;domain&amp;#62;theDomainThatIOwn.com&amp;#60;/domain&amp;#62; &amp;#60;accountContact&amp;#62;mailto:my_email_addr@theDomainThatIOwn.com&amp;#60;/accountContact&amp;#62; &amp;#60;/acmeCA&amp;#62; &amp;#60;httpEndpoint host="*" httpPort="80" httpsPort="443" id="defaultHttpEndpoint"/&amp;#62; &amp;#60;keyStore password="password_for_keystore" id="defaultKeyStore"/&amp;#62; &lt;/pre&gt; &lt;p&gt;See the &lt;a target="_blank" rel="nofollow" href="https://tools.ietf.org/html/rfc8555"&gt;ACME specification (RFC8555)&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://en.wikipedia.org/wiki/Automated_Certificate_Management_Environment"&gt;ACME Wikipedia page&lt;/a&gt; for a high-level view of the ACME protocol. See the Let&amp;#8217;s Encrypt homepage for &lt;a target="_blank" rel="nofollow" href="https://letsencrypt.org/how-it-works/"&gt;more information about the ACME protocol and how it works&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Try Open Liberty 20.0.0.10 in Red Hat Runtimes&lt;/h2&gt; &lt;p&gt;Open Liberty is part of Red Hat Runtimes and is available to &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/products/red-hat-runtimes"&gt;Red Hat Runtimes subscribers&lt;/a&gt;. To learn more about deploying Open Liberty applications to &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;, see our Open Liberty guide, &lt;i&gt;&lt;a target="_blank" rel="nofollow" href="https://openliberty.io/guides/cloud-openshift.html"&gt;Deploying microservices to OpenShift&lt;/a&gt;&lt;/i&gt;. Open Liberty 20.0.0.10 is available through Maven, Gradle, docker, and as a downloadable archive.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F07%2Finstall-a-signed-certificate-with-open-liberty-20-0-0-10s-automatic-certificate-management-environment-support-2-0%2F&amp;#38;linkname=Install%20a%20signed%20certificate%20with%20Open%20Liberty%2020.0.0.10%E2%80%99s%20Automatic%20Certificate%20Management%20Environment%20Support%202.0" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F07%2Finstall-a-signed-certificate-with-open-liberty-20-0-0-10s-automatic-certificate-management-environment-support-2-0%2F&amp;#38;linkname=Install%20a%20signed%20certificate%20with%20Open%20Liberty%2020.0.0.10%E2%80%99s%20Automatic%20Certificate%20Management%20Environment%20Support%202.0" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F07%2Finstall-a-signed-certificate-with-open-liberty-20-0-0-10s-automatic-certificate-management-environment-support-2-0%2F&amp;#38;linkname=Install%20a%20signed%20certificate%20with%20Open%20Liberty%2020.0.0.10%E2%80%99s%20Automatic%20Certificate%20Management%20Environment%20Support%202.0" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F07%2Finstall-a-signed-certificate-with-open-liberty-20-0-0-10s-automatic-certificate-management-environment-support-2-0%2F&amp;#38;linkname=Install%20a%20signed%20certificate%20with%20Open%20Liberty%2020.0.0.10%E2%80%99s%20Automatic%20Certificate%20Management%20Environment%20Support%202.0" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F07%2Finstall-a-signed-certificate-with-open-liberty-20-0-0-10s-automatic-certificate-management-environment-support-2-0%2F&amp;#38;linkname=Install%20a%20signed%20certificate%20with%20Open%20Liberty%2020.0.0.10%E2%80%99s%20Automatic%20Certificate%20Management%20Environment%20Support%202.0" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F07%2Finstall-a-signed-certificate-with-open-liberty-20-0-0-10s-automatic-certificate-management-environment-support-2-0%2F&amp;#38;linkname=Install%20a%20signed%20certificate%20with%20Open%20Liberty%2020.0.0.10%E2%80%99s%20Automatic%20Certificate%20Management%20Environment%20Support%202.0" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F07%2Finstall-a-signed-certificate-with-open-liberty-20-0-0-10s-automatic-certificate-management-environment-support-2-0%2F&amp;#38;linkname=Install%20a%20signed%20certificate%20with%20Open%20Liberty%2020.0.0.10%E2%80%99s%20Automatic%20Certificate%20Management%20Environment%20Support%202.0" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F07%2Finstall-a-signed-certificate-with-open-liberty-20-0-0-10s-automatic-certificate-management-environment-support-2-0%2F&amp;#038;title=Install%20a%20signed%20certificate%20with%20Open%20Liberty%2020.0.0.10%E2%80%99s%20Automatic%20Certificate%20Management%20Environment%20Support%202.0" data-a2a-url="https://developers.redhat.com/blog/2020/10/07/install-a-signed-certificate-with-open-liberty-20-0-0-10s-automatic-certificate-management-environment-support-2-0/" data-a2a-title="Install a signed certificate with Open Liberty 20.0.0.10’s Automatic Certificate Management Environment Support 2.0"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/07/install-a-signed-certificate-with-open-liberty-20-0-0-10s-automatic-certificate-management-environment-support-2-0/"&gt;Install a signed certificate with Open Liberty 20.0.0.10&amp;#8217;s Automatic Certificate Management Environment Support 2.0&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/KIJsoz8dh50" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Red Hat Runtimes now supports the new Open Liberty 20.0.0.10 Java runtime. Open Liberty 20.0.0.10 features support for the Automatic Certificate Management Environment (ACME) protocol, which automates the process of obtaining a certificate signed by a certificate authority (CA). The Open Liberty 20.0.0.10 release also includes many bug fixes. Open Liberty is a fast, lightweight [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/07/install-a-signed-certificate-with-open-liberty-20-0-0-10s-automatic-certificate-management-environment-support-2-0/"&gt;Install a signed certificate with Open Liberty 20.0.0.10&amp;#8217;s Automatic Certificate Management Environment Support 2.0&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/10/07/install-a-signed-certificate-with-open-liberty-20-0-0-10s-automatic-certificate-management-environment-support-2-0/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">790407</post-id><dc:creator>Jakub Pomykala</dc:creator><dc:date>2020-10-07T07:00:23Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/07/install-a-signed-certificate-with-open-liberty-20-0-0-10s-automatic-certificate-management-environment-support-2-0/</feedburner:origLink></entry><entry><title>Kubernetes integration and more in odo 2.0</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/6wRR3Cu86CU/" /><category term="DevOps" /><category term="Java" /><category term="Kubernetes" /><category term="Node.js" /><category term="Operator" /><category term="Python" /><category term="codeready" /><category term="deploy Operator" /><category term="devfile" /><category term="odo" /><category term="openshift" /><author><name>Serena Chechile Nichols</name></author><id>https://developers.redhat.com/blog/?p=792387</id><updated>2020-10-06T07:00:04Z</updated><published>2020-10-06T07:00:04Z</published><content type="html">&lt;p&gt;Odo is a &lt;a href="https://developers.redhat.com/blog/2020/06/16/enterprise-kubernetes-development-with-odo-the-cli-tool-for-developers/"&gt;developer-focused command-line interface&lt;/a&gt; (CLI) for OpenShift and Kubernetes. This article introduces highlights of the odo 2.0 release, which now integrates with &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt;. Additional highlights include the new default deployment method in odo 2.0, which uses devfiles for rapid, iterative development. We&amp;#8217;ve also moved &lt;a href="https://developers.redhat.com/topics/kubernetes/operators"&gt;Operator deployment&lt;/a&gt; out of experimental mode, so you can easily deploy Operator-backed services from the &lt;code&gt;odo&lt;/code&gt; command line.&lt;/p&gt; &lt;p&gt;&lt;span id="more-792387"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Odo 2.0 now works with core Kubernetes!&lt;/h2&gt; &lt;p&gt;Odo 2.0 lets you write, build, and deploy applications entirely on Kubernetes. You can use any compliant Kubernetes cluster, whether it&amp;#8217;s a hosted cloud provider, a self-managed cluster, or hosted locally with a tool like Minikube.&lt;/p&gt; &lt;p&gt;Odo&amp;#8217;s integration with Kubernetes provides a consistent development experience. You can write applications from scratch, iterate the &lt;a href="https://developers.redhat.com/devnation/tech-talks/odo-iterative-container-based-development"&gt;development inner loop&lt;/a&gt;, and commit your code to Git, all within the same environment.&lt;/p&gt; &lt;p&gt;To initiate your Kubernetes installation, install the Kubernetes &lt;a target="_blank" rel="nofollow" href="https://github.com/operator-framework/operator-lifecycle-manager"&gt;Operator Lifecycle Manager&lt;/a&gt; and &lt;code&gt;etcd&lt;/code&gt;. See the &lt;a target="_blank" rel="nofollow" href="https://operatorhub.io/operator/etcd"&gt;etcd installation guide&lt;/a&gt; on the Kubernetes Operator Hub.&lt;/p&gt; &lt;h2&gt;Deploy with devfiles in odo 2.0&lt;/h2&gt; &lt;p&gt;This major release establishes devfiles as the default deployment method for odo. Odo still supports Source-to-Image (S2I) deployment for developers who prefer using the &lt;code&gt;--s2i&lt;/code&gt; flag from the command line.&lt;/p&gt; &lt;p&gt;A &lt;em&gt;devfile&lt;/em&gt; is a YAML file that is used to define the developer workspace in &lt;a href="https://developers.redhat.com/videos/youtube/S3auoOqwDS8"&gt;Eclipse Che&lt;/a&gt;. Devfiles have an open format, so we can also use them in &lt;code&gt;odo&lt;/code&gt;. Odo&amp;#8217;s support for devfiles lets developers easily switch between tools, with no additional configuration. Using devfiles also streamlines the process of adding new language support to &lt;code&gt;odo&lt;/code&gt;and Eclipse Che. Now, you only need to create a devfile from a template and update.&lt;/p&gt; &lt;p&gt;See the &lt;a target="_blank" rel="nofollow" href="https://odo.dev/docs/deploying-a-devfile-using-odo/"&gt;odo tutorial&lt;/a&gt; for a guide to deploying your first devfile in &lt;code&gt;odo&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;A common definition for your developer tools&lt;/h3&gt; &lt;p&gt;With the odo 2.0 release, we have aligned on devfiles as the common definition format for developer workspaces and application lifecycles across Red Hat&amp;#8217;s developer tooling portfolio. &lt;a href="https://developers.redhat.com/products/codeready-workspaces/overview"&gt;Red Hat CodeReady Workspaces&lt;/a&gt; (the productized version of Eclispe Che) currently uses devfiles, and all of the OpenShift IDE extensions leverage &lt;code&gt;odo&lt;/code&gt;, bringing iterative development and deployment flows directly to developers. You can try out &lt;code&gt;odo&lt;/code&gt; directly or access it using IDE extensions for &lt;a href="https://developers.redhat.com/products/vscode-extensions/overview"&gt;VS Code&lt;/a&gt;, &lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/che/"&gt;Eclipse Che&lt;/a&gt;, and the &lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/ide/"&gt;Eclipse desktop IDE&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Improved language support&lt;/h3&gt; &lt;p&gt;Adding devfiles as the default deployment method improves language support in odo 2.0. To see the list of currently supported devfile components, open your &lt;code&gt;odo&lt;/code&gt; CLI and run:&lt;/p&gt; &lt;pre&gt;$ odo catalog list components &lt;/pre&gt; &lt;p&gt;Table 1 shows the currently available &lt;code&gt;odo&lt;/code&gt; components, including devfile components.&lt;/p&gt; &lt;table align="center"&gt; &lt;caption&gt;Table 1: Odo devfile components&lt;/caption&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;&lt;b&gt;Name&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;b&gt;Registry&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;java-maven&lt;/td&gt; &lt;td&gt;Upstream Maven and OpenJDK 11&lt;/td&gt; &lt;td&gt;DefaultDevfileRegistry&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;java-openliberty&lt;/td&gt; &lt;td&gt;Open Liberty microservice in Java&lt;/td&gt; &lt;td&gt;DefaultDevfileRegistry&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;java-quarkus&lt;/td&gt; &lt;td&gt;Upstream Quarkus with Java+GraalVM&lt;/td&gt; &lt;td&gt;DefaultDevfileRegistry&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;java-springboot&lt;/td&gt; &lt;td&gt;Spring Boot using Java&lt;/td&gt; &lt;td&gt;DefaultDevfileRegistry&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;nodejs&lt;/td&gt; &lt;td&gt;Stack with NodeJS 12&lt;/td&gt; &lt;td&gt;DefaultDevfileRegistry&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;Odo&amp;#8217;s new deployment model is available for &lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java&lt;/a&gt; using &lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt;Quarkus&lt;/a&gt;, &lt;a href="https://developers.redhat.com/blog/category/node-js/"&gt;Node.js&lt;/a&gt;, and early access for &lt;a href="https://developers.redhat.com/blog/category/python/"&gt;Python&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Sample starters for new projects&lt;/h3&gt; &lt;p&gt;As another advantage of using devfiles, you can now leverage sample starters to scaffold new projects. Simply use the &lt;code&gt;odo create&lt;/code&gt; command to provide the name of your devfile component. Odo will pull a cloned local copy of a starter from the associated Git repository. Here&amp;#8217;s an example:&lt;/p&gt; &lt;pre&gt;$ odo create nodejs --starter Validation  ✓  Checking devfile existence [22411ns]  ✓  Checking devfile compatibility [22492ns]  ✓  Creating a devfile component from registry: DefaultDevfileRegistry [24341ns]  ✓  Validating devfile component [74471ns] Starter Project  ✓  Downloading starter project nodejs-starter from https://github.com/odo-devfiles/nodejs-ex.git [479ms] Please use `odo push` command to create the component with source deployed &lt;/pre&gt; &lt;h2&gt;Debugging with odo&lt;/h2&gt; &lt;p&gt;With this release, the &lt;code&gt;odo debug&lt;/code&gt; command has graduated from tech preview. See the odo tutorial for more about &lt;a target="_blank" rel="nofollow" href="https://odo.dev/docs/debugging-using-devfile/"&gt;debugging application components with the odo CLI or VS Code&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Using Operators for installation&lt;/h2&gt; &lt;p&gt;Developers can now deploy Operator-backed services with &lt;code&gt;odo&lt;/code&gt;. Operators provide custom resource definitions (CRDs), which you can use to create service instances—also known as custom resources (CRs), or operands. You can then use these instances in your projects and link them to your components.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s an example, using the &lt;code&gt;etcd&lt;/code&gt; Operator to deploy an Etcd cluster:&lt;/p&gt; &lt;pre&gt;$ odo catalog list services   Operators available in the cluster   NAME                          CRDs  etcdoperator.v0.9.4           EtcdCluster, EtcdBackup, EtcdRestore $ odo service create etcdoperator.v0.9.4/EtcdCluster &lt;/pre&gt; &lt;p&gt;See the odo tutorial for more about &lt;a target="_blank" rel="nofollow" href="https://odo.dev/docs/operator-hub/#deploying-operator-backed-service-to-a-cluster-via-yaml"&gt;deploying Operator-backed services with odo&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F06%2Fkubernetes-integration-and-more-in-odo-2-0%2F&amp;#38;linkname=Kubernetes%20integration%20and%20more%20in%20odo%202.0" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F06%2Fkubernetes-integration-and-more-in-odo-2-0%2F&amp;#38;linkname=Kubernetes%20integration%20and%20more%20in%20odo%202.0" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F06%2Fkubernetes-integration-and-more-in-odo-2-0%2F&amp;#38;linkname=Kubernetes%20integration%20and%20more%20in%20odo%202.0" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F06%2Fkubernetes-integration-and-more-in-odo-2-0%2F&amp;#38;linkname=Kubernetes%20integration%20and%20more%20in%20odo%202.0" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F06%2Fkubernetes-integration-and-more-in-odo-2-0%2F&amp;#38;linkname=Kubernetes%20integration%20and%20more%20in%20odo%202.0" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F06%2Fkubernetes-integration-and-more-in-odo-2-0%2F&amp;#38;linkname=Kubernetes%20integration%20and%20more%20in%20odo%202.0" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F06%2Fkubernetes-integration-and-more-in-odo-2-0%2F&amp;#38;linkname=Kubernetes%20integration%20and%20more%20in%20odo%202.0" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F06%2Fkubernetes-integration-and-more-in-odo-2-0%2F&amp;#038;title=Kubernetes%20integration%20and%20more%20in%20odo%202.0" data-a2a-url="https://developers.redhat.com/blog/2020/10/06/kubernetes-integration-and-more-in-odo-2-0/" data-a2a-title="Kubernetes integration and more in odo 2.0"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/06/kubernetes-integration-and-more-in-odo-2-0/"&gt;Kubernetes integration and more in odo 2.0&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/6wRR3Cu86CU" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Odo is a developer-focused command-line interface (CLI) for OpenShift and Kubernetes. This article introduces highlights of the odo 2.0 release, which now integrates with Kubernetes. Additional highlights include the new default deployment method in odo 2.0, which uses devfiles for rapid, iterative development. We&amp;#8217;ve also moved Operator deployment out of experimental mode, so you can easily deploy [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/06/kubernetes-integration-and-more-in-odo-2-0/"&gt;Kubernetes integration and more in odo 2.0&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/10/06/kubernetes-integration-and-more-in-odo-2-0/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">792387</post-id><dc:creator>Serena Chechile Nichols</dc:creator><dc:date>2020-10-06T07:00:04Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/06/kubernetes-integration-and-more-in-odo-2-0/</feedburner:origLink></entry><entry><title>CodeReady Containers - Getting Started with OpenShift Container Platform 4.5 and Decision Manager Tooling</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/0DSID4pnaa8/codeready-containers-getting-started-with-ocp-45-and-decision-manager-tooling.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="CodeReadyContainers" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="Decision Manager" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-codeready_containers_getting_started_with_openshift_container_platform_4_5_and_decision_manager_tooling</id><updated>2020-10-08T17:33:11Z</updated><published>2020-10-05T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-4Rs3JaM6ne4/X3ddBFq5MdI/AAAAAAAAxk4/Y1gM9X2hSK0rMIx-bTvlcOmIU6Yd47TUACNcBGAsYHQ/s2048/jon-tyson-PXB7yEM5LVs-unsplash.jpg" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="2048" data-original-width="1536" height="200" src="https://1.bp.blogspot.com/-4Rs3JaM6ne4/X3ddBFq5MdI/AAAAAAAAxk4/Y1gM9X2hSK0rMIx-bTvlcOmIU6Yd47TUACNcBGAsYHQ/w150-h200/jon-tyson-PXB7yEM5LVs-unsplash.jpg" width="150" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; For some time now we've been working on updating your experience using CodeReady Containers, a container platform installation for your local machine, by providing interesting developer tooling and project examples.&amp;nbsp;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;The first example here is the latest version of the Red Hat Decision Manager installed on OpenShift Container Platform (either your own installation or using our &lt;a href="https://www.schabell.org/2020/09/how-to-setup-openshift-container-platform-45.html" target="_blank"&gt;CodeReady Containers installation&lt;/a&gt;).&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;Get started today with rules and business logic in just a few simple steps, as follows.&amp;nbsp;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;There is no better way to learn about container technologies, container platforms, and container-based application development than getting hands-on with great open technologies.&amp;nbsp;&lt;/div&gt;&lt;span&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;/span&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;This demo is to install Red Hat Decision Manager in the Cloud based on leveraging a Red Hat OpenShift Container Platform. It delivers a fully functioning Decision Manager containerized on OpenShift Container Platform.&lt;/div&gt;&lt;div&gt;&lt;div data-sourcepos="3:1-4:70" dir="auto"&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 data-sourcepos="7:1-9:131"&gt;Install on OpenShift Container Platform&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-lOy42L6FlZA/X3dbMEui4AI/AAAAAAAAxkg/EnNt4FQ7rtoUZtqckhYg85GHokiZFm4BQCNcBGAsYHQ/s1543/rhdm-build-rhdmauthor.png" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="code ready containers" border="0" data-original-height="827" data-original-width="1543" height="172" src="https://1.bp.blogspot.com/-lOy42L6FlZA/X3dbMEui4AI/AAAAAAAAxkg/EnNt4FQ7rtoUZtqckhYg85GHokiZFm4BQCNcBGAsYHQ/w320-h172/rhdm-build-rhdmauthor.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/h3&gt;&lt;div data-sourcepos="9:1-10:83" dir="auto"&gt;There are two options to install and run this project on the OpenShift Container Platform; use your own existing installation or to install on &lt;a href="https://www.schabell.org/2020/09/how-to-setup-openshift-container-platform-45.html" target="_blank"&gt;CodeReady Containers which provides you with a local OpenShift cluster&lt;/a&gt;.&lt;/div&gt;&lt;ol data-sourcepos="12:1-13:0" dir="auto"&gt;&lt;li data-sourcepos="12:1-13:0"&gt;Ensure you have an OpenShift container based installation, such as one of the following:&lt;/li&gt;&lt;/ol&gt;&lt;ul data-sourcepos="14:3-17:0" style="text-align: left;"&gt;&lt;li&gt;your own OpenShift installation, if using this you just need to pass the IP address to the init.{sh|bat} script.&lt;/li&gt;&lt;li data-sourcepos="16:3-17:0"&gt;&lt;div data-sourcepos="16:5-16:95"&gt;&lt;a href="https://gitlab.com/redhatdemocentral/ocp-install-demo"&gt;Code Ready Containers Easy Install&lt;/a&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol data-sourcepos="18:1-23:0" start="2" style="text-align: left;"&gt;&lt;li data-sourcepos="18:1-19:0"&gt;&lt;div data-sourcepos="18:4-18:146"&gt;&lt;a href="https://gitlab.com/redhatdemocentral/rhcs-rhdm-install-demo/-/archive/master/rhcs-rhdm-install-demo-master.zip"&gt;Download and unzip this demo.&lt;/a&gt;&lt;/div&gt;&lt;/li&gt;&lt;li data-sourcepos="18:1-19:0"&gt;&lt;div data-sourcepos="18:4-18:146"&gt;Run 'init.sh' or 'init.bat' file. 'init.bat' must be run with Administrative privileges:&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre class="code highlight js-syntax-highlight plaintext dark" lang="plaintext"&gt;&lt;code&gt;&lt;span class="line" id="LC1" lang="plaintext"&gt; # If using CodeReady Containers Easy Install project, just add the cluster address&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC2" lang="plaintext"&gt; # to HOST_IP variable found at the top of the init.{sh|bat} files, for example:&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC3" lang="plaintext"&gt; #&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC4" lang="plaintext"&gt; # HOST_IP=api.crc.testing &lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC5" lang="plaintext"&gt; # &lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC6" lang="plaintext"&gt; # Now run the script without arguments and it picks up that hostname as follows:&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC7" lang="plaintext"&gt; #&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC8" lang="plaintext"&gt; $ ./init.sh&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div data-sourcepos="42:1-42:140" dir="auto"&gt;&lt;a href="https://www.blogger.com/blog/post/edit/3868547292717970492/2667182560341544792#" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="Red Hat Decision Manager" border="0" data-original-height="988" data-original-width="1600" height="197" src="https://1.bp.blogspot.com/-jn-qDgri7Ag/XhLqljebByI/AAAAAAAAw1A/ewJyAbDlq5YD4VjMg4I0AqLAzGk89D0FwCEwYBhgL/s320/rhdm-ocp.png" title="" width="320" /&gt;&lt;/a&gt;Now log in to Red Hat Decision Manager to start developing containerized process automation projects (the address will be generated by OCP):&lt;/div&gt;&lt;ul data-sourcepos="44:3-45:0" dir="auto"&gt;&lt;li data-sourcepos="44:3-45:0"&gt;CodeReady Container example: http:rhcs-rhdm-install-demo-appdev-in-cloud.apps-crc.testing/decision-central ( u:erics / p:redhatdm1! )&lt;/li&gt;&lt;/ul&gt;&lt;div data-sourcepos="46:1-46:195" dir="auto"&gt;Not sure how to get started with Red Hat Decision Manager? Try one of these&amp;nbsp;&lt;a href="https://www.blogger.com/blog/post/edit/3868547292717970492/2667182560341544792#" rel="nofollow noreferrer noopener"&gt;online workshops&lt;/a&gt;&amp;nbsp;to build a first project from scratch.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=vMaeJDMSLpQ:UJBoSR2HJYU:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=vMaeJDMSLpQ:UJBoSR2HJYU:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=vMaeJDMSLpQ:UJBoSR2HJYU:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=vMaeJDMSLpQ:UJBoSR2HJYU:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=vMaeJDMSLpQ:UJBoSR2HJYU:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=vMaeJDMSLpQ:UJBoSR2HJYU:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=vMaeJDMSLpQ:UJBoSR2HJYU:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=vMaeJDMSLpQ:UJBoSR2HJYU:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=vMaeJDMSLpQ:UJBoSR2HJYU:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=vMaeJDMSLpQ:UJBoSR2HJYU:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=vMaeJDMSLpQ:UJBoSR2HJYU:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/vMaeJDMSLpQ" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/0DSID4pnaa8" height="1" width="1" alt=""/&gt;</content><summary>For some time now we've been working on updating your experience using CodeReady Containers, a container platform installation for your local machine, by providing interesting developer tooling and project examples.  The first example here is the latest version of the Red Hat Decision Manager installed on OpenShift Container Platform (either your own installation or using our CodeReady Containers ...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-10-05T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/vMaeJDMSLpQ/codeready-containers-getting-started-with-ocp-45-and-decision-manager-tooling.html</feedburner:origLink></entry><entry><title>Customizing and tuning the Kuryr SDN for Red Hat OpenShift 3.11 on Red Hat OpenStack 13</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/FeaA957blM8/" /><category term="Containers" /><category term="Kubernetes" /><category term="Linux" /><category term="Performance" /><category term="double encapsulation" /><category term="floating IP" /><category term="Kuryr" /><category term="openshift" /><category term="OpenStack" /><author><name>Mohammad Ahmad</name></author><id>https://developers.redhat.com/blog/?p=766097</id><updated>2020-10-02T07:23:04Z</updated><published>2020-10-02T07:23:04Z</published><content type="html">&lt;p&gt;In &lt;a href="https://developers.redhat.com/blog/2019/11/01/how-to-customize-the-red-hat-openshift-3-11-sdn/"&gt;a previous article&lt;/a&gt;, I showed you how to customize &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt; software-defined networking (SDN) for your organization&amp;#8217;s requirements and restrictions. In this article, we&amp;#8217;ll look at using the &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/install_config/configuring_kuryrsdn.html"&gt;Kuryr SDN&lt;/a&gt; instead. Using Kuryr with &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/welcome/index.html"&gt;OpenShift 3.11&lt;/a&gt; on &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_openstack_platform/13"&gt;Red Hat OpenStack 13&lt;/a&gt; changes the customization requirements because Kuryr works directly with OpenStack Neutron and Octavia.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: This article builds on the discussion and examples from my previous one. I recommend reading the previous one first.&lt;/p&gt; &lt;h2&gt;Background&lt;/h2&gt; &lt;p&gt;Traditional OpenShift installations leverage &lt;code&gt;openshift-sdn&lt;/code&gt;, which is specific to OpenShift. Using &lt;code&gt;openshift-sdn&lt;/code&gt; means that your containers run on a network within a network. This setup, known as &lt;em&gt;double encapsulation&lt;/em&gt;, introduces an additional layer of complexity, which becomes apparent when troubleshooting network issues. Double encapsulation also affects network performance due to the overhead of running a network within a network.&lt;/p&gt; &lt;p&gt;&lt;span id="more-766097"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;If you are running OpenShift on OpenStack, then you have the option to use the Kuryr SDN, which allows you to directly access OpenStack&amp;#8217;s Neutron services and avoid double encapsulation. Using the &lt;code&gt;kuryr-cni&lt;/code&gt; means that all of your OpenShift components—networks, subnets, load balancers, ports, and so on—are, in fact, OpenStack resources. This setup reduces the complexity of the networking layer. It also &lt;a target="_blank" rel="nofollow" href="https://www.openshift.com/blog/accelerate-your-openshift-network-performance-on-openstack-with-kuryr"&gt;improves network performance&lt;/a&gt;. As another benefit, you can assign floating IPs to any of the OpenShift services, which allows traffic directly into the service without having to go through the OpenShift router.&lt;/p&gt; &lt;p&gt;In some cases, you might need to customize Kuryr&amp;#8217;s network-range defaults, such as if the defaults overlap with your organization’s network. Let&amp;#8217;s look at the requirements for customizing the Kuryr network.&lt;/p&gt; &lt;h2&gt;Customizing the Kuryr network&lt;/h2&gt; &lt;p&gt;We&amp;#8217;ll use the same base address range from the customization example in my &lt;a href="https://developers.redhat.com/blog/2019/11/01/how-to-customize-the-red-hat-openshift-3-11-sdn/"&gt;previous article&lt;/a&gt;: 192.168.0.0/16. In this case, we&amp;#8217;ll divide the range between the service network (192.168.128.0/18), pod network (192.168.0.0/17), and docker-bridge network. For this specific example, we intend to configure Kuryr with namespace isolation, similar to &lt;code&gt;ovs-multitenant&lt;/code&gt; when using &lt;code&gt;openshift-sdn&lt;/code&gt;.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: &lt;a target="_blank" rel="nofollow" href="https://github.com/openshift/openshift-ansible"&gt;OpenShift-Ansible&lt;/a&gt;, which was featured in my last article, has significantly more parameter requirements to deliver the same network IP range customizations that we can achieve with the Kuryr Container Network Interface (CNI).&lt;/p&gt; &lt;h3&gt;Kuryr service network&lt;/h3&gt; &lt;p&gt;Because Kuryr uses Octavia load balancers (which is an Amphora VM in OpenStack), every OpenShift service is an instance of an Octavia load balancer. Therefore, &lt;code&gt;openshift_portal_net&lt;/code&gt; is the address range that OpenShift uses to assign IP addresses to OpenShift (Kubernetes) services. Each IP address will be associated with an Octavia load balancer as a VIP (Virtual IP, or floating port in OpenStack) in case of failover. Additionally, because Octavia load balancers are Amphora VMs, they also require a port/IP, which should not collide with the &lt;code&gt;openshift_portal_net&lt;/code&gt; range.&lt;/p&gt; &lt;p&gt;Using the following ranges ensures a clear distinction between the Amphora VM IP range and the OpenShift service IP range:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;openshift_openstack_kuryr_service_subnet_cidr&lt;/code&gt;: The range to be used by both OpenShift service IPs and the Octavia load balancer Amphora VM IPs. In this case, the range is 192.168.128.0/18, which is between 192.168.128.0 and 192.168.191.254.&lt;/li&gt; &lt;li&gt;&lt;code&gt;openshift_portal_net&lt;/code&gt;: The range dedicated to OpenShift service IPs. In this case, the range is 192.168.128.0/19, which is between 192.168.128.0 and 192.168.159.254.&lt;/li&gt; &lt;li&gt;&lt;code&gt;openshift_openstack_kuryr_service_pool_start&lt;/code&gt;: The start of the range to be used by the Octavia load balancer Amphora VM IPs. In this case, it is the second half of the range identified in the first parameter (&lt;code&gt;openshift_openstack_kuryr_service_subnet_cidr&lt;/code&gt;). The start of that range is 192.168.160.0.&lt;/li&gt; &lt;li&gt;&lt;code&gt;openshift_openstack_kuryr_service_pool_end&lt;/code&gt;: The end of the range used by the Octavia load balancer Amphora VM IPs. In this case, it is 192.168.191.254.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Figure 1 shows Amphora VM&amp;#8217;s IP allocation when implemented with an OpenShift service.&lt;/p&gt; &lt;div id="attachment_766107" style="width: 649px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Amphora-VM-IP-in-service.png"&gt;&lt;img aria-describedby="caption-attachment-766107" class="wp-image-766107" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Amphora-VM-IP-in-service.png" alt="Amphora VM's IP allocation groupings between itself and OpenShift" width="639" height="373" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Amphora-VM-IP-in-service.png 960w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Amphora-VM-IP-in-service-300x175.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Amphora-VM-IP-in-service-768x448.png 768w" sizes="(max-width: 639px) 100vw, 639px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-766107" class="wp-caption-text"&gt;Figure 1: Clearly defining each range avoids IP collisions.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Kuryr pod network&lt;/h3&gt; &lt;p&gt;There are no changes to the pod network, which is straightforward. In our case, it&amp;#8217;s:&lt;/p&gt; &lt;pre&gt;openshift_openstack_kuryr_pod_subnet_cidr: 192.168.0.0/17&lt;/pre&gt; &lt;h2&gt;Customizing the Kuryr inventory parameters&lt;/h2&gt; &lt;p&gt;Next, we&amp;#8217;ll look at all of the inventory parameters required to successfully configure a customized OpenShift IP range.&lt;/p&gt; &lt;h3&gt;Enabling namespace isolation&lt;/h3&gt; &lt;p&gt;These parameters are needed to enable namespace isolation in Kuryr:&lt;/p&gt; &lt;pre&gt;openshift_use_kuryr: True openshift_use_openshift_sdn: False use_trunk_ports: True os_sdn_network_plugin_name: cni openshift_node_proxy_mode: userspace kuryr_openstack_pool_driver: nested &lt;/pre&gt; &lt;p&gt;You must ensure that &lt;code&gt;os_sdn_network_plugin_name&lt;/code&gt; is unset.&lt;/p&gt; &lt;h3&gt;IP range&lt;/h3&gt; &lt;p&gt;Failing to set the IP range clearly causes performance problems with the &lt;code&gt;kuryr-controller&lt;/code&gt;, and IP conflicts:&lt;/p&gt; &lt;pre&gt;#SERVICE: openshift_portal_net: 192.168.128.0/19 openshift_openstack_kuryr_service_subnet_cidr: 192.168.128.0/18 openshift_openstack_kuryr_service_pool_start: 192.168.160.1 openshift_openstack_kuryr_service_pool_end: 192.168.191.253 #POD openshift_openstack_kuryr_pod_subnet_cidr: 192.168.0.0/17 &lt;/pre&gt; &lt;p&gt;The OpenShift service IP range is from 192.168.128.0 to 192.168.159.254; the Amphora VM IP range is from 192.168.160.1 to 19.168.191.254; and the pod IP range is from 192.168.0.1 to 192.168.127.254.&lt;/p&gt; &lt;p&gt;Note that the following types of errors will cause the OpenShift service IP range to conflict with Amphora VM&amp;#8217;s IP range:&lt;/p&gt; &lt;pre&gt;ERROR kuryr_kubernetes.controller.drivers.lbaasv2 [-] Error when creating loadbalancer: {"debuginfo": null, "faultcode": "Client", "faultstring": "IP address 192.168.123.123 already allocated in subnet &lt;/pre&gt; &lt;h3&gt;Pre-creating subports&lt;/h3&gt; &lt;p&gt;This value is generally relevant when you have a flat network, where pre-creating subports contributes to the overall deployment speed for applications that require network resources. In most cases, you can set this value to false:&lt;/p&gt; &lt;pre&gt;openshift_kuryr_precreate_subports: false &lt;/pre&gt; &lt;h3&gt;Cluster sizing&lt;/h3&gt; &lt;p&gt;This parameter changes the way that you size a cluster, so it is important. The number of pods per namespace is determined by &lt;code&gt;prefixlen&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;openshift_openstack_kuryr_pod_subnet_prefixlen &lt;/pre&gt; &lt;p&gt;Where:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;/24 = 256 pods per namespace&lt;/li&gt; &lt;li&gt;/25 = 128 pods per namespace&lt;/li&gt; &lt;li&gt;/26 = 64 pods per namespace&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Pool batch&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;kuryr_openstack_pool_batch&lt;/code&gt; value needs to be set based on &lt;code&gt;openshift_openstack_kuryr_pod_subnet_prefixlen&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;kuryr_openstack_pool_max: kuryr_openstack_pool_min: &lt;/pre&gt; &lt;p&gt;Here are some suggestions for the following values of &lt;code&gt;openshift_openstack_kuryr_pod_subnet_prefixlen&lt;/code&gt;:&lt;/p&gt; &lt;p&gt;24: batch: 5, max: 10, min: 1&lt;br /&gt; 25: batch: 4, max: 7, min: 1&lt;br /&gt; 26: batch: 3, max: 5, min: 1&lt;/p&gt; &lt;p&gt;Also note that each OpenShift node will have its own pool, so if you have three worker nodes, each node will have a dedicated pool for that namespace. This requirement limits how many worker nodes you can use based on the size of &lt;code&gt;openshift_openstack_kuryr_pod_subnet_prefixlen&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;kuryr_openstack_ca: &amp;#8220;MYORG_CA_Bundle.txt&amp;#8221;&lt;/h3&gt; &lt;p&gt;If you do not set this value, Kuryr will fail.&lt;/p&gt; &lt;h3&gt;Images&lt;/h3&gt; &lt;p&gt;Providing specific values for the images rules out the risk of default images being incorrect:&lt;/p&gt; &lt;pre&gt;openshift_openstack_kuryr_controller_image openshift_openstack_kuryr_cni_image &lt;/pre&gt; &lt;h3&gt;kuryr_openstack_public_net_id&lt;/h3&gt; &lt;p&gt;You can get this value from &lt;code&gt;openstack network list&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;Global namespaces&lt;/h3&gt; &lt;p&gt;By default, these are the only namespaces that are considered &lt;i&gt;global&lt;/i&gt;, meaning that Kuryr allows other namespaces to reach these namespaces despite namespace isolation:&lt;/p&gt; &lt;pre&gt;kuryr_openstack_global_namespaces: default,openshift-monitoring &lt;/pre&gt; &lt;h3&gt;Namespace isolation&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;openshift_kuryr_subnet_driver: namespace&lt;/code&gt; and &lt;code&gt;openshift_kuryr_sg_driver: namespace&lt;/code&gt; are required for namespace isolation.&lt;/p&gt; &lt;h3&gt;DNS lookup&lt;/h3&gt; &lt;p&gt;The values here allow DNS lookup:&lt;/p&gt; &lt;pre&gt;openshift_master_open_ports: - service: dns tcp   port: 53/tcp - service: dns udp   port: 53/udp openshift_node_open_ports: - service: dns tcp   port: 53/tcp - service: dns udp   port: 53/udp &lt;/pre&gt; &lt;h3&gt;openshift_openstack_node_secgroup_rules&lt;/h3&gt; &lt;pre&gt;# NOTE(shadower): the 53 rules are needed for Kuryr - direction: ingress protocol: tcp port_range_min: 53 port_range_max: 53 - direction: ingress protocol: udp port_range_min: 53 port_range_max: 53 - direction: ingress protocol: tcp port_range_min: 10250 port_range_max: 10250 remote_ip_prefix: "{{ openshift_openstack_kuryr_pod_subnet_cidr }}" - direction: ingress protocol: tcp port_range_min: 10250 port_range_max: 10250 remote_ip_prefix: "{{ openshift_openstack_subnet_cidr }}" - direction: ingress protocol: udp port_range_min: 4789 port_range_max: 4789 remote_ip_prefix: "{{ openshift_openstack_kuryr_pod_subnet_cidr }}" - direction: ingress protocol: udp port_range_min: 4789 port_range_max: 4789 remote_ip_prefix: "{{ openshift_openstack_subnet_cidr }}" - direction: ingress protocol: tcp port_range_min: 9100 port_range_max: 9100 remote_ip_prefix: "{{ openshift_openstack_kuryr_pod_subnet_cidr }}" - direction: ingress protocol: tcp port_range_min: 9100 port_range_max: 9100 remote_ip_prefix: "{{ openshift_openstack_subnet_cidr }}" - direction: ingress protocol: tcp port_range_min: 8444 port_range_max: 8444 remote_ip_prefix: "{{ openshift_openstack_kuryr_pod_subnet_cidr }}" - direction: ingress protocol: tcp port_range_min: 8444 port_range_max: 8444 remote_ip_prefix: "{{ openshift_openstack_subnet_cidr }}" &lt;/pre&gt; &lt;p&gt;Most importantly, never use &lt;code&gt;remote_group_id&lt;/code&gt;. Instead, only use &lt;code&gt;remote_ip_prefix&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Using Kuryr with OpenShift 3.11 on OpenStack 13 provides the benefits of using OpenStack&amp;#8217;s Neutron networking directly for OpenShift pods and services, instead of the OpenShift SDN. Avoiding double encapsulation improves performance and reduces troubleshooting complexity, and you also get the benefits of directly associating floating IPs to OpenShift services, which is useful in several applications.&lt;/p&gt; &lt;p&gt;There are, however, parameters that must be configured correctly in order to get an optimally running OpenShift cluster with Kuryr. This article identified all of the important parameters and the recommended values that are required to configure a cluster that suits your needs.&lt;/p&gt; &lt;h2&gt;Acknowledgments&lt;/h2&gt; &lt;p&gt;I would like to acknowledge &lt;a target="_blank" rel="nofollow" href="https://ltomasbo.wordpress.com/"&gt;Luis Tomas Bolivar&lt;/a&gt; as my co-author and &lt;a href="https://developers.redhat.com/blog/author/pnguyen/"&gt;Phuong Nguyen&lt;/a&gt; as our peer reviewer.&lt;/p&gt; &lt;h2&gt;References&lt;/h2&gt; &lt;p&gt;For additional information:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;See &amp;#8220;&lt;a href="https://developers.redhat.com/blog/2019/11/01/how-to-customize-the-red-hat-openshift-3-11-sdn/"&gt;How to customize the Red Hat OpenShift 3.11 SDN&lt;/a&gt;&amp;#8221; ( Mohammad Ahmad, 2019) for the original discussion and example that are the basis for this article.&lt;/li&gt; &lt;li&gt;See &amp;#8220;&lt;a target="_blank" rel="nofollow" href="https://www.openshift.com/blog/accelerate-your-openshift-network-performance-on-openstack-with-kuryr"&gt;Accelerate your OpenShift Network Performance on OpenStack with Kuryr&lt;/a&gt;&amp;#8221; (Rodriguez, Malleni, and Bolivar, 2019) for an architectural overview and performance comparison of the Kuryr SDN versus OpenShift SDN.&lt;/li&gt; &lt;li&gt;See the &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/install_config/configuring_kuryrsdn.html"&gt;Kuryr SDN and OpenShift Container Platform (OCP 3.11) documentation&lt;/a&gt; for detailed information about configuring the Kuryr SDN.&lt;/li&gt; &lt;li&gt;See &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/install_config/configuring_openstack.html"&gt;Configuring for OpenStack&lt;/a&gt; (OCP 3.11) for more about configuring OCP to access the OpenStack infrastructure.&lt;/li&gt; &lt;li&gt;See &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/admin_guide/kuryr.html"&gt;Kuryr SDN Administration&lt;/a&gt; (OCP 3.11) for more about configuring the Kuryr SDN.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F02%2Fcustomizing-and-tuning-the-kuryr-sdn-for-red-hat-openshift-3-11-on-red-hat-openstack-13%2F&amp;#38;linkname=Customizing%20and%20tuning%20the%20Kuryr%20SDN%20for%20Red%20Hat%20OpenShift%203.11%20on%20Red%20Hat%20OpenStack%2013" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F02%2Fcustomizing-and-tuning-the-kuryr-sdn-for-red-hat-openshift-3-11-on-red-hat-openstack-13%2F&amp;#38;linkname=Customizing%20and%20tuning%20the%20Kuryr%20SDN%20for%20Red%20Hat%20OpenShift%203.11%20on%20Red%20Hat%20OpenStack%2013" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F02%2Fcustomizing-and-tuning-the-kuryr-sdn-for-red-hat-openshift-3-11-on-red-hat-openstack-13%2F&amp;#38;linkname=Customizing%20and%20tuning%20the%20Kuryr%20SDN%20for%20Red%20Hat%20OpenShift%203.11%20on%20Red%20Hat%20OpenStack%2013" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F02%2Fcustomizing-and-tuning-the-kuryr-sdn-for-red-hat-openshift-3-11-on-red-hat-openstack-13%2F&amp;#38;linkname=Customizing%20and%20tuning%20the%20Kuryr%20SDN%20for%20Red%20Hat%20OpenShift%203.11%20on%20Red%20Hat%20OpenStack%2013" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F02%2Fcustomizing-and-tuning-the-kuryr-sdn-for-red-hat-openshift-3-11-on-red-hat-openstack-13%2F&amp;#38;linkname=Customizing%20and%20tuning%20the%20Kuryr%20SDN%20for%20Red%20Hat%20OpenShift%203.11%20on%20Red%20Hat%20OpenStack%2013" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F02%2Fcustomizing-and-tuning-the-kuryr-sdn-for-red-hat-openshift-3-11-on-red-hat-openstack-13%2F&amp;#38;linkname=Customizing%20and%20tuning%20the%20Kuryr%20SDN%20for%20Red%20Hat%20OpenShift%203.11%20on%20Red%20Hat%20OpenStack%2013" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F02%2Fcustomizing-and-tuning-the-kuryr-sdn-for-red-hat-openshift-3-11-on-red-hat-openstack-13%2F&amp;#38;linkname=Customizing%20and%20tuning%20the%20Kuryr%20SDN%20for%20Red%20Hat%20OpenShift%203.11%20on%20Red%20Hat%20OpenStack%2013" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F02%2Fcustomizing-and-tuning-the-kuryr-sdn-for-red-hat-openshift-3-11-on-red-hat-openstack-13%2F&amp;#038;title=Customizing%20and%20tuning%20the%20Kuryr%20SDN%20for%20Red%20Hat%20OpenShift%203.11%20on%20Red%20Hat%20OpenStack%2013" data-a2a-url="https://developers.redhat.com/blog/2020/10/02/customizing-and-tuning-the-kuryr-sdn-for-red-hat-openshift-3-11-on-red-hat-openstack-13/" data-a2a-title="Customizing and tuning the Kuryr SDN for Red Hat OpenShift 3.11 on Red Hat OpenStack 13"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/02/customizing-and-tuning-the-kuryr-sdn-for-red-hat-openshift-3-11-on-red-hat-openstack-13/"&gt;Customizing and tuning the Kuryr SDN for Red Hat OpenShift 3.11 on Red Hat OpenStack 13&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/FeaA957blM8" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In a previous article, I showed you how to customize Red Hat OpenShift software-defined networking (SDN) for your organization&amp;#8217;s requirements and restrictions. In this article, we&amp;#8217;ll look at using the Kuryr SDN instead. Using Kuryr with OpenShift 3.11 on Red Hat OpenStack 13 changes the customization requirements because Kuryr works directly with OpenStack Neutron and [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/02/customizing-and-tuning-the-kuryr-sdn-for-red-hat-openshift-3-11-on-red-hat-openstack-13/"&gt;Customizing and tuning the Kuryr SDN for Red Hat OpenShift 3.11 on Red Hat OpenStack 13&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/10/02/customizing-and-tuning-the-kuryr-sdn-for-red-hat-openshift-3-11-on-red-hat-openstack-13/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">766097</post-id><dc:creator>Mohammad Ahmad</dc:creator><dc:date>2020-10-02T07:23:04Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/02/customizing-and-tuning-the-kuryr-sdn-for-red-hat-openshift-3-11-on-red-hat-openstack-13/</feedburner:origLink></entry><entry><title>Command-line cluster management with Red Hat OpenShift’s new web terminal (tech preview)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/swGMQMl_psE/" /><category term="DevOps" /><category term="Kubernetes" /><category term="Linux" /><category term="Operator" /><category term="odo" /><category term="openshift" /><category term="OpenShift cluster" /><category term="OpenShift Operator" /><category term="Web Terminal Operator" /><author><name>Joshua Wood</name></author><id>https://developers.redhat.com/blog/?p=787327</id><updated>2020-10-01T07:00:29Z</updated><published>2020-10-01T07:00:29Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;&amp;#8216;s web console simplifies many development and deployment chores to just a few clicks, but sometimes you need a command-line interface (CLI) to get things done on a cluster. Whether you&amp;#8217;re learning by cut-and-paste in a tutorial or troubleshooting a deep bug in production (also often done by cut-and-paste), you’ll likely need to enter at least a line or two at a command prompt.&lt;/p&gt; &lt;p&gt;Starting with version 4.5.3, OpenShift users can try out a tech preview of the new Web Terminal Operator. The new OpenShift web terminal brings indispensable command-line tools right to the web console, and its Linux environment runs in a pod deployed on your OpenShift cluster. The web terminal eliminates the need to install software and configure connections and authentication for your local terminal. It also makes it easier to use OpenShift on devices like tablets and mobile phones, which might lack a native terminal.&lt;/p&gt; &lt;p&gt;&lt;span id="more-787327"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;This article introduces the new OpenShift web terminal, including how to install and activate the Web Terminal Operator.&lt;/p&gt; &lt;h2&gt;An easier way to manage OpenShift clusters&lt;/h2&gt; &lt;p&gt;The new OpenShift web terminal includes key programs for working with clusters, including:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The &lt;code&gt;oc&lt;/code&gt; tool for comprehensive OpenShift management.&lt;/li&gt; &lt;li&gt;&lt;code&gt;odo&lt;/code&gt;, OpenShift&amp;#8217;s streamlined workflow utility for application development.&lt;/li&gt; &lt;li&gt;&lt;code&gt;kubectl&lt;/code&gt;, the core Kubernetes API client.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;CLI client tools for the &lt;a href="https://developers.redhat.com/blog/2020/08/14/introduction-to-cloud-native-ci-cd-with-tekton-kubecon-europe-2020/"&gt;Tekton CI/CD framework&lt;/a&gt;, &lt;a href="https://developers.redhat.com/blog/2020/07/20/advanced-helm-support-in-the-openshift-4-5-web-console/"&gt;Helm application deployment charts&lt;/a&gt;, and &lt;a href="https://developers.redhat.com/topics/serverless-architecture"&gt;Knative serverless workloads&lt;/a&gt; are also installed and ready to run. These OpenShift and &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; tools are supported by the usual suspects of Unix-like, general-purpose text processing, and shell scripting.&lt;/p&gt; &lt;p&gt;Once you&amp;#8217;ve installed the Web Terminal Operator, you can access the web terminal from the command-prompt icon (&lt;strong&gt;&amp;#62;_&lt;/strong&gt;) on the OpenShift web console masthead, as shown in Figure 1.&lt;/p&gt; &lt;div id="attachment_787737" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-787737" class="wp-image-787737 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/wticon.png" alt="A screenshot showing the command-prompt icon in the web console." width="640" height="148" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/wticon.png 640w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/wticon-300x69.png 300w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-787737" class="wp-caption-text"&gt;Figure 1: The command prompt icon in the OpenShift web console.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Clicking the icon displays the web terminal frame at the bottom of the OpenShift web console, as shown in Figure 2. You can resize, reposition, or pop out the terminal into a new browser window or tab.&lt;/p&gt; &lt;div id="attachment_787747" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-787747" class="wp-image-787747 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/wtrunning-1024x502.png" alt="A screenshot of the web terminal open in the web console." width="640" height="314" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/wtrunning-1024x502.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/wtrunning-300x147.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/wtrunning-768x377.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-787747" class="wp-caption-text"&gt;Figure 2: The new command-line terminal opens at the bottom of the OpenShift web console.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;How to activate the OpenShift web terminal&lt;/h2&gt; &lt;p&gt;OpenShift versions 4.5.3 and later support the new Web Terminal Operator, which manages the terminal environment on the cluster. To activate the web terminal, visit the &lt;b&gt;OperatorHub&lt;/b&gt; in the left sidebar of the &lt;b&gt;Web Console Administrator Experience&lt;/b&gt; and search for &lt;b&gt;Web Terminal&lt;/b&gt;. Install the Web Terminal Operator.&lt;/p&gt; &lt;p&gt;Once you&amp;#8217;ve deployed the Operator, log into the web console as a user without the cluster-admin role. Click the command-prompt icon in the top-right corner of your screen to start a web terminal. You’re ready to build, deploy, and manage your cluster workloads with your favorite &lt;code&gt;oc&lt;/code&gt; or &lt;code&gt;odo&lt;/code&gt; one-liners, without ever leaving your browser.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; The web terminal&amp;#8217;s tech preview imposes a couple of limitations. First, cluster admins cannot use the web terminal, it is available only to less privileged roles. Second, the shell history feature works to recall previous commands with the up and down arrow keys and other bash mechanics, but this information is not preserved between terminal sessions.&lt;/p&gt; &lt;h2&gt;We appreciate your feedback&lt;/h2&gt; &lt;p&gt;Community feedback helps us continually improve the OpenShift developer experience. We really want to hear from you! Attend one of our office hours, or &lt;a target="_blank" rel="nofollow" href="https://forms.gle/zDd4tuWvjndCRVMD8"&gt;complete this survey&lt;/a&gt; to let us know your thoughts about the OpenShift web console and the new web terminal. You can also join the &lt;a target="_blank" rel="nofollow" href="https://groups.google.com/forum/#!forum/openshift-dev-users"&gt;OpenShift Developer Experience Google Group&lt;/a&gt; to share your tips, get help with what doesn’t work so well for you, and shape the future of the OpenShift Developer Experience.&lt;/p&gt; &lt;p&gt;Ready to get started? &lt;a target="_blank" rel="nofollow" href="http://www.openshift.com/try"&gt;Try OpenShift today&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F01%2Fcommand-line-cluster-management-with-red-hat-openshifts-new-web-terminal-tech-preview%2F&amp;#38;linkname=Command-line%20cluster%20management%20with%20Red%20Hat%20OpenShift%E2%80%99s%20new%20web%20terminal%20%28tech%20preview%29" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F01%2Fcommand-line-cluster-management-with-red-hat-openshifts-new-web-terminal-tech-preview%2F&amp;#38;linkname=Command-line%20cluster%20management%20with%20Red%20Hat%20OpenShift%E2%80%99s%20new%20web%20terminal%20%28tech%20preview%29" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F01%2Fcommand-line-cluster-management-with-red-hat-openshifts-new-web-terminal-tech-preview%2F&amp;#38;linkname=Command-line%20cluster%20management%20with%20Red%20Hat%20OpenShift%E2%80%99s%20new%20web%20terminal%20%28tech%20preview%29" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F01%2Fcommand-line-cluster-management-with-red-hat-openshifts-new-web-terminal-tech-preview%2F&amp;#38;linkname=Command-line%20cluster%20management%20with%20Red%20Hat%20OpenShift%E2%80%99s%20new%20web%20terminal%20%28tech%20preview%29" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F01%2Fcommand-line-cluster-management-with-red-hat-openshifts-new-web-terminal-tech-preview%2F&amp;#38;linkname=Command-line%20cluster%20management%20with%20Red%20Hat%20OpenShift%E2%80%99s%20new%20web%20terminal%20%28tech%20preview%29" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F01%2Fcommand-line-cluster-management-with-red-hat-openshifts-new-web-terminal-tech-preview%2F&amp;#38;linkname=Command-line%20cluster%20management%20with%20Red%20Hat%20OpenShift%E2%80%99s%20new%20web%20terminal%20%28tech%20preview%29" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F01%2Fcommand-line-cluster-management-with-red-hat-openshifts-new-web-terminal-tech-preview%2F&amp;#38;linkname=Command-line%20cluster%20management%20with%20Red%20Hat%20OpenShift%E2%80%99s%20new%20web%20terminal%20%28tech%20preview%29" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F01%2Fcommand-line-cluster-management-with-red-hat-openshifts-new-web-terminal-tech-preview%2F&amp;#038;title=Command-line%20cluster%20management%20with%20Red%20Hat%20OpenShift%E2%80%99s%20new%20web%20terminal%20%28tech%20preview%29" data-a2a-url="https://developers.redhat.com/blog/2020/10/01/command-line-cluster-management-with-red-hat-openshifts-new-web-terminal-tech-preview/" data-a2a-title="Command-line cluster management with Red Hat OpenShift’s new web terminal (tech preview)"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/01/command-line-cluster-management-with-red-hat-openshifts-new-web-terminal-tech-preview/"&gt;Command-line cluster management with Red Hat OpenShift&amp;#8217;s new web terminal (tech preview)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/swGMQMl_psE" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Red Hat OpenShift&amp;#8216;s web console simplifies many development and deployment chores to just a few clicks, but sometimes you need a command-line interface (CLI) to get things done on a cluster. Whether you&amp;#8217;re learning by cut-and-paste in a tutorial or troubleshooting a deep bug in production (also often done by cut-and-paste), you’ll likely need to [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/01/command-line-cluster-management-with-red-hat-openshifts-new-web-terminal-tech-preview/"&gt;Command-line cluster management with Red Hat OpenShift&amp;#8217;s new web terminal (tech preview)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/10/01/command-line-cluster-management-with-red-hat-openshifts-new-web-terminal-tech-preview/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">787327</post-id><dc:creator>Joshua Wood</dc:creator><dc:date>2020-10-01T07:00:29Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/01/command-line-cluster-management-with-red-hat-openshifts-new-web-terminal-tech-preview/</feedburner:origLink></entry><entry><title>Building modern CI/CD workflows for serverless applications with Red Hat OpenShift Pipelines and Argo CD, Part 1</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/eafqH_hG3wo/" /><category term="CI/CD" /><category term="DevOps" /><category term="Knative" /><category term="Modern App Dev" /><category term="Serverless" /><category term="ArgoCD" /><category term="ci/cd pipeline" /><category term="gitops" /><category term="openshift" /><category term="Tekton" /><author><name>David Sancho</name></author><id>https://developers.redhat.com/blog/?p=777907</id><updated>2020-10-01T07:00:27Z</updated><published>2020-10-01T07:00:27Z</published><content type="html">&lt;p&gt;A recent article, &lt;a href="https://developers.redhat.com/blog/2020/09/03/the-present-and-future-of-ci-cd-with-gitops-on-red-hat-openshift/"&gt;&lt;em&gt;The present and future of CI/CD with GitOps on Red Hat OpenShift&lt;/em&gt;&lt;/a&gt;, proposed &lt;a href="https://developers.redhat.com/blog/2020/08/14/introduction-to-cloud-native-ci-cd-with-tekton-kubecon-europe-2020/"&gt;Tekton&lt;/a&gt; as a framework for cloud-native CI/CD pipelines, and Argo CD as its perfect partner for GitOps. &lt;a href="https://developers.redhat.com/devnation/tech-talks/gitops/watch"&gt;GitOps&lt;/a&gt; practices support continuous delivery in hybrid, multi-cluster &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; environments.&lt;/p&gt; &lt;p&gt;In this two-part article, we&amp;#8217;ll build a CI/CD workflow that demonstrates the potential of combining Tekton and GitOps. You&amp;#8217;ll also be introduced to &lt;a href="https://developers.redhat.com/topics/serverless-architecture"&gt;Red Hat OpenShift Serverless&lt;/a&gt;, as we&amp;#8217;ll use &lt;a target="_blank" rel="nofollow" href="https://knative.dev/"&gt;Knative&lt;/a&gt; service resources in our CI/CD workflow. Let&amp;#8217;s start with an overview of the CI/CD workflow that we&amp;#8217;ll implement for the demonstration.&lt;/p&gt; &lt;h2&gt;The CI/CD workflow&lt;/h2&gt; &lt;p&gt;The diagram in Figure 1 illustrates the CI/CD workflow. A commit initiated in the application&amp;#8217;s source code repository triggers a full CI/CD process, which ends with a new version of the serverless application deployed in development, staging, and production environments as laid out in Figure 1.&lt;/p&gt; &lt;div id="attachment_780177" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/cicd-knative.png"&gt;&lt;img aria-describedby="caption-attachment-780177" class="wp-image-780177" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/cicd-knative.png" alt="A diagram of the sample CI/CI workflow." width="640" height="520" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/cicd-knative.png 829w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/cicd-knative-300x244.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/cicd-knative-768x623.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-780177" class="wp-caption-text"&gt;Figure 1: The sample CI/CD workflow for the demonstration.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Let&amp;#8217;s look more closely at each step in the workflow:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;A developer pushes a new change in the application&amp;#8217;s source code repository.&lt;/li&gt; &lt;li&gt;A webhook configured in the source code repository (GitHub, in this case) triggers the &lt;a target="_blank" rel="nofollow" href="https://github.com/tektoncd/pipeline"&gt;Tekton pipeline&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Once the pipeline has started, the first task fetches the source code from the repository.&lt;/li&gt; &lt;li&gt;A Maven task packages the application code as a JAR file and runs unit tests before building the container image.&lt;/li&gt; &lt;li&gt;A &lt;a target="_blank" rel="nofollow" href="https://buildah.io/"&gt;buildah&lt;/a&gt; task builds and pushes the container image to the registry. The image is then pushed to the OpenShift internal registry.&lt;/li&gt; &lt;li&gt;The pipeline fetches the repository that keeps the desired state of the example application&amp;#8217;s configuration and deployment descriptors. In GitOps methodology, we use a Git repository as the single source of truth for what is deployed and where it&amp;#8217;s deployed.&lt;/li&gt; &lt;li&gt;Initially, the Git repository might be empty, so this task is smart enough to initialize the repository with all of the Kubernetes manifests (in this case, the &lt;a target="_blank" rel="nofollow" href="https://knative.dev/"&gt;Knative&lt;/a&gt; service and &lt;code&gt;ConfigMaps&lt;/code&gt;) that are required to run the application for the first time. The subsequent repository commits will only update the existing descriptors with the new application version, an independent route for canary testing, and related configurations. Once all the manifest files have been created or modified, this task pushes the changes to the repository. This step is the glue between the continuous integration performed by the &lt;a target="_blank" rel="nofollow" href="https://github.com/tektoncd/pipeline"&gt;Tekton pipeline&lt;/a&gt; and the continuous deployment managed by &lt;a target="_blank" rel="nofollow" href="https://argoproj.github.io/argo-cd/"&gt;Argo CD&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Argo CD pulls from the configuration repository and synchronizes the existing Kubernetes manifests, which are specified using &lt;a target="_blank" rel="nofollow" href="https://kustomize.io/"&gt;Kustomize&lt;/a&gt; files. This action creates the final Kubernetes objects in the &lt;code&gt;development&lt;/code&gt;, &lt;code&gt;staging&lt;/code&gt;, and &lt;code&gt;production&lt;/code&gt; namespaces. The synchronization could be auto or manual based on the target namespace&amp;#8217;s requirements.&lt;/li&gt; &lt;li&gt;In this final part of the workflow, it might be necessary to pull images referenced in the deployment Kubernetes manifest from the OpenShift internal registry. The operations team might also push configuration changes, for instance, changing the URL of a target microservice or certain information that is unknown by the development team. This last step could also create an &lt;code&gt;OutOfSync&lt;/code&gt; state in &lt;a target="_blank" rel="nofollow" href="https://argoproj.github.io/argo-cd/"&gt;Argo CD&lt;/a&gt;, which would lead to a new synchronization process (see Step 9 in Figure 1).&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Next, we&amp;#8217;ll set up our cluster with the OpenShift Operators and services that we&amp;#8217;ll need.&lt;/p&gt; &lt;h2&gt;Configuring the OpenShift cluster&lt;/h2&gt; &lt;p&gt;We&amp;#8217;ll use a set of scripts to configure and install all of the components required for this demonstration. To get started with setting up the demonstration environment, clone the following source code repository:&lt;/p&gt; &lt;pre&gt;$ git clone https://github.com/dsanchor/rh-developers-cicd.git &lt;/pre&gt; &lt;p&gt;Next, ensure that you have all of the following tools installed in your system. You&amp;#8217;ll need these pre-installed when you run the scripts:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://helm.sh/docs/intro/install/"&gt;Helm&lt;/a&gt;: &lt;code&gt;helm &lt;em&gt;version&lt;/em&gt;&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git"&gt;Git&lt;/a&gt;: &lt;code&gt;git &lt;em&gt;version&lt;/em&gt;&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.5/cli_reference/openshift_cli/getting-started-cli.html"&gt;oc&lt;/a&gt;: &lt;code&gt;oc &lt;em&gt;version&lt;/em&gt;&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://kubernetes-sigs.github.io/kustomize/installation/"&gt;kustomize&lt;/a&gt; v 3.1.0 or higher: &lt;code&gt;customize &lt;em&gt;version&lt;/em&gt;&lt;/code&gt;&lt;/li&gt; &lt;li&gt;envsubst (gettext): &lt;code&gt;envsubst --help&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/tektoncd/cli"&gt;tkn&lt;/a&gt; (optional Tekton CLI): &lt;code&gt;tkn &lt;em&gt;version&lt;/em&gt;&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Once you&amp;#8217;ve checked the above requirements, log in to your OpenShift cluster as a cluster-admin user:&lt;/p&gt; &lt;pre&gt;$ oc login -u &lt;em&gt;USERNAME&lt;/em&gt; -p &lt;em&gt;PASSWORD&lt;/em&gt; https://api.&lt;em&gt;YOUR_CLUSTER_DOMAIN&lt;/em&gt;:6443 &lt;/pre&gt; &lt;h3&gt;Operators, namespaces, and role bindings&lt;/h3&gt; &lt;p&gt;Initially, we will install the &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.5/pipelines/installing-pipelines.html"&gt;OpenShift Pipelines&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.5/serverless/installing_serverless/installing-openshift-serverless.html"&gt;OpenShift Serverless&lt;/a&gt; Operators in the &lt;code&gt;openshift-operators&lt;/code&gt; namespace.&lt;/p&gt; &lt;p&gt;We&amp;#8217;ll also create four new namespaces: &lt;code&gt;cicd&lt;/code&gt;, &lt;code&gt;development&lt;/code&gt;, &lt;code&gt;staging&lt;/code&gt;, and &lt;code&gt;production&lt;/code&gt;. Images are pushed within the boundaries of the &lt;code&gt;cicd&lt;/code&gt; namespace, so all of the other namespaces require &lt;code&gt;system:image-puller&lt;/code&gt; privileges in order to pull the new images.&lt;/p&gt; &lt;p&gt;Finally, we&amp;#8217;ll add a new &lt;code&gt;view&lt;/code&gt; role to the &lt;code&gt;development&lt;/code&gt;, &lt;code&gt;staging&lt;/code&gt;, and &lt;code&gt;production&lt;/code&gt; default service accounts. This role provides access from our &lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt;Quarkus&lt;/a&gt; application pods to &lt;code&gt;ConfigMaps&lt;/code&gt; and &lt;code&gt;Secrets&lt;/code&gt;. (I&amp;#8217;ll introduce the Quarkus application later.)&lt;/p&gt; &lt;p&gt;Here is the script, which basically uses three Helm charts for the required installations:&lt;/p&gt; &lt;pre&gt;$ ./bootstrap.sh --------------- Installing openshift-pipelines operator Release "openshift-pipelines" does not exist. Installing it now. NAME: openshift-pipelines LAST DEPLOYED: Thu Sep 10 10:55:14 2020 NAMESPACE: default STATUS: deployed REVISION: 1 TEST SUITE: None Installing openshift-serverless Release "openshift-serverless" does not exist. Installing it now. NAME: openshift-serverless LAST DEPLOYED: Thu Sep 10 10:55:16 2020 NAMESPACE: default STATUS: deployed REVISION: 1 TEST SUITE: None Creating cicd, development, staging and production namespaces Added cicd system:image-puller role to default sa in development, staging and production namespaces Added view role to default sa in development, staging and production namespaces Release "bootstrap-projects" does not exist. Installing it now. NAME: bootstrap-projects LAST DEPLOYED: Thu Sep 10 10:55:18 2020 NAMESPACE: default STATUS: deployed REVISION: 1 TEST SUITE: None &lt;/pre&gt; &lt;p&gt;You can execute the script as-is, or use the Helm charts independently, overriding any values that you wish. For instance, you could override the value of the channel subscription for each OpenShift Operator.&lt;/p&gt; &lt;p&gt;Figure 2 shows the installation so far, with both Operators installed under the &lt;code&gt;openshift-operators&lt;/code&gt; namespace.&lt;/p&gt; &lt;div id="attachment_780277" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/installed-openshift-operators.png"&gt;&lt;img aria-describedby="caption-attachment-780277" class="wp-image-780277 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/installed-openshift-operators-1024x253.png" alt="A screenshot of the OpenShift Serverless and OpenShift Pipelines Operators listed in the openshift-operators namespace." width="640" height="158" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/installed-openshift-operators-1024x253.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/installed-openshift-operators-300x74.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/installed-openshift-operators-768x190.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-780277" class="wp-caption-text"&gt;Figure 2: The OpenShift Serverless and OpenShift Pipelines Operators installed under openshift-operators.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Verify that the OpenShift Pipelines Operator is installed at version 1.1.1 or greater.&lt;/p&gt; &lt;p&gt;Next, we&amp;#8217;ll complete the OpenShift Serverless components installation by installing the &lt;a target="_blank" rel="nofollow" href="https://knative.dev/docs/serving/"&gt;Knative Serving&lt;/a&gt; control plane.&lt;/p&gt; &lt;h3&gt;Install a Knative Serving instance&lt;/h3&gt; &lt;p&gt;We need to create a &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.5/serverless/installing_serverless/installing-knative-serving.html#installing-knative-serving"&gt;Knative Serving&lt;/a&gt; instance that will provide a set of serverless capabilities to our applications. Run the following to create the Knative Serving instance and install the control plane:&lt;/p&gt; &lt;pre&gt;$ ./add-knative-serving.sh ------------------------------ Creating knative-serving namespace namespace/knative-serving created Installing basic knative serving control plane knativeserving.operator.knative.dev/knative-serving created &lt;/pre&gt; &lt;p&gt;We&amp;#8217;ve deployed a set of pods representing a basic Knative Serving control plane in the &lt;code&gt;knative-serving&lt;/code&gt; namespace, as shown in Figure 3.&lt;/p&gt; &lt;div id="attachment_778117" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/knative-serving-ns-1.png"&gt;&lt;img aria-describedby="caption-attachment-778117" class="wp-image-778117 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/knative-serving-ns-1-1024x498.png" alt="A screenshot of the Knative serving control plane." width="640" height="311" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/knative-serving-ns-1-1024x498.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/knative-serving-ns-1-300x146.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/knative-serving-ns-1-768x374.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-778117" class="wp-caption-text"&gt;Figure 3: The Knative Serving control plane in the knative-serving namespace.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;As shown in Figure 4, we&amp;#8217;ve also created a new namespace, &lt;code&gt;knative-serving-ingress&lt;/code&gt;, for the Knative installation&amp;#8217;s ingress gateways.&lt;/p&gt; &lt;div id="attachment_778087" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/knative-serving-ingress.png"&gt;&lt;img aria-describedby="caption-attachment-778087" class="wp-image-778087 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/knative-serving-ingress-1024x332.png" alt="A screenshot of the knative-serving-ingress namespace in the OpenShift console." width="640" height="208" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/knative-serving-ingress-1024x332.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/knative-serving-ingress-300x97.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/knative-serving-ingress-768x249.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-778087" class="wp-caption-text"&gt;Figure 4: The new knative-serving-ingress namespace.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;We&amp;#8217;ve installed the OpenShift Operators and created the namespaces and the Knative Serving instance to manage our serverless workloads. We&amp;#8217;re now ready to create the &lt;a target="_blank" rel="nofollow" href="https://github.com/tektoncd/pipeline"&gt;Tekton&lt;/a&gt; resources that we&amp;#8217;ll need to run the continuous integration pipeline.&lt;/p&gt; &lt;h2&gt;Configure the Tekton tasks and pipeline&lt;/h2&gt; &lt;p&gt;When you install the OpenShift Pipelines Operator, it comes with an out-of-the-box set of cluster tasks that you can use to build your pipeline. In some situations, you will need other tasks to execute specific functionality. You can easily create these tasks in Tekton. You can also search the &lt;a target="_blank" rel="nofollow" href="https://hub-preview.tekton.dev/"&gt;Tekton Hub&lt;/a&gt; for reusable tasks and pipelines that are ready to be consumed.&lt;/p&gt; &lt;p&gt;For our pipeline, we will use one task from the Tekton Hub and two custom tasks. To make these tasks available to our pipeline, we&amp;#8217;ll need to create them in the &lt;code&gt;cicd&lt;/code&gt; namespace. (Note that you can create &lt;code&gt;ClusterTask&lt;/code&gt;s if you think that you&amp;#8217;ll reuse them in different pipelines from different namespaces.) Run the following script to install the needed tasks and create the pipeline in the same namespace.&lt;/p&gt; &lt;pre&gt;$ ./add-tekton-customs.sh cicd ------------------------------ Installing buildah task from https://hub-preview.tekton.dev/ task.tekton.dev/buildah created Installing custom tasks task.tekton.dev/push-knative-manifest created task.tekton.dev/workspace-cleaner created Installing knative-pipeline pipeline.tekton.dev/knative-pipeline created &lt;/pre&gt; &lt;p&gt;Navigate to the OpenShift console and open the &lt;b&gt;Pipelines&lt;/b&gt; menu and project &lt;b&gt;cicd&lt;/b&gt;. You will discover your new tasks, as shown in Figure 5.&lt;/p&gt; &lt;div id="attachment_780317" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/tasks.png"&gt;&lt;img aria-describedby="caption-attachment-780317" class="wp-image-780317 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/tasks-1024x429.png" alt="A screenshot of the Tekton tasks in the CICD namespace." width="640" height="268" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/tasks-1024x429.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/tasks-300x126.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/tasks-768x322.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-780317" class="wp-caption-text"&gt;Figure 5: New Tekton tasks in the cicd namespace.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Figure 6 shows your new pipeline in the same namespace.&lt;/p&gt; &lt;div id="attachment_780287" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/pipeline.png"&gt;&lt;img aria-describedby="caption-attachment-780287" class="wp-image-780287 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/pipeline-1024x430.png" alt="A screenshot of the Tekton pipeline in the CICD namespace." width="640" height="269" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/pipeline-1024x430.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/pipeline-300x126.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/pipeline-768x323.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-780287" class="wp-caption-text"&gt;Figure 6: The Tekton pipeline in the cicd namespace.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Tekton workspaces&lt;/h3&gt; &lt;p&gt;Some of our tasks in the pipeline require either loading certain configurations from &lt;code&gt;ConfigMap&lt;/code&gt;s or storing the state of the resulting execution to be shared with other tasks. For instance, the Maven task requires that we include a specific &lt;code&gt;settings.xml&lt;/code&gt; in a &lt;code&gt;ConfigMap&lt;/code&gt;. On the other hand, the first task fetches the application&amp;#8217;s source code repository. The Maven task, which follows, will need those files to build the application JAR. We&amp;#8217;re using an OpenShift &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.5/storage/understanding-persistent-storage.html#persistent-volumes_understanding-persistent-storage"&gt;PersistentVolume&lt;/a&gt; to share these source files.&lt;/p&gt; &lt;p&gt;Tekton provides the concept of &lt;a target="_blank" rel="nofollow" href="https://github.com/tektoncd/pipeline/blob/master/docs/workspaces.md#workspaces"&gt;workspaces&lt;/a&gt; for these purposes. Run the following script to add a set of &lt;code&gt;ConfigMap&lt;/code&gt;s and a &lt;code&gt;PersistentVolumeClaim&lt;/code&gt; to the &lt;code&gt;cicd&lt;/code&gt; namespace:&lt;/p&gt; &lt;pre&gt;$ ./add-tekton-workspaces.sh cicd ----------------------------------- Creating knative-kustomize-base ConfigMap with base kustomize files for Knative services configmap/knative-kustomize-base created Creating knative-kustomize-environment ConfigMap with environment dependent kustomize files configmap/knative-kustomize-environment created Creating maven ConfigMap with settings.xml configmap/maven created Creating PVC using default storage class persistentvolumeclaim/source-pvc created &lt;/pre&gt; &lt;p&gt;Notice that this script creates a &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.5/storage/understanding-persistent-storage.html#pvc-storage-class_understanding-persistent-storage"&gt;PersistentVolumeClaim&lt;/a&gt; with no &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.5/storage/understanding-persistent-storage.html#pvc-storage-class_understanding-persistent-storage"&gt;StorageClass&lt;/a&gt; defined. Unless you choose to specify one, the default &lt;code&gt;StorageClass&lt;/code&gt; will be used. Feel free to uncomment any lines in the provided script to fit your needs.&lt;/p&gt; &lt;h2&gt;The demo application&lt;/h2&gt; &lt;p&gt;Until now, I&amp;#8217;ve said almost nothing about the demo application. The application is based on &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/get-started/"&gt;Quarkus&lt;/a&gt;, which is a perfect match for serverless applications due to its fast boot time and low memory consumption. The application itself is a simple &amp;#8220;Hello, world&amp;#8221; REST API that greets users when the &lt;code&gt;/hello&lt;/code&gt; URI is hit.&lt;/p&gt; &lt;p&gt;The application uses the &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/kubernetes-config"&gt;kubernetes-config&lt;/a&gt; extension to facilitate the consumption of &lt;code&gt;ConfigMap&lt;/code&gt;s and &lt;code&gt;Secrets&lt;/code&gt; in Kubernetes. The &amp;#8220;Hello, world&amp;#8221; application reads a list of &lt;code&gt;ConfigMap&lt;/code&gt;s, which gives us the chance to manage configuration at different levels, overriding duplicated properties.&lt;/p&gt; &lt;p&gt;Figure 7 shows an extract of the &lt;a target="_blank" rel="nofollow" href="https://github.com/dsanchor/quarkus-hello-world/blob/c076ee940b1f1d9576b7af3250bbbd7114e82263/src/main/resources/application.yaml#L18"&gt;application.yaml&lt;/a&gt; that defines the list of &lt;code&gt;ConfigMap&lt;/code&gt;s.&lt;/p&gt; &lt;div id="attachment_782297" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/configmap-list-vsc.png"&gt;&lt;img aria-describedby="caption-attachment-782297" class="wp-image-782297" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/configmap-list-vsc.png" alt="A screenshot of the YAML file in the console." width="640" height="211" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/configmap-list-vsc.png 923w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/configmap-list-vsc-300x99.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/configmap-list-vsc-768x254.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-782297" class="wp-caption-text"&gt;Figure 7: Application YAML with the list of ConfigMaps.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;You can find the complete application source code in the &lt;a target="_blank" rel="nofollow" href="https://github.com/dsanchor/quarkus-hello-world.git"&gt;GitHub repository for this article&lt;/a&gt;. Note that the pipeline also initializes and continuously updates a different repository that contains, in a declarative way, all of the Kubernetes manifest for our application deployments and configurations. Later in the article, we&amp;#8217;ll use &lt;a target="_blank" rel="nofollow" href="https://kustomize.io/"&gt;Kustomize&lt;/a&gt; to declaratively customize the application configuration and deployment.&lt;/p&gt; &lt;h2&gt;Create your own repository&lt;/h2&gt; &lt;p&gt;At this stage, you must &lt;a target="_blank" rel="nofollow" href="https://docs.github.com/en/github/getting-started-with-github/create-a-repo"&gt;create a GitHub repository&lt;/a&gt; that you will use to store the customization files required for the demonstration. My repository is named &lt;code&gt;quarkus-hello-world-deployment&lt;/code&gt;, and I&amp;#8217;ll use that name to reference the repository in the upcoming scripts. You can use the same name or a different one for your repository.&lt;/p&gt; &lt;p&gt;After you have created and named the repository, leave it empty and initialized.&lt;/p&gt; &lt;p&gt;In order to allow the Tekton pipeline to push changes into the new repository, you will have to provide a valid set of GitHub credentials. You&amp;#8217;ll store the credentials in a &lt;code&gt;Secret&lt;/code&gt; and link them to the &lt;code&gt;ServiceAccount&lt;/code&gt; pipeline, which was automatically created in the &lt;code&gt;cicd&lt;/code&gt; namespace.&lt;/p&gt; &lt;p&gt;Execute the following script:&lt;/p&gt; &lt;pre&gt;$ ./add-github-credentials.sh cicd &lt;strong&gt;YOUR_GITHUB_USER YOUR_GITHUB_PASSWORD&lt;/strong&gt; --------------------------------------------------------------------------- Creating secret with github credentials for user dsanchor secret/github-credentials created Linking pipeline sa in namespace cicd with your github credentials serviceaccount/pipeline patched &lt;/pre&gt; &lt;h2&gt;A manual pipeline run&lt;/h2&gt; &lt;p&gt;We are now ready to manually test the pipeline&amp;#8217;s execution and see the results. The pipeline workflow includes a webhook setup that triggers the pipeline automatically. We&amp;#8217;ll leave that part for the end of this article (in Part 2); for now, we&amp;#8217;ll just test the workflow by triggering the pipeline manually.&lt;/p&gt; &lt;p&gt;I&amp;#8217;ve provided two options to trigger the pipeline manually:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Create a pipeline run from a YAML file.&lt;/li&gt; &lt;li&gt;Start the pipeline using the &lt;a target="_blank" rel="nofollow" href="https://github.com/tektoncd/cli"&gt;Tekton CLI: tkn&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In both cases, we&amp;#8217;ll use a given &lt;code&gt;commit&lt;/code&gt; from the application repository. Also, we need to provide the repository that keeps all of our config and deployment manifests. In the script below, &lt;a target="_blank" rel="nofollow" href="https://github.com/dsanchor/quarkus-hello-world-deployment.git"&gt;I reference my deployment repository&lt;/a&gt;—you should replace that reference with the name of your repository. When you are ready, execute the following:&lt;/p&gt; &lt;pre&gt;$ cat tekton/pipelines/knative-pipeline-run.yaml | \   SOURCE_REPO=https://github.com/dsanchor/quarkus-hello-world.git \ COMMIT=9ce90240f96a9906b59225fec16d830ab4f3fe12 \ SHORT_COMMIT=9ce9024 \ DEPLOYMENT_REPO=https://github.com/dsanchor/quarkus-hello-world-deployment.git \   IMAGES_NS=cicd envsubst | \ oc create -f - -n cicd ------------------------------------------------------------------------------------------ pipelinerun.tekton.dev/knative-pipeline-run-54kpq created &lt;/pre&gt; &lt;p&gt;If you prefer to, you can start the pipeline using the &lt;em&gt;tkn&lt;/em&gt; CLI:&lt;/p&gt; &lt;pre&gt;$ tkn pipeline start knative-pipeline -p application=quarkus-hello-world \ -p source-repo-url=https://github.com/dsanchor/quarkus-hello-world.git \ -p source-revision=9ce90240f96a9906b59225fec16d830ab4f3fe12 \ -p short-source-revision=9ce9024 \ -p deployment-repo-url=https://github.com/dsanchor/quarkus-hello-world-deployment.git \ -p deployment-revision=master \ -p dockerfile=./src/main/docker/Dockerfile.jvm \ -p image-registry=image-registry.openshift-image-registry.svc.cluster.local:5000 \ -p image-repository=cicd \ -w name=source,claimName=source-pvc \ -w name=maven-settings,config=maven \ -w name=knative-kustomize-base,config=knative-kustomize-base \ -w name=knative-kustomize-environment,config=knative-kustomize-environment \ -n cicd &lt;/pre&gt; &lt;p&gt;Another option is to trigger the pipeline from the OpenShift console.&lt;/p&gt; &lt;h3&gt;Monitor the pipeline&amp;#8217;s execution&lt;/h3&gt; &lt;p&gt;To check the execution progress, visit the &lt;b&gt;Pipeline Runs&lt;/b&gt; dashboard in the OpenShift console, as shown in Figure 8.&lt;/p&gt; &lt;div id="attachment_780397" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prun.png"&gt;&lt;img aria-describedby="caption-attachment-780397" class="wp-image-780397 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prun-1024x187.png" alt="A screenshot of the Pipeline Runs dashboard." width="640" height="117" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prun-1024x187.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/prun-300x55.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/prun-768x140.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-780397" class="wp-caption-text"&gt;Figure 8: Use the Pipeline Runs dashboard to check the execution progress.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;If you want to see all the details of each pipeline task, click in the name of the pipeline run. You will get the logs for each task, as shown in Figure 9:&lt;/p&gt; &lt;div id="attachment_780417" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prun-detail.png"&gt;&lt;img aria-describedby="caption-attachment-780417" class="wp-image-780417 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prun-detail-1024x584.png" alt="A screenshot of the pipeline task logs." width="640" height="365" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prun-detail-1024x584.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/prun-detail-300x171.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/prun-detail-768x438.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-780417" class="wp-caption-text"&gt;Figure 9: View the logs for each pipeline task.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;If you trigger the pipeline with exactly the same parameters twice (for instance, using both examples that I have provided) you will see that the second run fails when pushing the &lt;i&gt;Kustomization&lt;/i&gt; manifests. The failure happens because there is nothing new to commit—awesome!&lt;/p&gt; &lt;h3&gt;Outcomes of the pipeline execution&lt;/h3&gt; &lt;p&gt;The diagram in Figure 10 shows what we&amp;#8217;ve achieved so far:&lt;/p&gt; &lt;div id="attachment_790057" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/ci-manual-knative-2.png"&gt;&lt;img aria-describedby="caption-attachment-790057" class="wp-image-790057" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/ci-manual-knative-2.png" alt="A diagram of the continuous integration workflow so far." width="640" height="390" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/ci-manual-knative-2.png 836w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/ci-manual-knative-2-300x183.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/ci-manual-knative-2-768x469.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-790057" class="wp-caption-text"&gt;Figure 10: The CI/CD workflow in progress.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Note that we replaced the steps related to &amp;#8220;Push code&amp;#8221; and &amp;#8220;repository webhook&amp;#8221; with a manual pipeline trigger based on a given commit ID.&lt;/p&gt; &lt;p&gt;At this point, we&amp;#8217;ve pushed a new image to the OpenShift internal registry. We&amp;#8217;ve also initialized the repository that will contain all of the config and deployment manifests, along with all of the Kubernetes manifests that are required to run the first version of our serverless application.&lt;/p&gt; &lt;h2&gt;Reviewing the deployment repository structure&lt;/h2&gt; &lt;p&gt;Now is a good time to review the structure of the deployment repository and what will eventually be the final manifests that we&amp;#8217;ll generate with &lt;a target="_blank" rel="nofollow" href="https://kustomize.io/"&gt;Kustomize&lt;/a&gt;. If you are not familiar with Kustomize and its capabilities, feel free to learn more about it. Understanding Kustomize could help you to better understand the structure of the repository.&lt;/p&gt; &lt;p&gt;Update your deployment repository (&lt;code&gt;git pull&lt;/code&gt;) and you should see similar output to this:&lt;/p&gt; &lt;pre&gt;├── &lt;strong&gt;base&lt;/strong&gt; │   ├── global-ops-configmap.yaml │   ├── kservice.yaml │   └── kustomization.yaml ├── &lt;strong&gt;development&lt;/strong&gt; │   ├── env-ops-configmap.yaml │   ├── kustomization.yaml │   ├── r9ce9024 │   │   ├── configmap.yaml │   │   ├── revision-patch.yaml │   │   └── routing-patch.yaml │   └── traffic-routing.yaml ├── &lt;strong&gt;production&lt;/strong&gt; │   ├── env-ops-configmap.yaml │   ├── kustomization-r9ce9024.yaml │   ├── r9ce9024 │   │   ├── configmap.yaml │   │   ├── revision-patch.yaml │   │   └── routing-patch.yaml │   └── traffic-routing.yaml ├── README.md └── &lt;strong&gt;staging&lt;/strong&gt; ├── env-ops-configmap.yaml ├── kustomization-r9ce9024.yaml ├── r9ce9024 │   ├── configmap.yaml │   ├── revision-patch.yaml │   └── routing-patch.yaml └── traffic-routing.yaml &lt;/pre&gt; &lt;p&gt;For simplicity, I will only focus on the &lt;code&gt;base&lt;/code&gt; and &lt;code&gt;development&lt;/code&gt; folders for now:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The &lt;code&gt;base&lt;/code&gt; folder has all of the shared resources between the three environments. It holds the basic structure of a &lt;a target="_blank" rel="nofollow" href="https://knative.dev/docs/serving/spec/knative-api-specification-1.0/#service"&gt;Knative service&lt;/a&gt; and a global config map.&lt;/li&gt; &lt;li&gt;The &lt;code&gt;development&lt;/code&gt; folder contains the overlays to complete the &lt;a target="_blank" rel="nofollow" href="https://knative.dev/docs/serving/spec/knative-api-specification-1.0/#service"&gt;Knative service&lt;/a&gt; manifest generation for a given application version (an example is the &lt;code&gt;r9ce9024&lt;/code&gt; folder) and two config maps that are related to the environment and developer configuration levels or ownership. The one under the revision folder has been copied from the application source code, letting the developer provide a set of configuration properties for the application.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;We are taking advantage of the simplicity of Knative services to define independent &lt;a target="_blank" rel="nofollow" href="https://knative.dev/docs/serving/spec/knative-api-specification-1.0/#route"&gt;routes&lt;/a&gt; for each &lt;a target="_blank" rel="nofollow" href="https://knative.dev/docs/serving/spec/knative-api-specification-1.0/#revision"&gt;service revision&lt;/a&gt; and to &lt;a target="_blank" rel="nofollow" href="https://knative.dev/docs/serving/samples/traffic-splitting/"&gt;split traffic between revisions&lt;/a&gt;. Thus, the &lt;code&gt;traffic-routing.yaml&lt;/code&gt; and the &lt;code&gt;routing-patch.yaml&lt;/code&gt; form the final traffic-routing section of a Knative service.&lt;/p&gt; &lt;p&gt;Each time a new revision is available in &lt;code&gt;development&lt;/code&gt;, an independent route is created for it, to ensure that it is accessible for testing. The main route remains the same (for instance, targeting the other two previous revisions). We achieve this behavior by not modifying the main &lt;code&gt;traffic-routing.yaml&lt;/code&gt; automatically from the pipeline but only adding the new route (&lt;code&gt;routing-patch.yaml&lt;/code&gt;) for the new revision.&lt;/p&gt; &lt;p&gt;These details will be easier to understand when we run additional tests in Part 2. For now, just note a significant difference between the &lt;code&gt;staging&lt;/code&gt; and &lt;code&gt;production&lt;/code&gt; namespaces and &lt;code&gt;development&lt;/code&gt;: The CI pipeline does not create a &lt;code&gt;kustomization.yaml&lt;/code&gt; file (with that exact name) for them. There will always be one with an additional revision prefix: &lt;code&gt;kustomization-r9ce9024.yaml&lt;/code&gt;. Those changes will not be considered during the synchronization process unless this new revision is referenced in the &lt;code&gt;kustomization.yaml&lt;/code&gt;. A manual action is required to make the changes visible to Kustomize.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: The point of the file-name difference is to differentiate the demonstration: I wanted those two environments to behave differently so that they would require someone to approve the changes. Renaming the file is a simple approach to approval that does not overcomplicate the demonstration. I would prefer to create a different branch for every new revision, then generate a pull request once it&amp;#8217;s ready to be promoted.&lt;/p&gt; &lt;h2&gt;Kustomize: Put all the pieces together&lt;/h2&gt; &lt;p&gt;We&amp;#8217;ve reviewed the content and structure of the deployment repository, but we still don&amp;#8217;t have the final composition of the Knative service and &lt;code&gt;ConfigMap&lt;/code&gt;s. The following script uses &lt;code&gt;kustomize&lt;/code&gt; to build the final manifests so that we can see how they look:&lt;/p&gt; &lt;pre&gt;$ kustomize build development ------------------------------ apiVersion: v1 kind: ConfigMap metadata: name: env-ops-quarkus-hello-world --- apiVersion: v1 kind: ConfigMap metadata: name: global-ops-quarkus-hello-world --- apiVersion: v1 data: application.yaml: |- message: hola environment: name: dev kind: ConfigMap metadata: name: quarkus-hello-world --- apiVersion: serving.knative.dev/v1 kind: Service metadata: name: quarkus-hello-world spec: template: metadata: name: quarkus-hello-world-r9ce9024 spec: containers: - image: image-registry.openshift-image-registry.svc.cluster.local:5000/cicd/quarkus-hello-world:9ce90240f96a9906b59225fec16d830ab4f3fe12 livenessProbe: httpGet: path: /health/live readinessProbe: httpGet: path: /health/ready traffic: - percent: 100 revisionName: quarkus-hello-world-r9ce9024 - revisionName: quarkus-hello-world-r9ce9024 tag: r9ce9024 &lt;/pre&gt; &lt;h2&gt;Conclusion for Part 1&lt;/h2&gt; &lt;p&gt;At this point, we could apply our set of objects into the &lt;code&gt;development&lt;/code&gt; namespace to get a serverless application running, but we don&amp;#8217;t want to do the deployment step manually. In the second half of this article, I will show you how to integrate &lt;a target="_blank" rel="nofollow" href="https://argoproj.github.io/argo-cd/"&gt;Argo CD&lt;/a&gt; into the CI/CD pipeline that we&amp;#8217;ve developed so far.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F01%2Fbuilding-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-1%2F&amp;#38;linkname=Building%20modern%20CI%2FCD%20workflows%20for%20serverless%20applications%20with%20Red%20Hat%20OpenShift%20Pipelines%20and%20Argo%20CD%2C%20Part%201" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F01%2Fbuilding-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-1%2F&amp;#38;linkname=Building%20modern%20CI%2FCD%20workflows%20for%20serverless%20applications%20with%20Red%20Hat%20OpenShift%20Pipelines%20and%20Argo%20CD%2C%20Part%201" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F01%2Fbuilding-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-1%2F&amp;#38;linkname=Building%20modern%20CI%2FCD%20workflows%20for%20serverless%20applications%20with%20Red%20Hat%20OpenShift%20Pipelines%20and%20Argo%20CD%2C%20Part%201" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F01%2Fbuilding-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-1%2F&amp;#38;linkname=Building%20modern%20CI%2FCD%20workflows%20for%20serverless%20applications%20with%20Red%20Hat%20OpenShift%20Pipelines%20and%20Argo%20CD%2C%20Part%201" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F01%2Fbuilding-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-1%2F&amp;#38;linkname=Building%20modern%20CI%2FCD%20workflows%20for%20serverless%20applications%20with%20Red%20Hat%20OpenShift%20Pipelines%20and%20Argo%20CD%2C%20Part%201" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F01%2Fbuilding-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-1%2F&amp;#38;linkname=Building%20modern%20CI%2FCD%20workflows%20for%20serverless%20applications%20with%20Red%20Hat%20OpenShift%20Pipelines%20and%20Argo%20CD%2C%20Part%201" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F01%2Fbuilding-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-1%2F&amp;#38;linkname=Building%20modern%20CI%2FCD%20workflows%20for%20serverless%20applications%20with%20Red%20Hat%20OpenShift%20Pipelines%20and%20Argo%20CD%2C%20Part%201" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F01%2Fbuilding-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-1%2F&amp;#038;title=Building%20modern%20CI%2FCD%20workflows%20for%20serverless%20applications%20with%20Red%20Hat%20OpenShift%20Pipelines%20and%20Argo%20CD%2C%20Part%201" data-a2a-url="https://developers.redhat.com/blog/2020/10/01/building-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-1/" data-a2a-title="Building modern CI/CD workflows for serverless applications with Red Hat OpenShift Pipelines and Argo CD, Part 1"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/01/building-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-1/"&gt;Building modern CI/CD workflows for serverless applications with Red Hat OpenShift Pipelines and Argo CD, Part 1&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/eafqH_hG3wo" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;A recent article, The present and future of CI/CD with GitOps on Red Hat OpenShift, proposed Tekton as a framework for cloud-native CI/CD pipelines, and Argo CD as its perfect partner for GitOps. GitOps practices support continuous delivery in hybrid, multi-cluster Kubernetes environments. In this two-part article, we&amp;#8217;ll build a CI/CD workflow that demonstrates the potential [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/01/building-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-1/"&gt;Building modern CI/CD workflows for serverless applications with Red Hat OpenShift Pipelines and Argo CD, Part 1&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/10/01/building-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-1/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">2</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">777907</post-id><dc:creator>David Sancho</dc:creator><dc:date>2020-10-01T07:00:27Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/01/building-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-1/</feedburner:origLink></entry></feed>
