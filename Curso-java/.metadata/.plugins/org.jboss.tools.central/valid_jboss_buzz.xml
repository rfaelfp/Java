<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Installing Red Hat OpenShift API Management</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/fNpcebxnRLM/" /><category term="DevOps" /><category term="Kubernetes" /><category term="Microservices" /><category term="3scale" /><category term="api gateway" /><category term="API-Management" /><category term="Integration" /><category term="openshift" /><author><name>Jennifer Vargas</name></author><id>https://developers.redhat.com/blog/?p=862137</id><updated>2021-02-23T08:00:29Z</updated><published>2021-02-23T08:00:29Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/products/rhoam/overview"&gt;Red Hat OpenShift API Management&lt;/a&gt; is a new managed application service designed as an add-on to &lt;a target="_blank" rel="nofollow" href="https://www.openshift.com/products/dedicated/"&gt;Red Hat OpenShift Dedicated&lt;/a&gt;. The service provides developers with a streamlined experience when developing and delivering &lt;a href="https://developers.redhat.com/topics/microservices"&gt;microservices&lt;/a&gt; applications with an &lt;a href="https://developers.redhat.com/blog/2019/12/02/apis-as-a-product-get-the-value-out-of-your-apis/"&gt;API-first approach&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;OpenShift API Management was built on the success of &lt;a href="https://developers.redhat.com/products/3scale/overview"&gt;3scale API Management&lt;/a&gt; and designed to let developers easily share, secure, reuse, and discover APIs when developing applications. This article shows you how to install OpenShift API Management as an add-on to your OpenShift Dedicated cluster. As you will see, it takes less than 10 minutes to install, configure, administer, and be up and running with OpenShift API Management. Check the end of the article for the included video demonstration.&lt;/p&gt; &lt;h2&gt;Step 1: Get OpenShift Dedicated&lt;/h2&gt; &lt;p&gt;You will need an OpenShift Dedicated subscription to provision a cluster to run Red Hat OpenShift API Management.&lt;/p&gt; &lt;p&gt;Start by provisioning your cluster:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Log in to your account on &lt;a target="_blank" rel="nofollow" href="https://cloud.redhat.com"&gt;cloud.redhat.com/openshift&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Open the Red Hat OpenShift Cluster Manager.&lt;/li&gt; &lt;li&gt;Create a cluster by selecting &lt;b&gt;Red Hat OpenShift Dedicated&lt;/b&gt;.&lt;/li&gt; &lt;li&gt;Choose your cloud provider.&lt;/li&gt; &lt;li&gt;Fill in all the cluster configuration details: Cluster names, regions, availability zones, computer nodes, node instance type, CIDR ranges (these are optional, but cannot be modified at a later date), and so on.&lt;/li&gt; &lt;li&gt;Submit your request and wait for the cluster to be provisioned.&lt;/li&gt; &lt;/ol&gt; &lt;h2&gt;Step 2: Select and configure an identity provider&lt;/h2&gt; &lt;p&gt;Once your cluster is ready, you can configure your preferred &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/openshift_dedicated/4/html/authentication/configuring-identity-providers"&gt;identity provider&lt;/a&gt; (IDP)&lt;/p&gt; &lt;p&gt;To start, select and configure your identity provider (IDP) from the drop-down menu. Options include GitHub, Google, OpenID, LDAP, GitLab, and other providers that support OpenID flows.&lt;/p&gt; &lt;p&gt;After you have configured your IDP, you will need to add at least one user to the &lt;b&gt;dedicated-admins&lt;/b&gt; group. Click &lt;b&gt;Add user&lt;/b&gt; within the &lt;b&gt;Cluster administrative users&lt;/b&gt; section, then enter the username of the new &lt;b&gt;dedicated-admin&lt;/b&gt; user.&lt;/p&gt; &lt;p&gt;Access levels vary per organization. Any user that requires full access should be defined as an administrator. As an administrator, you can use 3scale API Management and OpenShift&amp;#8217;s role-based access control (RBAC) features to limit other users&amp;#8217; access.&lt;/p&gt; &lt;h2&gt;Step 3: Install OpenShift API Management&lt;/h2&gt; &lt;p&gt;The process to &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_openshift_api_management/1/guide/53dfb804-2038-4545-b917-2cb01a09ef98#_f19cd79a-19f1-4bbe-83b0-8a76e977b99c"&gt;install OpenShift API Management&lt;/a&gt; is straightforward. From the cluster details page, you can navigate to the Add-ons tab and find the services available to you. Here&amp;#8217;s the setup:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Go to the &lt;strong&gt;Add-ons&lt;/strong&gt; tabs on the cluster details page.&lt;/li&gt; &lt;li&gt;Choose &lt;b&gt;Red Hat OpenShift API Management&lt;/b&gt; and hit &lt;b&gt;Install&lt;/b&gt;.&lt;/li&gt; &lt;li&gt;Provide the email address for the account that will receive service-related &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_openshift_api_management/1/topic/c26ddfc9-e5bd-4685-a403-7f84697a6e8a"&gt;alerts and notifications&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Click &lt;b&gt;Install&lt;/b&gt; again to allow the Operators to install and configure the service.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;After installing the add-on, you can access the service via the Application Launcher menu located in the OpenShift Dedicated console&amp;#8217;s top-right corner. The Application Launcher provides direct access to the OpenShift API Management and Red Hat single sign-on (SSO) technology service UIs.&lt;/p&gt; &lt;h2&gt;Watch the video demonstration&lt;/h2&gt; &lt;p&gt;Check out the following video to see the OpenShift API Management installation steps in action:&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/sd2TlBm5KHs?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Using OpenShift API Management&lt;/h2&gt; &lt;p&gt;There you go! Getting OpenShift API Management installed and running on your OpenShift Dedicated cluster is as simple as the steps described here. Now you can start using the service. Check out the following resources to get going:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Familiarize yourself with &lt;a href="https://developers.redhat.com/products/rhoam/overview"&gt;Red Hat OpenShift API Management&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Use OpenShift​ API Management to &lt;a target="_blank" rel="nofollow" href="https://www.youtube.com/watch?v=NzNgc0f75pc"&gt;deploy and manage your own Quarkus API&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Learn more about &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt; and your cluster by following a quickstart from the &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.2/web_console/odc-about-developer-perspective.html"&gt;OpenShift developer perspective&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F23%2Finstalling-red-hat-openshift-api-management%2F&amp;#38;linkname=Installing%20Red%20Hat%20OpenShift%20API%20Management" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F23%2Finstalling-red-hat-openshift-api-management%2F&amp;#38;linkname=Installing%20Red%20Hat%20OpenShift%20API%20Management" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F23%2Finstalling-red-hat-openshift-api-management%2F&amp;#38;linkname=Installing%20Red%20Hat%20OpenShift%20API%20Management" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F23%2Finstalling-red-hat-openshift-api-management%2F&amp;#38;linkname=Installing%20Red%20Hat%20OpenShift%20API%20Management" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F23%2Finstalling-red-hat-openshift-api-management%2F&amp;#38;linkname=Installing%20Red%20Hat%20OpenShift%20API%20Management" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F23%2Finstalling-red-hat-openshift-api-management%2F&amp;#38;linkname=Installing%20Red%20Hat%20OpenShift%20API%20Management" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F23%2Finstalling-red-hat-openshift-api-management%2F&amp;#38;linkname=Installing%20Red%20Hat%20OpenShift%20API%20Management" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F23%2Finstalling-red-hat-openshift-api-management%2F&amp;#038;title=Installing%20Red%20Hat%20OpenShift%20API%20Management" data-a2a-url="https://developers.redhat.com/blog/2021/02/23/installing-red-hat-openshift-api-management/" data-a2a-title="Installing Red Hat OpenShift API Management"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/23/installing-red-hat-openshift-api-management/"&gt;Installing Red Hat OpenShift API Management&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/fNpcebxnRLM" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Red Hat OpenShift API Management is a new managed application service designed as an add-on to Red Hat OpenShift Dedicated. The service provides developers with a streamlined experience when developing and delivering microservices applications with an API-first approach. OpenShift API Management was built on the success of 3scale API Management and designed to let developers easily [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/23/installing-red-hat-openshift-api-management/"&gt;Installing Red Hat OpenShift API Management&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/02/23/installing-red-hat-openshift-api-management/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">862137</post-id><dc:creator>Jennifer Vargas</dc:creator><dc:date>2021-02-23T08:00:29Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/02/23/installing-red-hat-openshift-api-management/</feedburner:origLink></entry><entry><title>5 steps to manage your first API using Red Hat OpenShift API Management</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/OqukF57ihcQ/" /><category term="Java" /><category term="Kubernetes" /><category term="Quarkus" /><category term="3scale" /><category term="API security" /><category term="API-Management" /><category term="OpenShift Dedicated" /><author><name>Evan Shortiss</name></author><id>https://developers.redhat.com/blog/?p=863057</id><updated>2021-02-23T08:00:14Z</updated><published>2021-02-23T08:00:14Z</published><content type="html">&lt;p&gt;Companies are increasingly using hosted and managed services to deliver on application modernization efforts and reduce the burden of managing cloud infrastructure. The recent release of &lt;a href="https://developers.redhat.com/products/rhoam/overview"&gt;Red Hat OpenShift API Management&lt;/a&gt; makes it easier than ever to get your own dedicated instance of &lt;a href="https://developers.redhat.com/products/3scale/overview"&gt;Red Hat 3scale API Management&lt;/a&gt; running on &lt;a target="_blank" rel="nofollow" href="https://www.openshift.com/products/dedicated/"&gt;Red Hat OpenShift Dedicated&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This article is for developers who want to learn how to use Red Hat&amp;#8217;s hosted and managed services to automatically import and manage exposed APIs. We&amp;#8217;ll deploy a &lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt;Quarkus&lt;/a&gt; application on OpenShift Dedicated, then use OpenShift API Management to add API key security. See the end of the article for a video demonstration of the workflow described.&lt;/p&gt; &lt;h2&gt;Prerequisites&lt;/h2&gt; &lt;p&gt;This article assumes that you already have the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Access to a &lt;a target="_blank" rel="nofollow" href="https://cloud.redhat.com"&gt;cloud.redhat.com&lt;/a&gt; account.&lt;/li&gt; &lt;li&gt;An existing OpenShift Dedicated cluster or the ability to deploy one.&lt;/li&gt; &lt;li&gt;Entitlements to deploy the Red Hat OpenShift API Management add-on.&lt;/li&gt; &lt;li&gt;A development environment with: &lt;ul&gt; &lt;li&gt;Git CLI&lt;/li&gt; &lt;li&gt;Java 8 or 11+&lt;/li&gt; &lt;li&gt;Maven 3.6.2&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.5/cli_reference/openshift_cli/getting-started-cli.html#installing-the-cli"&gt;OpenShift CLI&lt;/a&gt; 4.5 or later&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Step 1: Obtain an OpenShift Dedicated cluster&lt;/h2&gt; &lt;p&gt;Using a hosted and managed service like OpenShift API Management makes this step straightforward. See &lt;a target="_blank" rel="nofollow" href="https://www.youtube.com/watch?v=sd2TlBm5KHs&amp;#038;feature=youtu.be"&gt;this video guide&lt;/a&gt; to obtaining an OpenShift Dedicated cluster and installing the OpenShift API Management add-on. You can also find instructions in &lt;a href="https://developers.redhat.com/blog/2021/02/23/installing-red-hat-openshift-api-management"&gt;this article&lt;/a&gt; and in the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_openshift_api_management/1/"&gt;OpenShift API Management documentation&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Once you&amp;#8217;ve obtained your OpenShift Dedicated cluster and installed the Red Hat OpenShift API Management add-on, we can move on to the next step.&lt;/p&gt; &lt;h2&gt;Step 2: Create a project using the OpenShift CLI&lt;/h2&gt; &lt;p&gt;Logging into an OpenShift Dedicated cluster via the OpenShift command-line interface requires a login token and URL. You can obtain both of these by logging into the OpenShift console via a web browser and using the configured &lt;a target="_blank" rel="nofollow" href="https://en.wikipedia.org/wiki/Identity_provider"&gt;IdP&lt;/a&gt;. Click &lt;b&gt;Copy Login Command&lt;/b&gt; in the dropdown menu displayed under your username in the top-right corner. Alternatively, navigate directly to &lt;strong&gt;https://oauth-openshift.$CLUSTER_HOSTNAME/oauth/token/request&lt;/strong&gt; and use your web browser to obtain a valid login command.&lt;/p&gt; &lt;p&gt;Once you have a token, issue a login command, then create a new project:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;code&gt;$ oc login --token=$TOKEN --server=$URL&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;$ oc new-project my-quarkus-api&lt;/code&gt;&lt;/li&gt; &lt;/ol&gt; &lt;h2&gt;Step 3: Deploy the Quarkus application to OpenShift&lt;/h2&gt; &lt;p&gt;The Java application you’ll deploy for this demonstration is based on the example from the &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/openapi-swaggerui"&gt;Quarkus OpenAPI and Swagger UI Guide&lt;/a&gt;. It’s a straightforward CRUD application that supports using a REST API to modify an in-memory list of fruits. You&amp;#8217;ll find the source code in &lt;a target="_blank" rel="nofollow" href="https://github.com/evanshortiss/rhoam-quarkus-openapi"&gt;this GitHub repository&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Our application&amp;#8217;s codebase differs slightly from the &lt;em&gt;Quarkus OpenAPI and Swagger UI Guide&lt;/em&gt; example. I made the following changes:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Set &lt;code&gt;quarkus.smallrye-openapi.store-schema-directory&lt;/code&gt; in &lt;code&gt;application.properties&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Updated &lt;code&gt;.gitignore&lt;/code&gt; to &lt;code&gt;openapi.json&lt;/code&gt; and &lt;code&gt;openapi.yaml&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Added the &lt;code&gt;quarkus-openshift&lt;/code&gt; extension.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;These modifications create a local copy of the OpenAPI spec in JSON format and include tooling that simplifies the deployment process.&lt;/p&gt; &lt;h3&gt;Build and deploy the Quarkus application&lt;/h3&gt; &lt;p&gt;Start by cloning the repository to your local environment:&lt;/p&gt; &lt;pre&gt;$ git clone https://github.com/evanshortiss/rhoam-quarkus-openapi &lt;/pre&gt; &lt;p&gt;Issue the following command to start a local development server and view the Swagger UI at &lt;strong&gt;http://localhost:8080/swagger-ui&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;$ ./mvnw quarkus:dev&lt;/pre&gt; &lt;p&gt;Enter this command to build and deploy the application on your OpenShift Dedicated cluster:&lt;/p&gt; &lt;pre&gt;$ ./mvnw clean package -Dquarkus.kubernetes.deploy=true -Dquarkus.openshift.expose=true&lt;/pre&gt; &lt;p&gt;The build progress will be streamed from the OpenShift build pod to your terminal. You can also track the build logs and status in the project&amp;#8217;s &lt;b&gt;Builds&lt;/b&gt; section in the OpenShift console, as shown in Figure 1.&lt;/p&gt; &lt;div id="attachment_863077" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig1.png"&gt;&lt;img aria-describedby="caption-attachment-863077" class="wp-image-863077 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig1-1024x626.png" alt="The Builds section in the OpenShift console." width="640" height="391" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig1-1024x626.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig1-300x183.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig1-768x469.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-863077" class="wp-caption-text"&gt;Figure 1: Viewing build logs in the OpenShift console.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Once the build and deployment process is complete, the URL to access the application will be printed in your terminal. Use this URL to verify that the application&amp;#8217;s OpenAPI spec is available at the &lt;code&gt;/openapi?format=json&lt;/code&gt; endpoint. It’s important to verify that the JSON response is returned. You&amp;#8217;ll need it to import the API to 3scale API Management and automatically generate the 3scale API Management ActiveDocs. Figure 2 shows an example of the response returned by this endpoint.&lt;/p&gt; &lt;div id="attachment_863097" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig2.png"&gt;&lt;img aria-describedby="caption-attachment-863097" class="wp-image-863097 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig2-1024x626.png" alt="The OpenAPI spec for Quarkus Fruits." width="640" height="391" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig2-1024x626.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig2-300x183.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig2-768x469.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-863097" class="wp-caption-text"&gt;Figure 2: Viewing the OpenAPI specification in JSON format.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Step 4: Apply Service Discovery annotations&lt;/h2&gt; &lt;p&gt;Next, we&amp;#8217;ll import the API into 3scale API Management using its Service Discovery feature. For this step, we need to apply a specific set of annotations and labels to the service associated with the Quarkus application. The Service Discovery annotations and labels are &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_3scale_api_management/2.9/html/admin_portal_guide/service-discovery"&gt;documented here&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use the following commands to apply the necessary annotations:&lt;/p&gt; &lt;pre&gt;$ oc annotate svc/rhoam-openapi "discovery.3scale.net/description-path=/openapi?format=json" $ oc annotate svc/rhoam-openapi discovery.3scale.net/port="8080" $ oc annotate svc/rhoam-openapi discovery.3scale.net/scheme=http&lt;/pre&gt; &lt;p&gt;Add the &lt;code&gt;discovery&lt;/code&gt; label using the following command:&lt;/p&gt; &lt;pre&gt;$ oc label svc/rhoam-openapi discovery.3scale.net="true"&lt;/pre&gt; &lt;p&gt;Verify the label and annotations using:&lt;/p&gt; &lt;pre&gt;$ oc get svc/rhoam-openapi -o yaml&lt;/pre&gt; &lt;p&gt;The output should be similar to the sample displayed in Figure 3.&lt;/p&gt; &lt;div id="attachment_863107" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig3.png"&gt;&lt;img aria-describedby="caption-attachment-863107" class="wp-image-863107" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig3.png" alt="The YAML file for the Quarkus Fruits API service definition." width="640" height="286" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig3.png 890w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig3-300x134.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig3-768x343.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-863107" class="wp-caption-text"&gt;Figure 3: The Quarkus API Service definition in YAML format with annotations and labels.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Step 5: Use Service Discovery to import the API&lt;/h2&gt; &lt;p&gt;At this point, you can import the Quarkus Fruits API and manage it using 3scale API Management&amp;#8217;s Service Discovery feature. Use the OpenShift Dedicated application launcher to navigate to the 3scale API Management console. Figure 4 shows the application launcher in the top-right corner of the OpenShift Dedicated console.&lt;/p&gt; &lt;div id="attachment_863117" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig4.png"&gt;&lt;img aria-describedby="caption-attachment-863117" class="wp-image-863117 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig4-1024x626.png" alt="The OpenShift Dedicated console and application launcher with API Management selected." width="640" height="391" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig4-1024x626.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig4-300x183.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig4-768x470.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-863117" class="wp-caption-text"&gt;Figure 4: Using the application launcher to access 3scale API Management.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Import the API&lt;/h3&gt; &lt;p&gt;Log in to 3scale API Management using your configured IdP, and click the &lt;b&gt;New Product&lt;/b&gt; link on the dashboard. Perform the following steps on the &lt;b&gt;New Product&lt;/b&gt; screen:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Select &lt;b&gt;Import from OpenShift&lt;/b&gt; (authenticate if necessary).&lt;/li&gt; &lt;li&gt;Choose the &lt;b&gt;my-quarkus-api&lt;/b&gt; namespace from the &lt;b&gt;Namespace&lt;/b&gt; dropdown.&lt;/li&gt; &lt;li&gt;Choose the &lt;b&gt;rhoam-openapi&lt;/b&gt; service from the &lt;b&gt;Name&lt;/b&gt; dropdown.&lt;/li&gt; &lt;li&gt;Click the &lt;b&gt;Create Product&lt;/b&gt; button.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Figure 5 shows the new product screen in 3scale API Management.&lt;/p&gt; &lt;div id="attachment_863127" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig5.png"&gt;&lt;img aria-describedby="caption-attachment-863127" class="wp-image-863127 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig5-1024x626.png" alt="The 3scale API Management dialog to create a new product." width="640" height="391" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig5-1024x626.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig5-300x183.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig5-768x469.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-863127" class="wp-caption-text"&gt;Figure 5: Creating a new product in 3scale API Management.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;At this point, you should be redirected back to the 3scale API Management dashboard. If your new API isn’t listed in the &lt;b&gt;APIs&lt;/b&gt; section after a few moments, try refreshing the page. Once the API has been imported and listed on the dashboard, expand it and click the &lt;b&gt;ActiveDoc&lt;/b&gt; link. Select &lt;b&gt;rhoam-openapi&lt;/b&gt; on the subsequent screen to view the live documentation that was generated from the OpenAPI specification, as shown in Figure 6.&lt;/p&gt; &lt;div id="attachment_863137" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig6.png"&gt;&lt;img aria-describedby="caption-attachment-863137" class="wp-image-863137 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig6-1024x626.png" alt="The 3scale API Management ActiveDocs page." width="640" height="391" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig6-1024x626.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig6-300x183.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig6-768x469.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-863137" class="wp-caption-text"&gt;Figure 6: Viewing the generated ActiveDocs in 3scale API Management.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Create an Application Plan in 3scale API Management&lt;/h3&gt; &lt;p&gt;Next, you’ll need to configure an &lt;em&gt;Application Plan&lt;/em&gt; to interact with the API via a protected route:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Choose &lt;b&gt;Product: rhoam-openapi&lt;/b&gt; from the top navigation bar.&lt;/li&gt; &lt;li&gt;Select &lt;b&gt;Applications &amp;#62; Application Plans&lt;/b&gt; from the menu on the left.&lt;/li&gt; &lt;li&gt;Click the &lt;b&gt;Create Application Plan&lt;/b&gt; link.&lt;/li&gt; &lt;li&gt;Enter “RHOAM Test Plan” in the &lt;b&gt;Name&lt;/b&gt; field.&lt;/li&gt; &lt;li&gt;Enter “rhoam-test-plan” in the &lt;b&gt;System name&lt;/b&gt; field.&lt;/li&gt; &lt;li&gt;Click the &lt;b&gt;Create Application Plan&lt;/b&gt; button.&lt;/li&gt; &lt;li&gt;Click the &lt;b&gt;Publish&lt;/b&gt; link when redirected to the &lt;b&gt;Application Plans&lt;/b&gt; screen.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Figure 7 shows the dialog to create a new application plan in 3scale API Management.&lt;/p&gt; &lt;div id="attachment_863147" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig7.png"&gt;&lt;img aria-describedby="caption-attachment-863147" class="wp-image-863147 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig7-1024x626.png" alt="The 'Create Application Plan' screen in 3scale API Management." width="640" height="391" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig7-1024x626.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig7-300x183.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig7-768x469.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-863147" class="wp-caption-text"&gt;Figure 7: Creating an application plan in 3scale API Management.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Configure a developer account to use the application&lt;/h3&gt; &lt;p&gt;Now that you’ve created an Application Plan, you&amp;#8217;ll need to sign up a developer account to use the application. Typically, an API consumer signs up using your API Developer portal. For the purpose of this demonstration, you will manually provide the default Developer account with API access:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Select &lt;b&gt;Audience&lt;/b&gt; from the top navigation bar.&lt;/li&gt; &lt;li&gt;Select the &lt;b&gt;Developer&lt;/b&gt; account from the &lt;b&gt;Accounts&lt;/b&gt; list.&lt;/li&gt; &lt;li&gt;Click the &lt;b&gt;1 Applications&lt;/b&gt; link from the breadcrumb links at the top of the screen.&lt;/li&gt; &lt;li&gt;Click the &lt;b&gt;Create Application&lt;/b&gt; link and you’ll be directed to the &lt;b&gt;New Application&lt;/b&gt; screen.&lt;/li&gt; &lt;li&gt;Select &lt;b&gt;RHOAM Test Plan&lt;/b&gt; as the &lt;b&gt;Application Plan&lt;/b&gt;.&lt;/li&gt; &lt;li&gt;Enter “RHOAM Test Application” in the &lt;b&gt;Name&lt;/b&gt; field.&lt;/li&gt; &lt;li&gt;Enter a description of the API.&lt;/li&gt; &lt;li&gt;Click &lt;b&gt;Create Application&lt;/b&gt;.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Once the application is created, you’ll see that an API key is listed under the &lt;b&gt;API Credentials&lt;/b&gt; section, as shown in Figure 8. Take note of the key.&lt;/p&gt; &lt;div id="attachment_863157" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig8.png"&gt;&lt;img aria-describedby="caption-attachment-863157" class="wp-image-863157 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig8-1024x626.png" alt="The 3scale API Management Application Details screen." width="640" height="391" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig8-1024x626.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig8-300x183.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig8-768x469.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-863157" class="wp-caption-text"&gt;Figure 8: Creating an application for a user generates an API key.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Test the application&lt;/h3&gt; &lt;p&gt;Use the top navigation bar to navigate back to the Quarkus API&amp;#8217;s product page, then open the &lt;b&gt;Integration &amp;#62; Configuration&lt;/b&gt; section. The &lt;b&gt;Staging APIcast&lt;/b&gt; section should include an example cURL command for testing, as shown in Figure 9. Copy this command and add &lt;code&gt;/fruits&lt;/code&gt; to the URL, e.g &lt;code&gt;https://my-quarkus-api-3scale-staging.$CLUSTER_HOSTNAME:443/fruits?user_key=$YOUR_API_KEY&lt;/code&gt;&lt;/p&gt; &lt;div id="attachment_863167" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig9.png"&gt;&lt;img aria-describedby="caption-attachment-863167" class="wp-image-863167 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig9-1024x626.png" alt="The 3scale API Management API configuration screen." width="640" height="391" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig9-1024x626.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig9-300x183.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig9-768x469.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-863167" class="wp-caption-text"&gt;Figure 9: The example cURL command now contains a valid API key.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Issuing the cURL command or pasting the URL into a web browser returns the list of fruits from the Quarkus API. Congratulations: You’ve deployed a Quarkus-based REST API on OpenShift and protected it using Red Hat 3scale API Management.&lt;/p&gt; &lt;h2&gt;Video demonstration: Red Hat OpenShift API Management&lt;/h2&gt; &lt;p&gt;If you want to go over the steps in this article again, see this video guide to using Red Hat OpenShift API Management, Quarkus​, and 3scale API Management to automatically import and manage exposed APIs.&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/NzNgc0f75pc?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Summary and next steps&lt;/h2&gt; &lt;p&gt;If you’ve made it this far, you have successfully:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Provisioned an OpenShift Dedicated cluster.&lt;/li&gt; &lt;li&gt;Installed the Red Hat OpenShift API Management add-on.&lt;/li&gt; &lt;li&gt;Deployed a Quarkus application on your OpenShift Dedicated cluster.&lt;/li&gt; &lt;li&gt;Applied custom labels and annotations to a service using the OpenShift CLI.&lt;/li&gt; &lt;li&gt;Imported the Quarkus API into 3scale API Management and protected it using API key security.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Now that you’ve learned the basics of OpenShift Dedicated and 3scale API Management, why not explore other OpenShift Dedicated and Red Hat OpenShift API Management features? Here are some ideas:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Familiarize yourself with the single sign-on instance that’s included with your Red Hat OpenShift API Management add-on. You could consider using Red Hat&amp;#8217;s single sign-on (SSO) technology instead of API key security to &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_3scale_api_management/2.9/html/administering_the_api_gateway/openid-connect#configure-3scale"&gt;protect routes using OpenID Connect&lt;/a&gt;. (SSO is accessible from the OpenShift Dedicated application launcher.)&lt;/li&gt; &lt;li&gt;Learn more about OpenShift and your cluster by following a quickstart from the OpenShift web console&amp;#8217;s &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.2/web_console/odc-about-developer-perspective.html"&gt;developer perspective&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Delete the unprotected route to the Quarkus API using the OpenShift console or CLI. This was the route you used to view the OpenAPI in JSON format.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Happy coding!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F23%2F5-steps-to-manage-your-first-api-using-red-hat-openshift-api-management%2F&amp;#38;linkname=5%20steps%20to%20manage%20your%20first%20API%20using%20Red%20Hat%20OpenShift%20API%20Management" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F23%2F5-steps-to-manage-your-first-api-using-red-hat-openshift-api-management%2F&amp;#38;linkname=5%20steps%20to%20manage%20your%20first%20API%20using%20Red%20Hat%20OpenShift%20API%20Management" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F23%2F5-steps-to-manage-your-first-api-using-red-hat-openshift-api-management%2F&amp;#38;linkname=5%20steps%20to%20manage%20your%20first%20API%20using%20Red%20Hat%20OpenShift%20API%20Management" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F23%2F5-steps-to-manage-your-first-api-using-red-hat-openshift-api-management%2F&amp;#38;linkname=5%20steps%20to%20manage%20your%20first%20API%20using%20Red%20Hat%20OpenShift%20API%20Management" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F23%2F5-steps-to-manage-your-first-api-using-red-hat-openshift-api-management%2F&amp;#38;linkname=5%20steps%20to%20manage%20your%20first%20API%20using%20Red%20Hat%20OpenShift%20API%20Management" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F23%2F5-steps-to-manage-your-first-api-using-red-hat-openshift-api-management%2F&amp;#38;linkname=5%20steps%20to%20manage%20your%20first%20API%20using%20Red%20Hat%20OpenShift%20API%20Management" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F23%2F5-steps-to-manage-your-first-api-using-red-hat-openshift-api-management%2F&amp;#38;linkname=5%20steps%20to%20manage%20your%20first%20API%20using%20Red%20Hat%20OpenShift%20API%20Management" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F23%2F5-steps-to-manage-your-first-api-using-red-hat-openshift-api-management%2F&amp;#038;title=5%20steps%20to%20manage%20your%20first%20API%20using%20Red%20Hat%20OpenShift%20API%20Management" data-a2a-url="https://developers.redhat.com/blog/2021/02/23/5-steps-to-manage-your-first-api-using-red-hat-openshift-api-management/" data-a2a-title="5 steps to manage your first API using Red Hat OpenShift API Management"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/23/5-steps-to-manage-your-first-api-using-red-hat-openshift-api-management/"&gt;5 steps to manage your first API using Red Hat OpenShift API Management&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/OqukF57ihcQ" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Companies are increasingly using hosted and managed services to deliver on application modernization efforts and reduce the burden of managing cloud infrastructure. The recent release of Red Hat OpenShift API Management makes it easier than ever to get your own dedicated instance of Red Hat 3scale API Management running on Red Hat OpenShift Dedicated. This [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/23/5-steps-to-manage-your-first-api-using-red-hat-openshift-api-management/"&gt;5 steps to manage your first API using Red Hat OpenShift API Management&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/02/23/5-steps-to-manage-your-first-api-using-red-hat-openshift-api-management/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">863057</post-id><dc:creator>Evan Shortiss</dc:creator><dc:date>2021-02-23T08:00:14Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/02/23/5-steps-to-manage-your-first-api-using-red-hat-openshift-api-management/</feedburner:origLink></entry><entry><title type="html">Quarkus 1.12 released - Fast jar as default, Multipart support for RESTEasy Reactive</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/VeARLRHGTFs/" /><author><name /></author><id>https://quarkus.io/blog/quarkus-1-12-0-final-released/</id><updated>2021-02-23T00:00:00Z</updated><content type="html">It is my pleasure to announce the release of Quarkus 1.12.0.Final. It comes with some significant changes: Fast jar is now the default packaging when you build a jar. RESTEasy Reactive keeps improving and it now has support for multipart. Vert.x Axle and RX Java managed instances have been dropped....&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/VeARLRHGTFs" height="1" width="1" alt=""/&gt;</content><dc:creator /><feedburner:origLink>https://quarkus.io/blog/quarkus-1-12-0-final-released/</feedburner:origLink></entry><entry><title type="html">Business optimisation architecture - An introduction</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/_CyI1Yi38j0/business-optimisation-an-introduction.html" /><author><name>Eric D. Schabell</name></author><id>http://feedproxy.google.com/~r/schabell/jboss/~3/eivFwA3fRaQ/business-optimisation-an-introduction.html</id><updated>2021-02-22T06:00:00Z</updated><content type="html">Part 1 - An introduction The last few years I have been digging deeply into the world of architecture blueprints with a focus on presenting access to ways of mapping successful implementations for specific use cases. It's an interesting challenge in that we have the mission of creating of architectural content based on common customer adoption patterns.  That's very different from most of the traditional marketing activities usually associated with generating content for the sole purpose of positioning products for solutions. When you're basing the content on actual execution in solution delivery, you're cutting out the chuff.  What's that mean? It means that it's going to provide you with a way to implement a solution using open source technologies by focusing on the integrations, structures and interactions that actually have been proven to work. What's not included are any vendor promises that you'll find in normal marketing content. Those promised that when it gets down to implementation crunch time, might not fully deliver on their promises. Enter the term Architectural Blueprint.  Let's look at these blueprints, how their created and what value they provide for your solution designs. THE PROCESS The first step is to decide the use case to start with, which in my case had to be linked to a higher level theme that becomes the leading focus. This higher level theme is not quite boiling the ocean, but it's so broad that it's going to require some division in to smaller parts. In this case we've aligned with the higher level theme being 'Retail' use cases, a vertical focus. This breaks down into the following use cases and in no particular order: * Supply chain integration * Point of sale * Headless eCommerce * Business optimisation * Store health and safety * Real-time stock control * Retail data framework The first case I'm tackling here is the business optimisation architecture. This use case we've defined as the following: Optimising delivery routing, automating rostering of staff, and improving efficiency of tasks across multiple stores. The approach taken is to research our existing customers that have implemented solutions in this space, collect their public facing content, research the internal implementation documentation collections from their successful engagements, and where necessary reach out to the field resources involved.  To get an idea of what these blueprints look like, we refer you to the series previously discussed here: * * * * Now on to the task at hand. WHAT'S NEXT The resulting content for this project targets the following three items. * A slide deck of the architectural blueprint for use telling the portfolio solution story. * Generic architectural diagrams providing the general details for the portfolio solution. * A write-up of the portfolio solution in a series that can be used for a customer solution brief. An overview of this series on business optimisation portfolio architecture blueprint: 1. 2. Generic common architectural elements 3. Example planning optimisation architecture 4. Exploring architecture details  Catch up on any past articles you missed by following any published links above. Next in this series, taking a look at the generic common architecture for the business optimisation architecture. (Article co-authored by , Chief Architect Retail, Red Hat)&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/_CyI1Yi38j0" height="1" width="1" alt=""/&gt;</content><dc:creator>Eric D. Schabell</dc:creator><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/eivFwA3fRaQ/business-optimisation-an-introduction.html</feedburner:origLink></entry><entry><title type="html">Kogito Notifications API</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/RcSIIexFWvE/kogito-notifications-api.html" /><author><name>Adriel Paredes</name></author><id>https://blog.kie.org/2021/02/kogito-notifications-api.html</id><updated>2021-02-19T20:21:04Z</updated><content type="html">Photo by on  Kogito is not just the implementation of the next generation business automation technologies, but the tools that will support the development, testing, management, etc. Replacing Business Central is not an easy task. 10+ years of development make this a challenging endeavor, but not impossible. So this time I bring you the new Notifications API. This API is an abstraction layer that allows the users (in this case, the developers) to communicate transparently with the channels (i.e. VS Code, dmn.new, bpmn.new) and send notifications using a single endpoint API. Under the hood, each channel will have its own implementation redirecting or transforming those messages to their final form. Notifications API main components and connections MAIN COMPONENTS The main interface is the NotificationsApi itself. Each channel should have its own implementation or a NoOpNotificationsApi will be used. It only contains three methods that will allow you to send those notifications to the channel. export interface NotificationsApi { createNotification(notification: Notification): void; setNotifications(path: string, notifications: Notification[]): void; removeNotifications(path: string): void; } hosted with ❤ by VSCODE CHANNEL Since this is the first implementation we have so far I will give a detailed explanation of our mechanism. Notification is the main “transport” class. It will let you include all the information you need to send to the channel. The most important notification attribute is the path. It sets the group the notifications are going to belong to and also lets the channel open that file in case we decide it to. In case you want to express that notification for the main project I recommend using a project name instead of a path. In that situation, nothing will open in case you click on the Notification. export interface Notification { path: string; severity: NotificationSeverity; message: string; type: NotificationType; } hosted with ❤ by TYPE AND SEVERITY Those two attributes help us to categorize the notifications. Let’s start with type. When you want to notify something there are usually two kinds of state: an ephemeral notification that just informs about a situation and that will be dismissed in a short period of time, or an always present notification that will only be dismissed once the root cause that originates is modified. For that, we modeled two different types: Problem and Alert. Problems are used to show information I want to see all the time, like a validation problem, diagram not connected, a compilation error, an improvement hint. In VS Code, those notifications are going to appear in the Problems tab. On the other hand, we have those ephemeral notifications: a success compilation or validation, to inform a process started or ended, etc. For that kind of situation, we have the Alert type. On VS Code, Those notifications are going to appear as popup/toast messages. Once we define what type of Notification we got, we should define the Severity. This defines if the notification is an error, a warning, information, or success. There are going to be some severities that are not going to match with the selected type (like Hint). In that case they are going to be defaulted as INFO. export type NotificationSeverity = "INFO" | "WARNING" | "ERROR" | "SUCCESS" | "HINT"; export type NotificationType = "PROBLEM" | "ALERT"; hosted with ❤ by USAGE The NotificationAPI has a bidirectional implementation in Kogito. Users can send information to the Channel, or the Channel can ask for information to the Envelope. TYPESCRIPT If you are in the Channel you can simply import that specific channel implementation and start using it. import {VsCodeNotificationsApi} from "@kogito-tooling/notifications/vscode" JAVA From Java you can inject the Notifications API using CDI like this: Notification notification = new Notification(); notification.setPath("src/main/resources/diagram.dmn"); notification.setMessage("The message I want to inform"); notifications.setType(NotificationType.PROBLEM); notification.setSeverity(NotificationSeverity.ERROR); this.notificationsApi.createNotification(notification); hosted with ❤ by import org.appformer.kogito.bridge.client.notifications.NotificationsApi; public class MyEditor{ private NotificationsApi notificationsApi; @Inject public MyEditor(NotificationsApi notificationsApi){ this.notificationsApi = notificationsApi; } } hosted with ❤ by EDITOR VALIDATION I said before that Kogito has a bidirectional implementation and this was mainly done for editors. The main reason was to provide the Editor a way to validate their Diagrams without doing to every time it modifies its content. For that, we provide a validate() method for them that is executed every time the file is saved. The validation won’t prevent the file to be saved but it will show the created notifications in the Channel. If there is no validate method in the editors nothing will happen. To implement the validation in your editor you just simply need to add the validation method like this. Just remember to add the @Validate annotation. import org.uberfire.lifecycle.Validate; … @Validate public Promise validate() { return Promise.resolve(listOfNotifications) } hosted with ❤ by NEXT STEPS In the first iteration, we delivered this API and also the VS Code implementation. The support of this API in other channels is going to be added soon since we also need to design a proper UI and the mechanisms to open files or show different severities. In parallel, DMN, BPMN, SceSim, and PMML teams are also working on using this API for better validation, error, and message handling. To sum up, I wanted to share with you a small video of a PoC we did to see this working in the VSCode, but still, with mock data. We made it to check how the results of our new API were. Hopefully, we will soon see Kogito editors integrated with this API, and its extension to all channels (the first one will be dmn/bpmn.new). We really believe that this new Notification mechanism will help to expand the complete Business Automation developer authoring experience that our team is engaged to deliver. The post appeared first on .&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/RcSIIexFWvE" height="1" width="1" alt=""/&gt;</content><dc:creator>Adriel Paredes</dc:creator><feedburner:origLink>https://blog.kie.org/2021/02/kogito-notifications-api.html</feedburner:origLink></entry><entry><title>X.509 user certificate authentication with Red Hat’s single sign-on technology</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/6d4Doy0jOn0/" /><category term="CI/CD" /><category term="Java" /><category term="Security" /><category term="Authentication" /><category term="OpenSSL" /><category term="Red Hat SSO" /><category term="single sign-on" /><category term="X.509" /><author><name>orivat</name></author><id>https://developers.redhat.com/blog/?p=828667</id><updated>2021-02-19T08:00:55Z</updated><published>2021-02-19T08:00:55Z</published><content type="html">&lt;p&gt;This article illustrates how to configure a browser authentication flow using X.509 user-signed certificates. Once you have set up authentication using X.509 user-signed certificates, your users will not be required to enter a username and password when authenticating against &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/products/red-hat-single-sign-on"&gt;Red Hat&amp;#8217;s single sign-on technology&lt;/a&gt; (SSO). Instead, they will present an X.509 certificate to the SSO instance.&lt;/p&gt; &lt;h2&gt;Overview&lt;/h2&gt; &lt;p&gt;The main steps for configuring and using X.509 user-signed certificates for single sign-on authentication are:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Create a local certificate authority (CA).&lt;/li&gt; &lt;li&gt;Create a user certificate with a private key, a certificate signing request (CSR), and a public key.&lt;/li&gt; &lt;li&gt;Generate a PFX user certificate and upload it to Chrome.&lt;/li&gt; &lt;li&gt;Configure the SSO keystore and truststore.&lt;/li&gt; &lt;li&gt;Create an X.509 browser authentication flow.&lt;/li&gt; &lt;li&gt;Test the X.509 browser authentication flow.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;We will go over each of these steps in detail.&lt;/p&gt; &lt;h2&gt;Prerequisites&lt;/h2&gt; &lt;p&gt;You will need the following components set up in your development environment:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;A local virtual machine running &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/articles/2342881"&gt;Red Hat&amp;#8217;s single sign-on technology 7&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;The &lt;a target="_blank" rel="nofollow" href="https://www.openssl.org/"&gt;OpenSSL&lt;/a&gt; toolkit.&lt;/li&gt; &lt;li&gt;A Chrome web browser.&lt;/li&gt; &lt;li&gt;JDK 8 or JDK 11.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Step 1: Create a local certificate authority&lt;/h2&gt; &lt;p&gt;X.509 user certificates are signed by a certificate authority. The user first sends to a certificate authority a CSR file, then the CA returns a signed certificate and the root CA, both in &lt;a target="_blank" rel="nofollow" href="https://www.ssl.com/guide/pem-der-crt-and-cer-x-509-encodings-and-conversions/"&gt;PEM format&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Below are the instructions to create your certificate authority if you don&amp;#8217;t have one yet.&lt;/p&gt; &lt;pre&gt;openssl genrsa -aes256 -passout pass:&amp;#60;password&amp;#62; -out ca.pass.key 4096 openssl rsa -passin pass:&amp;#60;password&amp;#62; -in ca.pass.key -out ca.key openssl req -new -x509 -days 3650 -key ca.key -out ca.pem &lt;/pre&gt; &lt;p&gt;Here is an example certificate generation request:&lt;/p&gt; &lt;pre&gt;genrsa -aes256 -passout pass:password -out ca.pass.key 4096 Generating RSA private key, 4096 bit long modulus (2 primes) .......................................................................................................................................................................................................++++ ..............................++++ e is 65537 (0x010001) openssl rsa -passin pass:password -in ca.pass.key -out ca.key writing RSA key openssl req -new -x509 -days 3650 -key ca.key -out ca.pem You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there is a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [XX]:US State or Province Name (full name) []:Carolina Locality Name (eg, city) [Default City]:Raleigh Organization Name (eg, company) [Default Company Ltd]:Red Hat Organizational Unit Name (eg, section) []:RH-SSO Common Name (eg, your name or your server's hostname) []:localhost Email Address []: &lt;/pre&gt; &lt;h2&gt;Step 2: Create user certificates&lt;/h2&gt; &lt;p&gt;Note that our target test user is &lt;code&gt;user1&lt;/code&gt;. The test user will also be created in the SSO realm.&lt;/p&gt; &lt;p&gt;The tasks to generate a user certificate are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Generate a user private key.&lt;/li&gt; &lt;li&gt;Generate a user-signed certificate request.&lt;/li&gt; &lt;li&gt;Generate a user-signed request signed by the CA.&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Generate a user private key&lt;/h3&gt; &lt;p&gt;The following command generates a user private key:&lt;/p&gt; &lt;pre&gt;CLIENT_ID="user1" CLIENT_SERIAL=01 openssl genrsa -aes256 -passout pass:&amp;#60;password&amp;#62; -out ${CLIENT_ID}.pass.key 4096 openssl rsa -passin pass:&amp;#60;password&amp;#62; -in ${CLIENT_ID}.pass.key -out ${CLIENT_ID}.key &lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;CLIENT_SERIAL&lt;/code&gt; represents the serial number. It needs to be unique within the CA. &lt;code&gt;CLIENT_ID&lt;/code&gt; corresponds to the username, in this case &lt;code&gt;user1&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s an example of a generated user private key:&lt;/p&gt; &lt;pre&gt;CLIENT_ID="user1" CLIENT_SERIAL=01 openssl genrsa -aes256 -passout pass:password -out ${CLIENT_ID}.pass.key 4096 Generating RSA private key, 4096 bit long modulus (2 primes) ........................................................................................................................................................................................................++++ ....................++++ e is 65537 (0x010001) openssl rsa -passin pass:password -in ${CLIENT_ID}.pass.key -out ${CLIENT_ID}.key writing RSA key &lt;/pre&gt; &lt;h3&gt;Generate a user-signed certificate request&lt;/h3&gt; &lt;p&gt;The following command generates a user-signed certificate request key:&lt;/p&gt; &lt;pre&gt;openssl req -new -key ${CLIENT_ID}.key -out ${CLIENT_ID}.csr &lt;/pre&gt; &lt;p&gt;Here is an example of a generated user-signed certificate request:&lt;/p&gt; &lt;pre&gt;openssl req -new -key ${CLIENT_ID}.key -out ${CLIENT_ID}.csr You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [XX]:FR State or Province Name (full name) []: Locality Name (eg, city) [Default City]: Organization Name (eg, company) [Default Company Ltd]: Organizational Unit Name (eg, section) []: Common Name (eg, your name or your server's hostname) []:user1 Email Address []: Please enter the following 'extra' attributes to be sent with your certificate request A challenge password []: An optional company name []: &lt;/pre&gt; &lt;h3&gt;Generate a user-signed request signed by the CA (public certificate)&lt;/h3&gt; &lt;p&gt;The CA receives a CSR and in return provides a signed certificate in PEM file format. The certificate is signed by the root CA.&lt;/p&gt; &lt;p&gt;Here is the command to generate a user-signed request signed by the CA:&lt;/p&gt; &lt;pre&gt;openssl x509 -req -days 3650 -in ${CLIENT_ID}.csr -CA ca.pem -CAkey ca.key -set_serial ${CLIENT_SERIAL} -out ${CLIENT_ID}.pem &lt;/pre&gt; &lt;p&gt;Here is an example response:&lt;/p&gt; &lt;pre&gt;openssl x509 -req -days 3650 -in ${CLIENT_ID}.csr -CA ca.pem -CAkey ca.key -set_serial ${CLIENT_SERIAL} -out ${CLIENT_ID}.pem Signature ok subject=C = FR, L = Default City, O = Default Company Ltd, CN = user1 Getting CA Private Key &lt;/pre&gt; &lt;h2&gt;Step 3: Generate a PFX user certificate and upload it to Chrome&lt;/h2&gt; &lt;p&gt;Web browsers expect to upload certificates using the PFX (&lt;a target="_blank" rel="nofollow" href="https://en.wikipedia.org/wiki/PKCS_12"&gt;PKCS #12&lt;/a&gt;) file format, which contains a private key and a public key. We&amp;#8217;re using Chrome for this example.&lt;/p&gt; &lt;h3&gt;Generate a user PFX file&lt;/h3&gt; &lt;p&gt;Enter the following command to generate a user PFX file:&lt;/p&gt; &lt;pre&gt;openssl pkcs12 -export -out ${CLIENT_ID}.pfx -inkey ${CLIENT_ID}.key -in ${CLIENT_ID}.pem &lt;/pre&gt; &lt;p&gt;Here is an example response:&lt;/p&gt; &lt;pre&gt;Enter Export Password: Verifying - Enter Export Password: &lt;/pre&gt; &lt;h3&gt;Upload the user certificate to Chrome&lt;/h3&gt; &lt;p&gt;Next, go to &lt;b&gt;chrome://settings/certificates&lt;/b&gt; and import the user PFX certificate into the Chrome browser, as shown in Figure 1.&lt;/p&gt; &lt;div id="attachment_831287" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc4ff669688b.png"&gt;&lt;img aria-describedby="caption-attachment-831287" class="wp-image-831287 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc4ff669688b-1024x393.png" alt="Use the Chrome settings to import user certificate p12." width="640" height="246" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc4ff669688b-1024x393.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc4ff669688b-300x115.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc4ff669688b-768x295.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc4ff669688b.png 1280w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-831287" class="wp-caption-text"&gt;Figure 1: Use Chrome settings to import the PFX certificate.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Step 4: Configure the SSO keystore and truststore&lt;/h2&gt; &lt;p&gt;Red Hat&amp;#8217;s single sign-on technology requires using a keystore and a truststore for mutual secure socket layer (SSL) authentication. Furthermore, you need to place both the keystore and truststore in your &lt;code&gt;&amp;#60;jboss-home-dir&amp;#62;/standalone/configuration&lt;/code&gt; directory. SSO is installed in the &lt;code&gt;&amp;#60;jboss-home-dir&amp;#62;&lt;/code&gt; directory.&lt;/p&gt; &lt;p&gt;We will do the following to create and use an X.509 keystore and truststore:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Create a keystore using the &lt;code&gt;keytool&lt;/code&gt; utility.&lt;/li&gt; &lt;li&gt;Create a truststore using the &lt;code&gt;keytool&lt;/code&gt; utility.&lt;/li&gt; &lt;li&gt;Add keystore and truststore to &lt;code&gt;standalone.xml&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Add &lt;code&gt;ssl-realm&lt;/code&gt; security as &lt;code&gt;https-listener&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Note that &lt;code&gt;keytool&lt;/code&gt; is a Java SDK command used to create Java keystores.&lt;/p&gt; &lt;h3&gt;Create a keystore using keytool&lt;/h3&gt; &lt;p&gt;Enter the following command to create a keystore using &lt;code&gt;keytool&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;keytool -genkey -alias localhost -keyalg RSA -keystore keystore.jks -validity 10950 &lt;/pre&gt; &lt;p&gt;Here is an example:&lt;/p&gt; &lt;pre&gt;Enter keystore password: Re-enter new password: What is your first and last name? [Unknown]: localhost What is the name of your organizational unit? [Unknown]: Keycloak What is the name of your organization? [Unknown]: Red Hat What is the name of your City or Locality? [Unknown]: Westford What is the name of your State or Province? [Unknown]: MA What is the two-letter country code for this unit? [Unknown]: US Is CN=localhost, OU=Keycloak, O=Red Hat, L=Westford, ST=MA, C=US correct? [no]: yes Enter key password for &amp;#60;localhost&amp;#62; (RETURN if same as keystore password): Warning: The JKS keystore uses a proprietary format. It is recommended to migrate to PKCS12 which is an industry standard format using "keytool -importkeystore -srckeystore keycloak.jks -destkeystore keycloak.jks -destst &lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: For a more detailed guide to creating the keystore, see &lt;a target="_blank" rel="nofollow" href="https://www.keycloak.org/docs/latest/server_installation/#enabling-ssl-https-for-the-keycloak-server"&gt;&lt;i&gt;Enabling SSL/HTTPS for the Keycloak Server&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Create a truststore using keytool&lt;/h3&gt; &lt;p&gt;The following command creates a truststore using &lt;code&gt;keytool&lt;/code&gt;. (Note that we create the truststore by importing a PEM certificate. Here, we&amp;#8217;re using the root CA.)&lt;/p&gt; &lt;pre&gt;keytool -import -alias HOSTDOMAIN -keystore truststore.jks -file host-certificate.cer &lt;/pre&gt; &lt;p&gt;Here is an example:&lt;/p&gt; &lt;pre&gt;keytool -import -alias root-ca -keystore truststore.jks -file ca.pem Enter keystore password: Re-enter new password: Owner: CN=localhost, OU=RH-SSO, O=Red Hat, L=Raleigh, ST=Carolina, C=US Issuer: CN=localhost, OU=RH-SSO, O=Red Hat, L=Raleigh, ST=Carolina, C=US Serial number: 22834205f8cb27b0528338669e74c0e4c37f47be Valid from: Fri Nov 27 14:56:33 CET 2020 until: Mon Nov 25 14:56:33 CET 2030 Certificate fingerprints: MD5: D0:D1:AC:6F:9E:5C:6B:FF:AD:DD:FA:69:1F:46:2E:D4 SHA1: 54:E9:79:E0:ED:7C:72:F5:3A:C1:88:1A:FA:3D:64:3E:69:16:0C:21 SHA256: 30:FF:C8:5C:D2:DF:0F:16:00:00:DC:1D:CB:85:C2:67:32:FB:E7:66:6C:A6:7C:E1:CB:58:32:F3:61:56:1C:79 Signature algorithm name: SHA256withRSA Subject Public Key Algorithm: 4096-bit RSA key Version: 3 &lt;/pre&gt; &lt;p&gt;Extensions:&lt;/p&gt; &lt;pre&gt;#1: ObjectId: 2.5.29.35 Criticality=false AuthorityKeyIdentifier [ KeyIdentifier [ 0000: CA 65 3A 64 27 B7 C9 19 5C 98 8F A2 83 80 45 86 .e:d'...\.....E. 0010: 7A 36 89 00 z6.. ] ] #2: ObjectId: 2.5.29.19 Criticality=true BasicConstraints:[ CA:true PathLen:2147483647 ] #3: ObjectId: 2.5.29.14 Criticality=false SubjectKeyIdentifier [ KeyIdentifier [ 0000: CA 65 3A 64 27 B7 C9 19 5C 98 8F A2 83 80 45 86 .e:d'...\.....E. 0010: 7A 36 89 00 z6.. ] ] Trust this certificate? [no]: yes Certificate was added to keystore &lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: See &lt;a target="_blank" rel="nofollow" href="https://www.keycloak.org/docs/latest/server_installation/#_truststore"&gt;&lt;i&gt;Outgoing HTTPS Request Truststore&lt;/i&gt;&lt;/a&gt; for more about creating the truststore.&lt;/p&gt; &lt;h3&gt;Add the keystore and truststore to standalone.xml&lt;/h3&gt; &lt;p&gt;Next, we need to add a &lt;code&gt;security-realm&lt;/code&gt;, &lt;code&gt;ssl-realm/&lt;/code&gt;, which contains both the keystore and truststore:&lt;/p&gt; &lt;pre&gt; &amp;#60;security-realm name="ssl-realm"&amp;#62; &amp;#60;server-identities&amp;#62; &amp;#60;ssl&amp;#62; &amp;#60;keystore path="keystore.jks" relative-to="jboss.server.config.dir" keystore-password=&amp;#60;keystore-password&amp;#62;/&amp;#62; &amp;#60;/ssl&amp;#62; &amp;#60;/server-identities&amp;#62; &amp;#60;authentication&amp;#62; &amp;#60;truststore path="truststore.jks" relative-to="jboss.server.config.dir" keystore-password=&amp;#60;trust-store-password&amp;#62;/&amp;#62; &amp;#60;/authentication&amp;#62; &amp;#60;/security-realm&amp;#62; &lt;/pre&gt; &lt;h3&gt;Add ssl-realm security as https-listener&lt;/h3&gt; &lt;p&gt;Finally, we will add &lt;code&gt;ssl-realm&lt;/code&gt; security as &lt;code&gt;https-listener&lt;/code&gt;. Comment out the previous &lt;code&gt;https-listener&lt;/code&gt;, which was related to the &lt;code&gt;ApplicationRealm&lt;/code&gt; security realm. Then, let &lt;code&gt;https-listener&lt;/code&gt; point to the &lt;code&gt;ssl-realm&lt;/code&gt; security realm. Here&amp;#8217;s an example of the required configuration:&lt;/p&gt; &lt;pre&gt; &amp;#60;server name="default-server"&amp;#62; &amp;#60;http-listener name="default" socket-binding="http" redirect-socket="https" enable-http2="true"/&amp;#62; &amp;#60;!-- &amp;#60;https-listener name="https" socket-binding="https" security-realm="ApplicationRealm" enable-http2="true"/&amp;#62; --&amp;#62; &lt;strong&gt;&amp;#60;https-listener name="https" socket-binding="https" security-realm="ssl-realm" verify-client="REQUESTED"/&amp;#62;&lt;/strong&gt; &amp;#60;host name="default-host" alias="localhost"&amp;#62; &amp;#60;location name="/" handler="welcome-content"/&amp;#62; &amp;#60;http-invoker security-realm="ApplicationRealm"/&amp;#62; &amp;#60;/host&amp;#38;gt; &amp;#60;/server&amp;#62; &lt;/pre&gt; &lt;h2&gt;Step 5: Create the X.509 browser authentication flow&lt;/h2&gt; &lt;p&gt;Before we can use the SSO instance, we need to create a new realm named &lt;code&gt;X509_demo&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Go to the left-hand side panel, and clik &lt;b&gt;Add Realm&lt;/b&gt; and enter the realm name, &lt;code&gt;X509_demo&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Once the realm name &lt;code&gt;X509_demo&lt;/code&gt; is created, you can use the &lt;b&gt;Add User&lt;/b&gt; button to a add a new user, &lt;b&gt;user1&lt;/b&gt;, as shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_832087" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/12/img_5fc5fb82d849e.png"&gt;&lt;img aria-describedby="caption-attachment-832087" class="wp-image-832087 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/12/img_5fc5fb82d849e-1024x245.png" alt="Add user1 to the X509_demo." width="640" height="153" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/12/img_5fc5fb82d849e-1024x245.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/12/img_5fc5fb82d849e-300x72.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/12/img_5fc5fb82d849e-768x184.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-832087" class="wp-caption-text"&gt;Figure 2: Create the X509_demo and add user1 to the realm.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Now, we can perform the following tasks:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Create the SSO X.509 browser authentication flow.&lt;/li&gt; &lt;li&gt;Configure the X.509 certificate within SSO.&lt;/li&gt; &lt;li&gt;Set the authentication bindings.&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Create the SSO X.509 browser authentication flow&lt;/h3&gt; &lt;p&gt;We&amp;#8217;ll use the &lt;strong&gt;Authentication&lt;/strong&gt; page to create the SSO X.509 browser authentication flow, as shown in Figure 3.&lt;/p&gt; &lt;div id="attachment_831387" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc5027161733.png"&gt;&lt;img aria-describedby="caption-attachment-831387" class="wp-image-831387 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc5027161733-1024x328.png" alt="Set up the SSO browser flow on the Authentication page." width="640" height="205" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc5027161733-1024x328.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc5027161733-300x96.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc5027161733-768x246.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc5027161733.png 1482w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-831387" class="wp-caption-text"&gt;Figure 3: Set up a new SSO browser authentication flow.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Do the following to set up the SSO browser flow:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Copy the default browser flow and rename it to &lt;b&gt;X.509 Browser&lt;/b&gt;.&lt;/li&gt; &lt;li&gt;Add &lt;code&gt;X.509 validate username form (X.509-config)&lt;/code&gt; under the &lt;b&gt;Identity Provider Redirector&lt;/b&gt; line.&lt;/li&gt; &lt;li&gt;Set this execution step to &lt;b&gt;Alternative&lt;/b&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: See &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.4/html/server_administration_guide/authentication#adding_x_509_client_certificate_authentication_to_a_browser_flow"&gt;&lt;i&gt;Adding X.509 Client Certificate Authentication to a Browser Flow&lt;/i&gt;&lt;/a&gt; in the SSO documentation for further instructions.&lt;/p&gt; &lt;p&gt;Figure 4 shows the dialog to add the &lt;strong&gt;X509 Validate Username Form&lt;/strong&gt; to the execution flow.&lt;/p&gt; &lt;div id="attachment_870157" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/02/img_602ba4a7de400.png"&gt;&lt;img aria-describedby="caption-attachment-870157" class="wp-image-870157" src="https://developers.redhat.com/blog/wp-content/uploads/2021/02/img_602ba4a7de400.png" alt="The dialog to add the form and save it." width="640" height="152" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/02/img_602ba4a7de400.png 1383w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/img_602ba4a7de400-300x71.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/img_602ba4a7de400-768x183.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/img_602ba4a7de400-1024x244.png 1024w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-870157" class="wp-caption-text"&gt;Figure 4: Add the X509 Validate Username Form to the execution flow.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Configure an X.509 certificate within SSO&lt;/h3&gt; &lt;p&gt;To set up the X.509 certificate within SSO, go to the X.509 browser flow and select &lt;b&gt;Config Action&lt;/b&gt; from the &lt;b&gt;X509 Validate Username Form&lt;/b&gt;. You will be redirected to the &lt;strong&gt;X509-Config&lt;/strong&gt; form, where you can complete the certificate authentication using &lt;code&gt;cn=user1&lt;/code&gt; as the &lt;code&gt;username&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;On this form, switch the &lt;b&gt;User Identity Source&lt;/b&gt; toggle to &lt;strong&gt;Subject&amp;#8217;s Common Name&lt;/strong&gt; and the &lt;b&gt;User Mapping Method&lt;/b&gt; to &lt;strong&gt;Username or email&lt;/strong&gt;. Figure 5 shows these updates.&lt;/p&gt; &lt;div id="attachment_831477" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc50e63c9ffc.png"&gt;&lt;img aria-describedby="caption-attachment-831477" class="wp-image-831477 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc50e63c9ffc-1024x691.png" alt="Complete the certificate authentication on the X509-Config form." width="640" height="432" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc50e63c9ffc-1024x691.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc50e63c9ffc-300x203.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc50e63c9ffc-768x519.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc50e63c9ffc.png 1050w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-831477" class="wp-caption-text"&gt;Figure 5: Use the X509-Config form to complete the certificate authentication.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Set the authentication bindings&lt;/h3&gt; &lt;p&gt;On the &lt;strong&gt;Authentication&lt;/strong&gt; page, use the &lt;b&gt;Bindings&lt;/b&gt; tab to set the authentication bindings to the new authentication flow you&amp;#8217;ve just created, as shown in Figure 6.&lt;/p&gt; &lt;div id="attachment_831497" style="width: 527px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc50ee34c32f.png"&gt;&lt;img aria-describedby="caption-attachment-831497" class="wp-image-831497 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc50ee34c32f.png" alt="The Authentication screen with the Bindings tab open." width="517" height="330" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc50ee34c32f.png 517w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc50ee34c32f-300x191.png 300w" sizes="(max-width: 517px) 100vw, 517px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-831497" class="wp-caption-text"&gt;Figure 6: Set the new authentication flow in the Bindings tab.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Step 6: Test the X.509 browser authentication flow&lt;/h2&gt; &lt;p&gt;To test the authentication flow, go to the test URL: &lt;b&gt;https://localhost:8443/auth/realms/x509_demo/account&lt;/b&gt;. You should see the screen shown in Figure 7.&lt;/p&gt; &lt;div id="attachment_831417" style="width: 605px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc504bf0396c.png"&gt;&lt;img aria-describedby="caption-attachment-831417" class="wp-image-831417 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc504bf0396c.png" alt="The X509_demo screen. Click Continue to be logged in as user1. width=" width="595" height="537" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc504bf0396c.png 595w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc504bf0396c-300x271.png 300w" sizes="(max-width: 595px) 100vw, 595px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-831417" class="wp-caption-text"&gt;Figure 7: Use the X.509 demo to automatically authenticate the user1 X.509 certificate.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;If you click &lt;strong&gt;Continue&lt;/strong&gt;, you should be automatically authenticated through your user1 X.509 certificate, without being prompted to enter a username and password.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Using X.509 certificates for authentication hardens security by authenticating users to the servers, so the username and password are not exposed. If you need to keep your username-password authentication scheme, you can use a second authentication factor such as a &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.4/html/server_administration_guide/authentication"&gt;one-time password (OTP)&lt;/a&gt; provided by SSO. Red Hat&amp;#8217;s single sign-on technology also provides &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.4/html/server_administration_guide/authentication#webauthn"&gt;tech preview support for W3C Web Authentication (WebAuthn)&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F19%2Fx-509-user-certificate-authentication-with-red-hats-single-sign-on-technology%2F&amp;#38;linkname=X.509%20user%20certificate%20authentication%20with%20Red%20Hat%E2%80%99s%20single%20sign-on%20technology" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F19%2Fx-509-user-certificate-authentication-with-red-hats-single-sign-on-technology%2F&amp;#38;linkname=X.509%20user%20certificate%20authentication%20with%20Red%20Hat%E2%80%99s%20single%20sign-on%20technology" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F19%2Fx-509-user-certificate-authentication-with-red-hats-single-sign-on-technology%2F&amp;#38;linkname=X.509%20user%20certificate%20authentication%20with%20Red%20Hat%E2%80%99s%20single%20sign-on%20technology" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F19%2Fx-509-user-certificate-authentication-with-red-hats-single-sign-on-technology%2F&amp;#38;linkname=X.509%20user%20certificate%20authentication%20with%20Red%20Hat%E2%80%99s%20single%20sign-on%20technology" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F19%2Fx-509-user-certificate-authentication-with-red-hats-single-sign-on-technology%2F&amp;#38;linkname=X.509%20user%20certificate%20authentication%20with%20Red%20Hat%E2%80%99s%20single%20sign-on%20technology" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F19%2Fx-509-user-certificate-authentication-with-red-hats-single-sign-on-technology%2F&amp;#38;linkname=X.509%20user%20certificate%20authentication%20with%20Red%20Hat%E2%80%99s%20single%20sign-on%20technology" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F19%2Fx-509-user-certificate-authentication-with-red-hats-single-sign-on-technology%2F&amp;#38;linkname=X.509%20user%20certificate%20authentication%20with%20Red%20Hat%E2%80%99s%20single%20sign-on%20technology" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F19%2Fx-509-user-certificate-authentication-with-red-hats-single-sign-on-technology%2F&amp;#038;title=X.509%20user%20certificate%20authentication%20with%20Red%20Hat%E2%80%99s%20single%20sign-on%20technology" data-a2a-url="https://developers.redhat.com/blog/2021/02/19/x-509-user-certificate-authentication-with-red-hats-single-sign-on-technology/" data-a2a-title="X.509 user certificate authentication with Red Hat’s single sign-on technology"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/19/x-509-user-certificate-authentication-with-red-hats-single-sign-on-technology/"&gt;X.509 user certificate authentication with Red Hat&amp;#8217;s single sign-on technology&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/6d4Doy0jOn0" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;This article illustrates how to configure a browser authentication flow using X.509 user-signed certificates. Once you have set up authentication using X.509 user-signed certificates, your users will not be required to enter a username and password when authenticating against Red Hat&amp;#8217;s single sign-on technology (SSO). Instead, they will present an X.509 certificate to the SSO [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/19/x-509-user-certificate-authentication-with-red-hats-single-sign-on-technology/"&gt;X.509 user certificate authentication with Red Hat&amp;#8217;s single sign-on technology&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/02/19/x-509-user-certificate-authentication-with-red-hats-single-sign-on-technology/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">828667</post-id><dc:creator>orivat</dc:creator><dc:date>2021-02-19T08:00:55Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/02/19/x-509-user-certificate-authentication-with-red-hats-single-sign-on-technology/</feedburner:origLink></entry><entry><title type="html">3 steps to author BPMN and DMN assets on GitHub Codespaces</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/vyHheCUlFpk/3-steps-to-author-bpmn-dmn-editors-on-github-codespaces.html" /><author><name>Eder Ignatowicz</name></author><id>https://blog.kie.org/2021/02/3-steps-to-author-bpmn-dmn-editors-on-github-codespaces.html</id><updated>2021-02-19T05:00:00Z</updated><content type="html">Recently, GitHub launched early access to , an online development environment hosted by GitHub and powered by Visual Studio Code, that allows you to develop entirely in the cloud. Online development environments are a recent trend in the industry and can potentially be a game-changer for developers. But the question is, can I also develop my Business Automation assets in the cloud? Yes, you can! Do you want to see it how? Let’s do it in a 3 easy steps: 1-) CREATE YOUR GITHUB CODESPACE Go to and create a code space based on any GitHub repository[1]: [1] If you don’t have access yet, you can request early access 2-) INSTALL RED HAT BUSINESS AUTOMATION BUNDLE Now your Codespace is live, and you can work on any GitHub repository in an online VS Code. The next step is to install our extensions. Go to the Extensions menu and search for “Red Hat Business Automation Bundle”. This will automatically install our BPMN and DMN extensions. 3-) AUTHOR YOUR BPMN AND DMN ASSETS You are now ready to author your BPMN and DMN assets as any other VS Code asset. You can also drag and drop any file of your computer into Codespaces, making it super easy to import the assets that you created on and . That’s it! Thanks for reading and I hope you like it. Let’s develop our Business Automation Assets in the cloud. The post appeared first on .&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/vyHheCUlFpk" height="1" width="1" alt=""/&gt;</content><dc:creator>Eder Ignatowicz</dc:creator><feedburner:origLink>https://blog.kie.org/2021/02/3-steps-to-author-bpmn-dmn-editors-on-github-codespaces.html</feedburner:origLink></entry><entry><title type="html">RESTEasy 3.15.0.Final is now available</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/hjNEeeR06DE/" /><author><name /></author><id>https://resteasy.github.io/2021/02/18/resteasy-3.15.0.Final/</id><updated>2021-02-18T19:52:00Z</updated><dc:creator /><summary type="html">&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/hjNEeeR06DE" height="1" width="1" alt=""/&gt;</summary><feedburner:origLink>https://resteasy.github.io/2021/02/18/resteasy-3.15.0.Final/</feedburner:origLink></entry><entry><title type="html">Byteman 4.0.14 has been released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ImgC5mf259o/byteman-4014-has-been-released.html" /><author><name>Andrew Dinn</name></author><id>http://bytemanblog.blogspot.com/2021/02/byteman-4014-has-been-released.html</id><updated>2021-02-18T14:37:00Z</updated><content type="html">Byteman 4.0.14 is now available from the and from the . It is the latest update release for use on all JDK9+ runtimes. It is also recommended as the preferred release for use on JDK8- runtimes. Byteman 4.0.14 is a maintenance release which fixes a few minor issues. More details are provided in the .&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ImgC5mf259o" height="1" width="1" alt=""/&gt;</content><dc:creator>Andrew Dinn</dc:creator><feedburner:origLink>http://bytemanblog.blogspot.com/2021/02/byteman-4014-has-been-released.html</feedburner:origLink></entry><entry><title>How to work around Docker’s new download rate limit on Red Hat OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/EKHJid8FAQ8/" /><category term="Containers" /><category term="Kubernetes" /><category term="Open source" /><author><name>Joel Lord</name></author><id>https://developers.redhat.com/blog/?p=870297</id><updated>2021-02-18T08:00:17Z</updated><published>2021-02-18T08:00:17Z</published><content type="html">&lt;p&gt;Have you recently tried running &lt;code&gt;oc new-app &amp;#60;docker-image&amp;#62;&lt;/code&gt;on &lt;a href="https://developers.redhat.com/products/openshift/getting-started"&gt;Red Hat OpenShift&lt;/a&gt; and received a similar error message to the one below?&lt;/p&gt; &lt;pre&gt;W0216 12:21:52.014221 671649 dockerimagelookup.go:237] container image registry lookup failed: docker.io/username/image:latest: toomanyrequests: You have reached your pull rate limit. You may increase the limit by authenticating and upgrading: https://www.docker.com/increase-rate-limit &lt;/pre&gt; &lt;p&gt;If so, you &lt;strong&gt;do not need to upgrade your Docker account to a paid one&lt;/strong&gt;. Instead, you can use a secret to pull your images as an authenticated Docker Hub user.&lt;/p&gt; &lt;h2&gt;Docker&amp;#8217;s new rate limit&lt;/h2&gt; &lt;p&gt;Docker recently &lt;a target="_blank" rel="nofollow" href="https://www.docker.com/increase-rate-limits"&gt;changed its policy&lt;/a&gt; for downloading images as an anonymous user. The company now has a limit of 100 downloads every six hours from a single IP address.&lt;/p&gt; &lt;p&gt;If you are using the &lt;a href="https://developers.redhat.com/developer-sandbox"&gt;OpenShift Developer Sandbox&lt;/a&gt; to experiment with a free OpenShift cluster, like I was recently, then you might encounter the error message shown in Figure 1.&lt;/p&gt; &lt;div id="attachment_870327" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/02/2021-02-16_rate_limit.png"&gt;&lt;img aria-describedby="caption-attachment-870327" class="wp-image-870327 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/02/2021-02-16_rate_limit-1024x278.png" alt="" width="640" height="174" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/02/2021-02-16_rate_limit-1024x278.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/2021-02-16_rate_limit-300x81.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/2021-02-16_rate_limit-768x208.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/2021-02-16_rate_limit.png 1132w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-870327" class="wp-caption-text"&gt;Figure 1: The new rate limit error message from Docker.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;You might receive this error message after trying to create a new application with the &lt;code&gt;$ oc new-app&lt;/code&gt; command or from the user interface (UI). The issue is that many users are using the same cluster at the same time. Whenever someone tries to create a new application from a Docker image, the cluster downloads the image as an anonymous user, which counts toward the new rate limit. Eventually, the limit is reached, and the error message pops up.&lt;/p&gt; &lt;p&gt;Fortunately, the workaround is easy.&lt;/p&gt; &lt;h2&gt;Authenticate to your Docker Hub account&lt;/h2&gt; &lt;p&gt;All you have to do to avoid Docker&amp;#8217;s new rate-limit error is authenticate to your Docker Hub account. After you&amp;#8217;ve authenticated to the account, you won&amp;#8217;t be pulling the image as an anonymous user but as an authenticated user. The image download will count against your personal limit of 200 downloads per six hours instead of the 100 downloads shared across all anonymous cluster users.&lt;/p&gt; &lt;p&gt;You can use the following command to authenticate:&lt;/p&gt; &lt;pre&gt;$ oc create secret docker-registry docker --docker-server=docker.io --docker-username=&amp;#60;username&amp;#62; --docker-password=&amp;#60;password&amp;#62; --docker-email=&amp;#60;email&amp;#62; $ oc secrets link default docker --for=pull $ oc new-app &amp;#60;username&amp;#62;/&amp;#60;image&amp;#62; --source-secret=docker &lt;/pre&gt; &lt;p&gt;Note that it is recommended that you &lt;a target="_blank" rel="nofollow" href="https://docs.docker.com/docker-hub/access-tokens/"&gt;use an access token&lt;/a&gt; here instead of your actual password. Using an access token is also the only way to authenticate if you have two-factor authentication set up on your account.&lt;/p&gt; &lt;p&gt;If you prefer to use the UI, as I do, click &lt;b&gt;Create an image pull secret&lt;/b&gt;, as shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_870337" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/02/2021-02-16_pull_secret.png"&gt;&lt;img aria-describedby="caption-attachment-870337" class="wp-image-870337 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/02/2021-02-16_pull_secret-1024x480.png" alt="" width="640" height="300" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/02/2021-02-16_pull_secret-1024x480.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/2021-02-16_pull_secret-300x141.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/2021-02-16_pull_secret-768x360.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/2021-02-16_pull_secret.png 1238w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-870337" class="wp-caption-text"&gt;Figure 2: Adding a pull secret from the Docker UI.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Either way, you can quickly create an image pull secret, authenticate to your Docker Hub account, and get back to experimenting in the OpenShift Developer Sandbox.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Docker&amp;#8217;s new download rate limit has caught a few of us by surprise, but the workaround is easy. This article showed you how to use a secret to pull your images as an authenticated Docker Hub user. Once you&amp;#8217;ve done that, you will be able to download images without hitting the rate limit error.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F18%2Fhow-to-work-around-dockers-new-download-rate-limit-on-red-hat-openshift%2F&amp;#38;linkname=How%20to%20work%20around%20Docker%E2%80%99s%20new%20download%20rate%20limit%20on%20Red%20Hat%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F18%2Fhow-to-work-around-dockers-new-download-rate-limit-on-red-hat-openshift%2F&amp;#38;linkname=How%20to%20work%20around%20Docker%E2%80%99s%20new%20download%20rate%20limit%20on%20Red%20Hat%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F18%2Fhow-to-work-around-dockers-new-download-rate-limit-on-red-hat-openshift%2F&amp;#38;linkname=How%20to%20work%20around%20Docker%E2%80%99s%20new%20download%20rate%20limit%20on%20Red%20Hat%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F18%2Fhow-to-work-around-dockers-new-download-rate-limit-on-red-hat-openshift%2F&amp;#38;linkname=How%20to%20work%20around%20Docker%E2%80%99s%20new%20download%20rate%20limit%20on%20Red%20Hat%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F18%2Fhow-to-work-around-dockers-new-download-rate-limit-on-red-hat-openshift%2F&amp;#38;linkname=How%20to%20work%20around%20Docker%E2%80%99s%20new%20download%20rate%20limit%20on%20Red%20Hat%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F18%2Fhow-to-work-around-dockers-new-download-rate-limit-on-red-hat-openshift%2F&amp;#38;linkname=How%20to%20work%20around%20Docker%E2%80%99s%20new%20download%20rate%20limit%20on%20Red%20Hat%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F18%2Fhow-to-work-around-dockers-new-download-rate-limit-on-red-hat-openshift%2F&amp;#38;linkname=How%20to%20work%20around%20Docker%E2%80%99s%20new%20download%20rate%20limit%20on%20Red%20Hat%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F18%2Fhow-to-work-around-dockers-new-download-rate-limit-on-red-hat-openshift%2F&amp;#038;title=How%20to%20work%20around%20Docker%E2%80%99s%20new%20download%20rate%20limit%20on%20Red%20Hat%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2021/02/18/how-to-work-around-dockers-new-download-rate-limit-on-red-hat-openshift/" data-a2a-title="How to work around Docker’s new download rate limit on Red Hat OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/18/how-to-work-around-dockers-new-download-rate-limit-on-red-hat-openshift/"&gt;How to work around Docker&amp;#8217;s new download rate limit on Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/EKHJid8FAQ8" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Have you recently tried running oc new-app &amp;#60;docker-image&amp;#62;on Red Hat OpenShift and received a similar error message to the one below? W0216 12:21:52.014221 671649 dockerimagelookup.go:237] container image registry lookup failed: docker.io/username/image:latest: toomanyrequests: You have reached your pull rate limit. You may increase the limit by authenticating and upgrading: https://www.docker.com/increase-rate-limit If so, you do not need [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/18/how-to-work-around-dockers-new-download-rate-limit-on-red-hat-openshift/"&gt;How to work around Docker&amp;#8217;s new download rate limit on Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/02/18/how-to-work-around-dockers-new-download-rate-limit-on-red-hat-openshift/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">870297</post-id><dc:creator>Joel Lord</dc:creator><dc:date>2021-02-18T08:00:17Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/02/18/how-to-work-around-dockers-new-download-rate-limit-on-red-hat-openshift/</feedburner:origLink></entry></feed>
