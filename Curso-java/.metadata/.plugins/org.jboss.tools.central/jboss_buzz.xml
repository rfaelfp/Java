<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Building modern CI/CD workflows for serverless applications with Red Hat OpenShift Pipelines and Argo CD, Part 2</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Cmrnuh9pNQE/" /><category term="CI/CD" /><category term="Containers" /><category term="DevOps" /><category term="Quarkus" /><category term="Argo CD" /><category term="gitops" /><category term="Knative" /><category term="openshift" /><category term="tekton pipelines" /><author><name>David Sancho</name></author><id>https://developers.redhat.com/blog/?p=784007</id><updated>2020-10-14T07:00:05Z</updated><published>2020-10-14T07:00:05Z</published><content type="html">&lt;p&gt;In the &lt;a href="https://developers.redhat.com/blog/2020/10/01/building-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-1"&gt;first half of this article&lt;/a&gt;, I introduced &lt;a href="https://developers.redhat.com/blog/2020/08/14/introduction-to-cloud-native-ci-cd-with-tekton-kubecon-europe-2020/"&gt;Tekton&lt;/a&gt; as a framework for cloud-native &lt;a href="https://developers.redhat.com/topics/ci-cd"&gt;CI/CD&lt;/a&gt; pipelines, and &lt;a target="_blank" rel="nofollow" href="https://argoproj.github.io/argo-cd/"&gt;Argo CD&lt;/a&gt; as its perfect partner for GitOps on &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;. Our example for the demonstration is a &lt;a href="https://developers.redhat.com/topics/serverless-architecture"&gt;Knative service&lt;/a&gt; that deploys and serves a &lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt;Quarkus&lt;/a&gt; application. Our goal is to develop a complete continuous integration and delivery process, which begins when a commit is initiated in the application’s GitHub repository and ends with the new application version deployed in the development, staging, and production environments.&lt;/p&gt; &lt;p&gt;In Part 1, we used Tekton to implement the workflow&amp;#8217;s continuous integration (CI) tasks. Now, we will complete the CI/CD process by implementing the continuous delivery (CD) tasks with Argo CD. As a refresher, consider the CI/CD workflow diagram in Figure 1.&lt;/p&gt; &lt;div id="attachment_780177" style="width: 649px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/cicd-knative.png"&gt;&lt;img aria-describedby="caption-attachment-780177" class="wp-image-780177" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/cicd-knative.png" alt="A diagram of the sample CI/CD workflow." width="639" height="519" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/cicd-knative.png 829w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/cicd-knative-300x244.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/cicd-knative-768x623.png 768w" sizes="(max-width: 639px) 100vw, 639px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-780177" class="wp-caption-text"&gt;Figure 1: The sample CI/CD workflow for the demonstration.&lt;/p&gt;&lt;/div&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: I recommend &lt;a href="https://developers.redhat.com/blog/2020/10/01/building-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-1/"&gt;reading the first half of this article&lt;/a&gt; before continuing with Part 2. All of the discussions and examples here are based on the demo application and workflow that we developed in Part 1.&lt;/p&gt; &lt;p&gt;In Part 2, we will add the power of Argo CD to fully automate the deployment of the application. Argo CD will pull the changes from the Kustomize files that were pushed by the CI pipeline into the -deployment repository, and synchronize those changes in the target namespaces. As the last step of our automation, we will define a &lt;a target="_blank" rel="nofollow" href="https://github.com/tektoncd/triggers"&gt;Tekton Trigger&lt;/a&gt; that will ignite the CI/CD workflow.&lt;/p&gt; &lt;h2&gt;Get started with Argo CD&lt;/h2&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://argoproj.github.io/argo-cd/"&gt;Argo CD&lt;/a&gt; is becoming popular these days. As a first-class citizen in the &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; ecosystem, it facilitates the adoption of &lt;a href="https://developers.redhat.com/devnation/tech-talks/gitops/watch"&gt;GitOps&lt;/a&gt;, where teams leverage declarative configuration and infrastructure definitions from Git as the single source of truth. We&amp;#8217;ve already developed the Tekton tasks for our CI/CD workflow. Could Argo CD be the perfect fit for what is missing in our current workflow?&lt;/p&gt; &lt;h3&gt;Install Argo CD&lt;/h3&gt; &lt;p&gt;Open your OpenShift web console and navigate to the &lt;code&gt;cicd&lt;/code&gt; namespace for our demonstration workflow. Use the following script to install the Argo CD Operator:&lt;/p&gt; &lt;pre&gt;$ ./bootstrap-argo.sh cicd ------------------------------ Installing argo operator Release "argocd" does not exist. Installing it now. NAME: argocd LAST DEPLOYED: Thu Sep 10 18:37:23 2020 NAMESPACE: default STATUS: deployed REVISION: 1 TEST SUITE: None &lt;/pre&gt; &lt;p&gt;As shown in Figure 2, you should see a new Operator installed in the &lt;code&gt;cicd&lt;/code&gt; namespace:&lt;/p&gt; &lt;div id="attachment_781127" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/argo-installed.png"&gt;&lt;img aria-describedby="caption-attachment-781127" class="wp-image-781127 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/argo-installed-1024x350.png" alt="The OpenShift console shows the Argo CD Operator has been installed in the CICD namespace.." width="640" height="219" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/argo-installed-1024x350.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/argo-installed-300x103.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/argo-installed-768x263.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781127" class="wp-caption-text"&gt;Figure 2: Argo CD installed in the CICD project namespace.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Create an Argo CD instance&lt;/h3&gt; &lt;p&gt;Next, create an &lt;a target="_blank" rel="nofollow" href="https://argocd-operator.readthedocs.io/en/latest/reference/api.html/#argoproj.io/v1alpha1.ArgoCDSpec"&gt;Argo CD&lt;/a&gt; instance. This instance will manage all of the &lt;a target="_blank" rel="nofollow" href="https://argocd-operator.readthedocs.io/en/latest/reference/api.html/#argoproj.io/v1alpha1.ArgoCDSpec"&gt;AppProject&lt;/a&gt;s and &lt;a target="_blank" rel="nofollow" href="https://argocd-operator.readthedocs.io/en/latest/reference/api.html/#argoproj.io/v1alpha1.ArgoCDSpec"&gt;Application&lt;/a&gt;s that we&amp;#8217;ve created under the &lt;code&gt;cicd&lt;/code&gt; namespace. Running the following script creates:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;An Argo CD instance in the &lt;code&gt;cicd&lt;/code&gt; namespace.&lt;/li&gt; &lt;li&gt;An AppProject called &lt;code&gt;rh-developers&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Three applications under the &lt;code&gt;rh-developers&lt;/code&gt; AppProject. Each application references the deployment repository in the master branch. The applications are aligned with the development, staging, and production folders, respectively.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Execute the following (do not forget to use your own &lt;code&gt;quarkus-hello-world-deployment&lt;/code&gt; repository):&lt;/p&gt; &lt;pre&gt;$ ./add-argo-apps.sh cicd rh-developers https://github.com/dsanchor/quarkus-hello-world-deployment.git master ---------------------------------------------------------------------------------------------------------------- Installing basic Argo CD server instance argocd.argoproj.io/argocd created Adding edit role to argocd-application-controller ServiceAccount in projects development, staging and production rolebinding.rbac.authorization.k8s.io/edit-rh-developers-dev created rolebinding.rbac.authorization.k8s.io/edit-rh-developers-staging created rolebinding.rbac.authorization.k8s.io/edit-rh-developers-production created Creating rh-developers AppProject in namespace cicd appproject.argoproj.io/rh-developers created Creating Applications in namespace cicd in rh-developers AppProject application.argoproj.io/quarkus-hello-world-development created application.argoproj.io/quarkus-hello-world-staging created application.argoproj.io/quarkus-hello-world-production created &lt;/pre&gt; &lt;p&gt;Enter the Argo CD route, which you need in order to access the main Argo CD dashboard:&lt;/p&gt; &lt;pre&gt;$ oc get routes argocd-server -n cicd --------------------------------------- NAME HOST/PORT PATH SERVICES PORT TERMINATION WILDCARD argocd-server argocd-server-cicd.apps.ocp4.mydomain.com argocd-server https passthrough/Redirect None &lt;/pre&gt; &lt;p&gt;Wait until the Argo CD server is running, then log in using your OpenShift credentials. And, &lt;em&gt;voilà&lt;/em&gt;! You should receive the current status of your applications, as shown in Figure 3.&lt;/p&gt; &lt;div id="attachment_781157" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/argodash-1.png"&gt;&lt;img aria-describedby="caption-attachment-781157" class="wp-image-781157 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/argodash-1-1024x292.png" alt="The Argo CD dashboard shows the quarkus-hello-world application in development, staging, and production. The development version is out of sync." width="640" height="183" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/argodash-1-1024x292.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/argodash-1-300x86.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/argodash-1-768x219.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781157" class="wp-caption-text"&gt;Figure 3: Log in to the Argo CD dashboard to view all of the application versions and their respective health status.&lt;/p&gt;&lt;/div&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: You might observe that both the development and staging applications show their status as &lt;b&gt;Synced&lt;/b&gt;, while the production application is &lt;b&gt;OutOfSync&lt;/b&gt;. While the first two are configured with auto-sync enabled, we will use manual configuration for production.&lt;/p&gt; &lt;h2&gt;Deploy the first application version&lt;/h2&gt; &lt;p&gt;In the next sections, we will take our example &lt;code&gt;quarkus-hello-world&lt;/code&gt; application through several revisions, which we&amp;#8217;ll sync through the development, staging, and production stages of the deployment cycle. See Part 1 for more information about the Quarkus application that we are using for this demonstration.&lt;/p&gt; &lt;h3&gt;Application version 1 in the development environment&lt;/h3&gt; &lt;p&gt;Click on the &lt;code&gt;quarkus-hello-world-development&lt;/code&gt; application and you will see that every object in this version has been synced, as shown in Figure 4.&lt;/p&gt; &lt;div id="attachment_781167" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/dev-rev1.png"&gt;&lt;img aria-describedby="caption-attachment-781167" class="wp-image-781167 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/dev-rev1-1024x328.png" alt="All of the objects in the development application are synced." width="640" height="205" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/dev-rev1-1024x328.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/dev-rev1-300x96.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/dev-rev1-768x246.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781167" class="wp-caption-text"&gt;Figure 4: Click an application version to check its health status.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Having all of the objects synced means that the first version of the application was successfully deployed. Now, get the routes, so that we can access the service (notice that the ingress routes for &lt;a target="_blank" rel="nofollow" href="https://knative.dev/"&gt;Knative&lt;/a&gt; services are automatically created in the &lt;code&gt;knative-serving-ingress&lt;/code&gt; namespace):&lt;/p&gt; &lt;pre&gt;$ oc get routes -n knative-serving-ingress | grep development -------------------------------------------------------------- route-e387d9ca-9f1b-4c15-9b83-7bea4d2d290c-313361326363 quarkus-hello-world-development.apps.ocp4.mydomain.com kourier http2 edge/Allow None route-e387d9ca-9f1b-4c15-9b83-7bea4d2d290c-613962613835 r9ce9024-quarkus-hello-world-development.apps.ocp4.mydomain.com kourier http2 edge/Allow None &lt;/pre&gt; &lt;p&gt;The &lt;code&gt;get routes&lt;/code&gt; command should return at least two routes: The main route (&lt;code&gt;quarkus-hello-world-development.apps.ocp4.mydomain.com&lt;/code&gt;) and one for the new revision that we&amp;#8217;ve just deployed (&lt;code&gt;r9ce9024-quarkus-hello-world-development.apps.ocp4.mydomain.com&lt;/code&gt;). Note that the main route could have several revisions behind it, but because this is our first deployment, it has only one.&lt;/p&gt; &lt;p&gt;Test both routes and observe the results. If no pod is running, it is because &lt;a target="_blank" rel="nofollow" href="https://knative.dev/docs/serving/autoscaling/"&gt;Knative downscales inactive pods&lt;/a&gt;. The first request could take longer than usual if it&amp;#8217;s necessary to re-create the pod.&lt;/p&gt; &lt;p&gt;Add &lt;code&gt;/hello.&lt;/code&gt;, then use &lt;code&gt;curl&lt;/code&gt; to test the endpoint:&lt;/p&gt; &lt;pre&gt;$ curl http://quarkus-hello-world-development.apps.ocp4.mydomain.com/hello hola dev! Yeap! $ curl http://r9ce9024-quarkus-hello-world-development.apps.ocp4.mydomain.com/hello hola dev! Yeap! &lt;/pre&gt; &lt;p&gt;You can now navigate to the &lt;b&gt;Serverless&lt;/b&gt; menu in the OpenShift web console, select the &lt;b&gt;development&lt;/b&gt; project, and explore it, as shown in Figure 5.&lt;/p&gt; &lt;div id="attachment_781177" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/serverless-ocp.png"&gt;&lt;img aria-describedby="caption-attachment-781177" class="wp-image-781177 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/serverless-ocp-1024x237.png" alt="The quarkus-hello-world project is shown in the development namespace." width="640" height="148" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/serverless-ocp-1024x237.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/serverless-ocp-300x69.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/serverless-ocp-768x177.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781177" class="wp-caption-text"&gt;Figure 5: View the development project in the OpenShift Serverless menu.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Application version 1 in the staging environment&lt;/h3&gt; &lt;p&gt;Re-enter the Argo CD dashboard and take a look at the staging application. Currently, you should see a single &lt;code&gt;ConfigMap&lt;/code&gt;, which is shown in Figure 6.&lt;/p&gt; &lt;div id="attachment_781197" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/staging-1.png"&gt;&lt;img aria-describedby="caption-attachment-781197" class="wp-image-781197 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/staging-1-1024x205.png" alt="The staging application currently contains a single ConfigMap." width="640" height="128" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/staging-1-1024x205.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/staging-1-300x60.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/staging-1-768x154.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781197" class="wp-caption-text"&gt;Figure 6: View the staging application in the Argo CD dashboard.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;We only have the &lt;code&gt;ConfigMap&lt;/code&gt; because we have not yet created the &lt;code&gt;kustomization.yaml&lt;/code&gt;. You might remember from Part 1 that we do have a file named &lt;code&gt;kustomization-REVISION.yaml&lt;/code&gt;. In order to synchronize the changes in the &lt;code&gt;REVISION&lt;/code&gt; file, you must rename that file and push the changes to Git.&lt;/p&gt; &lt;p&gt;Navigate to the folder where you checked out the deployment repository and run:&lt;/p&gt; &lt;pre&gt;$ git pull &amp;#38;&amp;#38; \ mv staging/kustomization-r9ce9024.yaml staging/kustomization.yaml &amp;#38;&amp;#38; \ git add staging &amp;#38;&amp;#38; git commit -m "Revision 9ce9024 is now active in staging" &amp;#38;&amp;#38; \ git push &lt;/pre&gt; &lt;p&gt;Wait a couple of minutes to let Argo CD synchronize the changes. If you are impatient, you can click &lt;b&gt;Sync&lt;/b&gt; to have the revision automatically deployed in staging, as shown in Figure 7.&lt;/p&gt; &lt;div id="attachment_781207" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/staging-1-changes.png"&gt;&lt;img aria-describedby="caption-attachment-781207" class="wp-image-781207 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/staging-1-changes-1024x292.png" alt="All of the application changes have been synced." width="640" height="183" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/staging-1-changes-1024x292.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/staging-1-changes-300x85.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/staging-1-changes-768x219.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781207" class="wp-caption-text"&gt;Figure 7: Argo CD synchronizes and deploys the changes that you have just made.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Just like we did with the development application, get the routes and run a few tests against the staging endpoints:&lt;/p&gt; &lt;pre&gt;$ oc get routes -n knative-serving-ingress | grep staging ------------------------------------------------------------ route-fd38a613-ea42-4809-af13-cd02503980bf-346238393864 quarkus-hello-world-staging.apps.ocp4.mydomain.com kourier http2 edge/Allow None route-fd38a613-ea42-4809-af13-cd02503980bf-623763373761 r9ce9024-quarkus-hello-world-staging.ocp4.mydomain.com kourier http2 edge/Allow None $ curl http://quarkus-hello-world-staging.apps.ocp4.mydomain.com/hello hola staging! Yeap! $ curl http://r9ce9024-quarkus-hello-world-staging.apps.ocp4.mydomain.com/hello hola staging! Yeap! &lt;/pre&gt; &lt;h3&gt;Application version 1 in the production environment&lt;/h3&gt; &lt;p&gt;Now, we move the application to production, where we have not set the auto-sync. All of the application candidate&amp;#8217;s objects are thus &lt;b&gt;OutOfSync&lt;/b&gt;, as shown in Figure 8.&lt;/p&gt; &lt;div id="attachment_781217" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-781217" class="wp-image-781217 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-rev1-1024x206.png" alt="The production candidate has not synchronized the newest application version." width="640" height="129" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-rev1-1024x206.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-rev1-300x60.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-rev1-768x155.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-781217" class="wp-caption-text"&gt;Figure 8: Objects in the production environment must be manually synchronized.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;We need manual approval to make the new application version available for synchronization. Execute the same steps we took for the application in staging:&lt;/p&gt; &lt;pre&gt;$ git pull &amp;#38;&amp;#38; \ mv production/kustomization-r9ce9024.yaml production/kustomization.yaml &amp;#38;&amp;#38; \ git add production &amp;#38;&amp;#38; git commit -m "Revision 9ce9024 is now ready to be sync in production" &amp;#38;&amp;#38; \ git push &lt;/pre&gt; &lt;p&gt;Wait a minute or two and you will see the new objects, which are currently marked as &lt;b&gt;OutOfSync&lt;/b&gt;, as shown in Figure 9.&lt;/p&gt; &lt;div id="attachment_781227" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-1-chanes-outofsync.png"&gt;&lt;img aria-describedby="caption-attachment-781227" class="wp-image-781227 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-1-chanes-outofsync-1024x293.png" alt="The new objects have been added to the production application candidate." width="640" height="183" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-1-chanes-outofsync-1024x293.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-1-chanes-outofsync-300x86.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-1-chanes-outofsync-768x219.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781227" class="wp-caption-text"&gt;Figure 9: Add the new objects for the current revision and verify them in the Argo CD console.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;If the changes are what you expected, you can do a manual synchronization to deploy the new version in production. Click the &lt;b&gt;Sync&lt;/b&gt; button and you will finally get the new version, ready to be tested. That screen is shown in Figure 10.&lt;/p&gt; &lt;div id="attachment_781237" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-1-changes-synced.png"&gt;&lt;img aria-describedby="caption-attachment-781237" class="wp-image-781237 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-1-changes-synced-1024x285.png" alt="Clicking sync updates and verifies the current revision." width="640" height="178" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-1-changes-synced-1024x285.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-1-changes-synced-300x83.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-1-changes-synced-768x214.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781237" class="wp-caption-text"&gt;Figure 10: Click the Sync button to synchronize your changes in the current revision.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Now, run a few tests against the production routes, following the same procedure that you used for the development and staging cycles:&lt;/p&gt; &lt;pre&gt;$ oc get routes -n knative-serving-ingress | grep production ------------------------------------------------------------ route-8c948175-70a8-4c1c-ae70-846aa3b2081f-643262313638 quarkus-hello-world-production.apps.ocp4.mydomain.com kourier http2 edge/Allow None route-8c948175-70a8-4c1c-ae70-846aa3b2081f-663561353830 r9ce9024-quarkus-hello-world-production.apps.ocp4.mydomain.com kourier http2 edge/Allow None $ curl http://quarkus-hello-world-production.apps.ocp4.mydomain.com/hello hola production! Yeap! $ curl http://r9ce9024-quarkus-hello-world-production.apps.ocp4.mydomain.com/hello hola production! Yeap! &lt;/pre&gt; &lt;p&gt;As shown in Figure 11, all of the Argo CD applications are now in sync.&lt;/p&gt; &lt;div id="attachment_781457" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/rev-1-all-synced.png"&gt;&lt;img aria-describedby="caption-attachment-781457" class="wp-image-781457 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/rev-1-all-synced-1024x232.png" alt="The Argo CD dashboard shows the development, staging, and production application versions are all in sync." width="640" height="145" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/rev-1-all-synced-1024x232.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/rev-1-all-synced-300x68.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/rev-1-all-synced-768x174.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781457" class="wp-caption-text"&gt;Figure 11: View all of your projects in the Argo CD dashboard.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Deploy a new version of the application&lt;/h2&gt; &lt;p&gt;Now, let&amp;#8217;s see what happens when we deploy a new version of our &lt;code&gt;quarkus-hello-world&lt;/code&gt; application. In this case, we will simply run the CI/CD pipeline again with a different commit ID. Note that we&amp;#8217;re still triggering the pipeline manually for now. We will introduce webhooks to the pipeline in the last part of the article.&lt;/p&gt; &lt;p&gt;Navigate to the &lt;code&gt;rh-developers-cicd&lt;/code&gt; repo and trigger the pipeline using the following parameters:&lt;/p&gt; &lt;pre&gt;$ cat tekton/pipelines/knative-pipeline-run.yaml | \   SOURCE_REPO=https://github.com/dsanchor/quarkus-hello-world.git \ COMMIT=c076ee940b1f1d9576b7af3250bbbd7114e82263 \ SHORT_COMMIT=c076ee9 \ DEPLOYMENT_REPO=https://github.com/dsanchor/quarkus-hello-world-deployment.git \   IMAGES_NS=cicd envsubst | \ oc create -f - -n cicd ------------------------------------------------------------------------------------ pipelinerun.tekton.dev/knative-pipeline-run-j5knc created &lt;/pre&gt; &lt;p&gt;If you prefer to start the pipeline using the &lt;code&gt;tkn&lt;/code&gt; CLI, run the following:&lt;/p&gt; &lt;pre&gt;$ tkn pipeline start knative-pipeline -p application=quarkus-hello-world \ -p source-repo-url=https://github.com/dsanchor/quarkus-hello-world.git \ -p source-revision=c076ee940b1f1d9576b7af3250bbbd7114e82263 \ -p short-source-revision=c076ee9 \ -p deployment-repo-url=https://github.com/dsanchor/quarkus-hello-world-deployment.git \ -p deployment-revision=master \ -p dockerfile=./src/main/docker/Dockerfile.jvm \ -p image-registry=image-registry.openshift-image-registry.svc.cluster.local:5000 \ -p image-repository=cicd \ -w name=source,claimName=source-pvc \ -w name=maven-settings,config=maven \ -w name=knative-kustomize-base,config=knative-kustomize-base \ -w name=knative-kustomize-environment,config=knative-kustomize-environment \ -n cicd &lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: The pipeline&amp;#8217;s execution could take up to five minutes. In the meantime, I recommend reading this article about &lt;a href="https://developers.redhat.com/blog/2020/02/26/speed-up-maven-builds-in-tekton-pipelines/"&gt;speeding up Maven builds in Tekton&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;When the pipeline has finished, we will have pushed a new image—&lt;code&gt;quarkus-hello-world:c076ee940b1f1d9576b7af3250bbbd7114e82263&lt;/code&gt;—into the OpenShift internal registry under the &lt;code&gt;cicd&lt;/code&gt; namespace. We&amp;#8217;ll also have pushed the new Kustomization files to the &lt;code&gt;quarkus-hello-world-deployment&lt;/code&gt; repository.&lt;/p&gt; &lt;h3&gt;Execution logs&lt;/h3&gt; &lt;p&gt;Checking the pipeline&amp;#8217;s execution logs lets us see the changes that we are pushing to Git. Notice the logs for the &lt;code&gt;push-knative-manifest&lt;/code&gt; task, in particular:&lt;/p&gt; &lt;pre&gt;add 'development/kustomization.yaml' remove 'development/r9ce9024/configmap.yaml' remove 'development/r9ce9024/revision-patch.yaml' remove 'development/r9ce9024/routing-patch.yaml' add 'development/rc076ee9/configmap.yaml' add 'development/rc076ee9/revision-patch.yaml' add 'development/rc076ee9/routing-patch.yaml' add 'production/kustomization-rc076ee9.yaml' add 'production/rc076ee9/configmap.yaml' add 'production/rc076ee9/revision-patch.yaml' add 'production/rc076ee9/routing-patch.yaml' add 'staging/kustomization-rc076ee9.yaml' add 'staging/rc076ee9/configmap.yaml' add 'staging/rc076ee9/revision-patch.yaml' add 'staging/rc076ee9/routing-patch.yaml' &lt;/pre&gt; &lt;p&gt;In summary:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The new revision is accessible in &lt;code&gt;development&lt;/code&gt; by overriding the &lt;code&gt;kustomization.yaml&lt;/code&gt; file, which references the new revision resources. Notice that there is no change in the &lt;code&gt;traffic-routing.yaml&lt;/code&gt;, so we will keep any existing routing rules. (As an example, we might keep the blue/green or canary routing rules configured from previous iterations, if any.)&lt;/li&gt; &lt;li&gt;We only add a new route for the new revision, and we remove any references to previous routes. The main route might still contain a reference to the previous revision, in which case that revision would be temporarily accessible through the main route. Once a revision becomes non-routeable, Knative eventually (after a predetermined amount of time) garbage collects it. Using Knative serving means less maintenance and operation, which makes us happier.&lt;/li&gt; &lt;li&gt;We also create the necessary Kustomize files for this new revision in the staging and production environments, but they are not yet referenced by the &lt;code&gt;kustomization.yaml&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Application version 2 in the development environment&lt;/h3&gt; &lt;p&gt;We have a new Knative service revision, but the main route still targets the previous application, as shown in Figure 12.&lt;/p&gt; &lt;div id="attachment_781477" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/rev-2-dev.png"&gt;&lt;img aria-describedby="caption-attachment-781477" class="wp-image-781477 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/rev-2-dev-1024x482.png" alt="The Argo CD dashboard shows the main route pointing to the previous application version." width="640" height="301" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/rev-2-dev-1024x482.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/rev-2-dev-300x141.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/rev-2-dev-768x362.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/rev-2-dev.png 1089w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781477" class="wp-caption-text"&gt;Figure 12: The main route points to the previous application revision.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Get the current routes for the application running in the &lt;code&gt;development&lt;/code&gt; environment:&lt;/p&gt; &lt;pre&gt;$ oc get routes -n knative-serving-ingress | grep development -------------------------------------------------------------- route-e387d9ca-9f1b-4c15-9b83-7bea4d2d290c-313361326363 quarkus-hello-world-development.apps.ocp4.mydomain.com kourier http2 edge/Allow None route-e387d9ca-9f1b-4c15-9b83-7bea4d2d290c-353136303164 rc076ee9-quarkus-hello-world-development.apps.ocp4.mydomain.com kourier http2 edge/Allow None &lt;/pre&gt; &lt;p&gt;Test both and you will notice that the main route targets the previous revision:&lt;/p&gt; &lt;pre&gt;$ curl http://quarkus-hello-world-development.apps.ocp4.mydomain.com/hello hola dev! Yeap! $ curl rc076ee9-quarkus-hello-world-development.apps.ocp4.mydomain.com/hello hola dev! Nice to see you back! &lt;/pre&gt; &lt;p&gt;If you want to add traffic to the new revision under the main route, simply modify the &lt;code&gt;traffic-routing.yaml&lt;/code&gt;. Navigate to the &lt;code&gt;quarkus-hello-world-deployment&lt;/code&gt; repository and do a &lt;code&gt;git pull&lt;/code&gt;. Then, switch to the development folder and edit the &lt;code&gt;traffic-routing.yaml&lt;/code&gt; file.&lt;/p&gt; &lt;p&gt;Change the file from this:&lt;/p&gt; &lt;pre&gt;- op: add path: /spec/traffic value: - revisionName: quarkus-hello-world-r9ce9024 percent: 100 &lt;/pre&gt; &lt;p&gt;To this:&lt;/p&gt; &lt;pre&gt;- op: add path: /spec/traffic value: - revisionName: quarkus-hello-world-r9ce9024 percent: 50 - revisionName: quarkus-hello-world-rc076ee9 percent: 50 &lt;/pre&gt; &lt;p&gt;Then push the changes:&lt;/p&gt; &lt;pre&gt;$ git add development/traffic-routing.yaml &amp;#38;&amp;#38; git commit -m "Splitted traffic between r9ce9024 %50 and rc076ee9 50" &amp;#38;&amp;#38; \ git push &lt;/pre&gt; &lt;p&gt;In two minutes or less, Argo CD will automatically synchronize those changes, or you can force a manual sync if you want to apply the change immediately.&lt;/p&gt; &lt;p&gt;If you check the main route, you will now see that it returns responses from both revisions:&lt;/p&gt; &lt;pre&gt;$ watch -n1 curl http://quarkus-hello-world-production.apps.ocp4.mydomain.com/hello &lt;/pre&gt; &lt;p&gt;If you want to ensure that traffic does not go to any old application versions, just remove that version from the &lt;code&gt;traffic-routing.yaml&lt;/code&gt; file. Knative will eventually garbage collect it, which you can test on your own.&lt;/p&gt; &lt;h3&gt;Application version 2 in the staging environment&lt;/h3&gt; &lt;p&gt;We have not yet received a new revision or route in the &lt;code&gt;staging&lt;/code&gt; environment. The reason is that the CI pipeline has not changed the &lt;code&gt;kustomization.yaml&lt;/code&gt; file. Instead, it just created a possible candidate: &lt;code&gt;kustomization-REVISION.yaml&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s deploy this new version (&lt;code&gt;mv staging/kustomization-rc076ee9.yaml staging/kustomization.yaml&lt;/code&gt;). We&amp;#8217;ll configure the same routing that we used in development, splitting the traffic between our two current revisions:&lt;/p&gt; &lt;pre&gt;$ git pull &amp;#38;&amp;#38; \ mv staging/kustomization-rc076ee9.yaml staging/kustomization.yaml &amp;#38;&amp;#38; \ cp development/traffic-routing.yaml staging/traffic-routing.yaml &amp;#38;&amp;#38; \ rm -rf staging/r9ce9024 &amp;#38;&amp;#38; \ git add staging &amp;#38;&amp;#38; git commit -m "Split traffic between r9ce9024 %50 and rc076ee9 50%" &amp;#38;&amp;#38; \ git push &lt;/pre&gt; &lt;p&gt;Notice that we also removed an older revision folder (&lt;code&gt;rm -rf staging/r9ce9024&lt;/code&gt;). The CI pipeline did this automatically for development,  but not for staging or production. Removing that older revision differentiates development from the other two environments in the demo.&lt;/p&gt; &lt;p&gt;The application&amp;#8217;s final result in staging would be the same as in the development environment, as shown in Figure 13.&lt;/p&gt; &lt;div id="attachment_781547" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/staging-rev-2sync.png"&gt;&lt;img aria-describedby="caption-attachment-781547" class="wp-image-781547 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/staging-rev-2sync-1024x308.png" alt="Staging and development are in sync." width="640" height="193" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/staging-rev-2sync-1024x308.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/staging-rev-2sync-300x90.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/staging-rev-2sync-768x231.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781547" class="wp-caption-text"&gt;Figure 13: The development and staging applications are in sync.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Test the main route and you should see that you get responses from both Knative service revisions:&lt;/p&gt; &lt;pre&gt;$ watch -n1 curl http://quarkus-hello-world-staging.apps.ocp4.mydomain.com/hello &lt;/pre&gt; &lt;h3&gt;Application version 2 in the production environment&lt;/h3&gt; &lt;p&gt;As previously noted, the production scenario differs from staging because auto-synchronization is not set for production. We will perform exactly the same steps that we did in the staging environment and see the results.&lt;/p&gt; &lt;pre&gt;$ git pull &amp;#38;&amp;#38; \ mv production/kustomization-rc076ee9.yaml production/kustomization.yaml &amp;#38;&amp;#38; \ cp staging/traffic-routing.yaml production/traffic-routing.yaml &amp;#38;&amp;#38; \ rm -rf production/r9ce9024 &amp;#38;&amp;#38; \ git add production &amp;#38;&amp;#38; git commit -m "Split traffic between r9ce9024 %50 and rc076ee9 50%" &amp;#38;&amp;#38; \ git push &lt;/pre&gt; &lt;h3&gt;OutOfSync&lt;/h3&gt; &lt;p&gt;When you check the Argo CD dashboard, shown in Figure 14, you should observe that &lt;code&gt;quarkus-hello-world-production&lt;/code&gt; application is &lt;b&gt;OutOfSync&lt;/b&gt;. The Knative service object is the affected object.&lt;/p&gt; &lt;div id="attachment_781567" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-oos-rev-2.png"&gt;&lt;img aria-describedby="caption-attachment-781567" class="wp-image-781567 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-oos-rev-2-1024x469.png" alt="The Knative service object is out of sync." width="640" height="293" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-oos-rev-2-1024x469.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-oos-rev-2-300x137.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-oos-rev-2-768x352.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-oos-rev-2.png 1144w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781567" class="wp-caption-text"&gt;Figure 14: The Knative service object is out of sync.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Click on the &lt;b&gt;OutOfSync&lt;/b&gt; box under &lt;code&gt;quarkus-hello-world&lt;/code&gt; and check the &lt;b&gt;DIFF&lt;/b&gt; tab, as shown in Figure 15.&lt;/p&gt; &lt;div id="attachment_781577" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-diff.png"&gt;&lt;img aria-describedby="caption-attachment-781577" class="wp-image-781577 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-diff-1024x431.png" alt="Use the Diff tool to check the current application version against the desired manifest." width="640" height="269" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-diff-1024x431.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-diff-300x126.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-diff-768x323.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/prod-diff.png 1487w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781577" class="wp-caption-text"&gt;Figure 15: Use the Diff tool to find the differences between application versions.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The screen in Figure 15 shows the differences between the live manifest and the desired manifest, with the live version being shown on the left. The differences are what we expected, so let&amp;#8217;s manually sync and deploy the new revision and routing rules in production.&lt;/p&gt; &lt;p&gt;Once synced, test the main route:&lt;/p&gt; &lt;pre&gt;$ watch -n1 curl http://quarkus-hello-world-production.apps.ocp4.mydomain.com/hello &lt;/pre&gt; &lt;h2&gt;Rollback to a previous state&lt;/h2&gt; &lt;p&gt;So far, you have seen how to deploy new application versions in every environment. What if you found an unexpected behavior in the latest revision of the application in production? Let&amp;#8217;s use Argo CD to rollback to a previous application state.&lt;/p&gt; &lt;p&gt;With Argo CD, we can rollback to any code or application revision in the history of our Git repository. For this example, we&amp;#8217;ll rollback to the previous revision. From the Argo CD dashboard, click on &lt;b&gt;History and Rollback&lt;/b&gt;, as shown in Figure 16.&lt;/p&gt; &lt;div id="attachment_781607" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/rollbakc-menu.png"&gt;&lt;img aria-describedby="caption-attachment-781607" class="wp-image-781607" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/rollbakc-menu.png" alt="The Argo CD dashboard includes an option to rollback." width="640" height="95" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/rollbakc-menu.png 968w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/rollbakc-menu-300x44.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/rollbakc-menu-768x113.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781607" class="wp-caption-text"&gt;Figure 16: Use the History and Rollback feature to return to a previous version of the application.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Once you have found the revision that you want to rollback to, click the dotted menu in the top-right corner of the screen, then select the only action that you have: &lt;b&gt;Rollback&lt;/b&gt;.&lt;/p&gt; &lt;div id="attachment_781617" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/rollback-action.png"&gt;&lt;img aria-describedby="caption-attachment-781617" class="wp-image-781617 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/rollback-action-1024x356.png" alt="The current revision is shown, along with the option to select an older application version." width="640" height="223" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/rollback-action-1024x356.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/rollback-action-300x104.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/rollback-action-768x267.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/rollback-action.png 1518w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781617" class="wp-caption-text"&gt;Figure 17: Choose the revision that you want, then click Rollback.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;As shown in Figure 17, the result is that the application status is currently &lt;b&gt;OutOfSync&lt;/b&gt;, but it&amp;#8217;s synced with the revision that we selected for rollback. Validate that the rollback worked by running tests:&lt;/p&gt; &lt;pre&gt;$ watch -n1 curl http://quarkus-hello-world-production.apps.ocp4.mydomain.com/hello &lt;/pre&gt; &lt;p&gt;You should be able to confirm that the responses are from the previous application version and not the most recent one.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: If you had auto-sync enabled for the production environment, you would need to disable it before executing the rollback. Otherwise, you would be auto-synced again to the latest revision.&lt;/p&gt; &lt;h2&gt;Closing the loop: Fully automated CI/CD&lt;/h2&gt; &lt;p&gt;So far, we have only triggered the pipeline manually. As the final step in this workflow, we will introduce automation to trigger the pipeline.&lt;/p&gt; &lt;p&gt;I have left this part to the end of the article so that we could use the &lt;a target="_blank" rel="nofollow" href="https://github.com/dsanchor/quarkus-hello-world.git"&gt;complete source repository&lt;/a&gt; to run the pipeline. We will add a webhook to this repository, which triggers the pipeline automatically when new commits are pushed to the repository.&lt;/p&gt; &lt;p&gt;Before starting, fork the source code repository at &lt;a target="_blank" rel="nofollow" href="https://github.com/dsanchor/quarkus-hello-world.git"&gt;https://github.com/dsanchor/quarkus-hello-world.git&lt;/a&gt;. We will use it for this final example.&lt;/p&gt; &lt;h3&gt;Add a Tekton trigger&lt;/h3&gt; &lt;p&gt;On the Tekton side, we will create three different kinds of objects that work together:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/tektoncd/triggers/blob/master/docs/triggertemplates.md"&gt;TriggerTemplate&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/tektoncd/triggers/blob/master/docs/triggerbindings.md"&gt;TriggerBinding&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/tektoncd/triggers/blob/master/docs/eventlisteners.md"&gt;EventListener&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In the &lt;code&gt;EventListener&lt;/code&gt;, we&amp;#8217;ll add two interceptors:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The &lt;a target="_blank" rel="nofollow" href="https://github.com/tektoncd/triggers/blob/master/docs/eventlisteners.md#GitHub-Interceptors"&gt;GitHub interceptor&lt;/a&gt; adds a simple check based on a shared token.&lt;/li&gt; &lt;li&gt;The &lt;a target="_blank" rel="nofollow" href="https://github.com/tektoncd/triggers/blob/master/docs/eventlisteners.md#cel-interceptors"&gt;CEL interceptor&lt;/a&gt; applies a basic function to shorten the commit ID and make it available to the pipeline.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;As your first step, create a &lt;code&gt;secret&lt;/code&gt; with a random token:&lt;/p&gt; &lt;pre&gt;$ oc create secret generic webhook --from-literal=token=XXXXXXXXXXXXXX -n cicd &lt;/pre&gt; &lt;p&gt;Then, create a common &lt;code&gt;TriggerTemplate&lt;/code&gt; and &lt;code&gt;TriggerBinding&lt;/code&gt; that will be shared between different applications:&lt;/p&gt; &lt;pre&gt;$ oc apply -f tekton/webhook/knative-pipeline-trigger.yaml -n cicd -------------------------------------------------------------------- triggerbinding.triggers.tekton.dev/webhook-body-binding created triggertemplate.triggers.tekton.dev/knative-pipeline-template created &lt;/pre&gt; &lt;p&gt;Next, create the application-specific &lt;code&gt;EventListener&lt;/code&gt; and &lt;code&gt;TriggerBinding&lt;/code&gt;. &lt;b&gt;Important&lt;/b&gt;: Use your own deployment repository in &lt;code&gt;DEPLOYMENT_REPO_URL&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ cat tekton/webhook/app-custom-trigger.yaml | \ GITHUB_SECRET=webhook \ APPLICATION=quarkus-hello-world \ NS=cicd \ DEPLOYMENT_REPO_URL=https://github.com/dsanchor/quarkus-hello-world-deployment \ DEPLOYMENT_REPO_REVISION=master \ envsubst | oc apply -f - -n cicd ------------------------------------------------------------------------------------- eventlistener.triggers.tekton.dev/quarkus-hello-world-listener created triggerbinding.triggers.tekton.dev/quarkus-hello-world-binding created &lt;/pre&gt; &lt;p&gt;Expose the event-listener service, which will be the target endpoint for your webhook in GitHub:&lt;/p&gt; &lt;pre&gt;$ oc expose svc el-quarkus-hello-world-listener -n cicd &lt;/pre&gt; &lt;p&gt;And get the route:&lt;/p&gt; &lt;pre&gt;$ oc get route el-quarkus-hello-world-listener -n cicd -------------------------------------------------------- NAME HOST/PORT PATH SERVICES PORT TERMINATION WILDCARD el-quarkus-hello-world-listener el-quarkus-hello-world-listener-cicd.apps.ocp4.mydomain.com el-quarkus-hello-world-listener http-listener None &lt;/pre&gt; &lt;h3&gt;Configure a webhook in GitHub&lt;/h3&gt; &lt;p&gt;Now, go to your application&amp;#8217;s GitHub repository. Under &lt;b&gt;Settings&lt;/b&gt;, click on &lt;b&gt;Webhooks -&amp;#62; Add Webhooks&lt;/b&gt;, as shown in Figure 18.&lt;/p&gt; &lt;div id="attachment_781637" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/webhook-1.png"&gt;&lt;img aria-describedby="caption-attachment-781637" class="wp-image-781637 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/webhook-1-1024x233.png" alt="The GitHub source repository includes an option to add a webhook." width="640" height="146" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/webhook-1-1024x233.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/webhook-1-300x68.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/webhook-1-768x175.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781637" class="wp-caption-text"&gt;Figure 18: Add a webhook in the project&amp;#8217;s GitHub repository.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Add the route as the payload URL, set the content type as JSON, and, finally, copy the token content into the secret box, as shown in Figure 19.&lt;/p&gt; &lt;div id="attachment_781647" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/webhook-2.png"&gt;&lt;img aria-describedby="caption-attachment-781647" class="wp-image-781647 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/webhook-2-1024x535.png" alt="After you've added the webhook, you must configure it." width="640" height="334" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/webhook-2-1024x535.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/webhook-2-300x157.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/webhook-2-768x402.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781647" class="wp-caption-text"&gt;Figure 19: Configure the webhook.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Once you&amp;#8217;ve added these final elements, you should see a single webhook on your screen.&lt;/p&gt; &lt;h3&gt;Try it out&lt;/h3&gt; &lt;p&gt;I will make a simple change in the &lt;a target="_blank" rel="nofollow" href="https://github.com/dsanchor/quarkus-hello-world/blob/master/src/main/java/org/acme/quickstart/GreetingResource.java"&gt;GreetingResource&lt;/a&gt; class. You must apply the same change in your &lt;a target="_blank" rel="nofollow" href="https://github.com/dsanchor/quarkus-hello-world/blob/master/src/test/java/org/acme/quickstart/GreetingResourceTest.java"&gt;GreetingResourceTest&lt;/a&gt;. In my case, I am changing the last part of the message to &amp;#8220;Webhooks work.&amp;#8221;&lt;/p&gt; &lt;p&gt;After all of the tests pass locally, push your changes to the remote repository:&lt;/p&gt; &lt;pre&gt;$ git add src &amp;#38;&amp;#38; \ git commit -m "Changed greeting message" &amp;#38;&amp;#38; \ git push &lt;/pre&gt; &lt;p&gt;The pipeline should have already started. If you encounter an error, you might want to look at the event listener pod that we created to manage events for the &lt;code&gt;EventListener&lt;/code&gt;. To obtain the name of the pod, run:&lt;/p&gt; &lt;pre&gt;$ oc get pod -l eventlistener=quarkus-hello-world-listener -n cicd &lt;/pre&gt; &lt;p&gt;Wait until the pipeline finishes. Once it&amp;#8217;s done, you should have a new Knative service revision running in your development environment. You can use the &lt;a href="https://developers.redhat.com/blog/2020/07/16/whats-new-in-the-openshift-4-5-console-developer-experience/"&gt;new developer perspective in the OpenShift web console&lt;/a&gt; to verify that the Knative service is running. Select the &lt;b&gt;development&lt;/b&gt; project and check the topology, as shown in Figure 20.&lt;/p&gt; &lt;div id="attachment_781717" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/dev-console.png"&gt;&lt;img aria-describedby="caption-attachment-781717" class="wp-image-781717 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/dev-console-1024x471.png" alt="OpenShift's developer perspective lets you see the live applications and routing at a glance." width="640" height="294" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/dev-console-1024x471.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/dev-console-300x138.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/dev-console-768x353.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/dev-console.png 1063w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781717" class="wp-caption-text"&gt;Figure 20: Use OpenShift&amp;#8217;s developer perspective to verify that the Knative service is running.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;You should see three different revisions running (although they are all scaled down due to inactivity). The two revisions that we deployed during the first steps of this article are under the same main route, with each managing half of the traffic. The last revision has its own route, which our pipeline created. Let&amp;#8217;s hit it and see the results:&lt;/p&gt; &lt;pre&gt;$ curl r1b644f0-quarkus-hello-world-development.apps.ocp4.mydomain.com/hello hola dev! Webhooks work! &lt;/pre&gt; &lt;p&gt;You can also see that Knative automatically scaled up that revision to one pod, as shown in Figure 21.&lt;/p&gt; &lt;div id="attachment_781727" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/pod-scaled-up.png"&gt;&lt;img aria-describedby="caption-attachment-781727" class="wp-image-781727 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/pod-scaled-up-1024x472.png" alt="The lives application is indicated with a blue circle around its pod." width="640" height="295" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/pod-scaled-up-1024x472.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/pod-scaled-up-300x138.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/pod-scaled-up-768x354.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/pod-scaled-up.png 1063w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-781727" class="wp-caption-text"&gt;Figure 21: Knative auto-scales the newest application version.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;This second half of my introduction to building modern CI/CD workflows has introduced you to using Argo CD to implement the continuous delivery side of a serverless CI/CD workflow. Combining Tekton with GitOps, implemented by Argo CD, is an increasingly popular option for fully automated CI/CD. I hope that you have enjoyed this demonstration.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F14%2Fbuilding-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-2%2F&amp;#38;linkname=Building%20modern%20CI%2FCD%20workflows%20for%20serverless%20applications%20with%20Red%20Hat%20OpenShift%20Pipelines%20and%20Argo%20CD%2C%20Part%202" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F14%2Fbuilding-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-2%2F&amp;#38;linkname=Building%20modern%20CI%2FCD%20workflows%20for%20serverless%20applications%20with%20Red%20Hat%20OpenShift%20Pipelines%20and%20Argo%20CD%2C%20Part%202" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F14%2Fbuilding-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-2%2F&amp;#38;linkname=Building%20modern%20CI%2FCD%20workflows%20for%20serverless%20applications%20with%20Red%20Hat%20OpenShift%20Pipelines%20and%20Argo%20CD%2C%20Part%202" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F14%2Fbuilding-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-2%2F&amp;#38;linkname=Building%20modern%20CI%2FCD%20workflows%20for%20serverless%20applications%20with%20Red%20Hat%20OpenShift%20Pipelines%20and%20Argo%20CD%2C%20Part%202" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F14%2Fbuilding-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-2%2F&amp;#38;linkname=Building%20modern%20CI%2FCD%20workflows%20for%20serverless%20applications%20with%20Red%20Hat%20OpenShift%20Pipelines%20and%20Argo%20CD%2C%20Part%202" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F14%2Fbuilding-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-2%2F&amp;#38;linkname=Building%20modern%20CI%2FCD%20workflows%20for%20serverless%20applications%20with%20Red%20Hat%20OpenShift%20Pipelines%20and%20Argo%20CD%2C%20Part%202" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F14%2Fbuilding-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-2%2F&amp;#38;linkname=Building%20modern%20CI%2FCD%20workflows%20for%20serverless%20applications%20with%20Red%20Hat%20OpenShift%20Pipelines%20and%20Argo%20CD%2C%20Part%202" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F14%2Fbuilding-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-2%2F&amp;#038;title=Building%20modern%20CI%2FCD%20workflows%20for%20serverless%20applications%20with%20Red%20Hat%20OpenShift%20Pipelines%20and%20Argo%20CD%2C%20Part%202" data-a2a-url="https://developers.redhat.com/blog/2020/10/14/building-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-2/" data-a2a-title="Building modern CI/CD workflows for serverless applications with Red Hat OpenShift Pipelines and Argo CD, Part 2"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/14/building-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-2/"&gt;Building modern CI/CD workflows for serverless applications with Red Hat OpenShift Pipelines and Argo CD, Part 2&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Cmrnuh9pNQE" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In the first half of this article, I introduced Tekton as a framework for cloud-native CI/CD pipelines, and Argo CD as its perfect partner for GitOps on Red Hat OpenShift. Our example for the demonstration is a Knative service that deploys and serves a Quarkus application. Our goal is to develop a complete continuous integration [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/14/building-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-2/"&gt;Building modern CI/CD workflows for serverless applications with Red Hat OpenShift Pipelines and Argo CD, Part 2&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/10/14/building-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-2/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">784007</post-id><dc:creator>David Sancho</dc:creator><dc:date>2020-10-14T07:00:05Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/14/building-modern-ci-cd-workflows-for-serverless-applications-with-red-hat-openshift-pipelines-and-argo-cd-part-2/</feedburner:origLink></entry><entry><title>Support for IBM Z and more in CodeReady Workspaces 2.4</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/pB_Qxz7VEeA/" /><category term="Developer Tools" /><category term="Kubernetes" /><category term="Linux" /><category term="Mac" /><category term="Windows" /><category term="certificate authority" /><category term="codeready" /><category term="CodeReady Workspaces" /><category term="IBM Z" /><category term="openshift" /><author><name>Parag Dave</name></author><id>https://developers.redhat.com/blog/?p=792217</id><updated>2020-10-13T07:00:21Z</updated><published>2020-10-13T07:00:21Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/products/codeready-workspaces/overview"&gt;Red Hat CodeReady Workspaces 2.4&lt;/a&gt; is now available. For this release, we focused on adding support for &lt;a target="_blank" rel="nofollow" href="https://www.ibm.com/it-infrastructure/z"&gt;IBM Z&lt;/a&gt; and improving the IDE editor and configuration elements.&lt;/p&gt; &lt;p&gt;CodeReady Workspaces (CRW) 2.4 is available on &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_codeready_workspaces/2.0/html/installation_guide/installing-codeready-workspaces-on-openshift-3-using-the-operator_crw"&gt;Red Hat OpenShift 3.11&lt;/a&gt; and &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;OpenShift 4.4&lt;/a&gt; and higher. CodeReady Workspaces 2.4 is also available on &lt;a target="_blank" rel="nofollow" href="https://www.openshift.com/products/dedicated/"&gt;OpenShift Dedicated 4.3&lt;/a&gt; via the add-ons capability.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: Based on &lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/che/getting-started/cloud"&gt;Eclipse Che&lt;/a&gt;, CodeReady Workspaces is an OpenShift-native developer environment that supports cloud-native development.&lt;/p&gt; &lt;h2&gt;Support for IBM Z&lt;/h2&gt; &lt;p&gt;It is now possible to deploy a CodeReady Workspaces &lt;a href="https://developers.redhat.com/topics/kubernetes/operators"&gt;Operator&lt;/a&gt; on an &lt;a href="https://developers.redhat.com/openshift"&gt;OpenShift&lt;/a&gt; cluster running on the IBM Z mainframe system. If you are using CodeReady Workspaces on a &lt;a href="https://developers.redhat.com/blog/category/windows/"&gt;Windows&lt;/a&gt;, macOS, or &lt;a href="https://developers.redhat.com/topics/linux"&gt;Linux&lt;/a&gt; machine, you can use the CRW command-line interface (CLI), &lt;code&gt;crwctl&lt;/code&gt;, for the same purpose.&lt;/p&gt; &lt;p&gt;CodeReady Workspaces does not officially support deployment to disconnected OpenShift clusters on IBM Z. Fewer devfiles and samples are provided for IBM Z, and some languages—like &lt;a href="https://developers.redhat.com/topics/dotnet"&gt;.NET Core&lt;/a&gt;—are not supported.&lt;/p&gt; &lt;h2&gt;IDE and configuration improvements&lt;/h2&gt; &lt;p&gt;With this release, we focused on several improvements to the IDE and configuration.&lt;/p&gt; &lt;h3&gt;Switch or close workspaces from the IDE&lt;/h3&gt; &lt;p&gt;As shown in Figure 1, you can now use the CodeReady Workspaces IDE to close a running workspace or switch to a different workspace while keeping the current one active:&lt;/p&gt; &lt;div id="attachment_792227" style="width: 410px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/09/Screen-Shot-2020-09-25-at-2.53.50-PM.png"&gt;&lt;img aria-describedby="caption-attachment-792227" class="wp-image-792227" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/Screen-Shot-2020-09-25-at-2.53.50-PM-237x300.png" alt="You can now switch between workspaces in the CodeReady Workspaces IDE." width="400" height="505" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/09/Screen-Shot-2020-09-25-at-2.53.50-PM-237x300.png 237w, https://developers.redhat.com/blog/wp-content/uploads/2020/09/Screen-Shot-2020-09-25-at-2.53.50-PM.png 714w" sizes="(max-width: 400px) 100vw, 400px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-792227" class="wp-caption-text"&gt;Figure 1: Close or switch workspaces from the CodeReady Workspaces IDE.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Support certificates from an OpenShift-trusted CA bundle&lt;/h3&gt; &lt;p&gt;When OpenShift is configured with trusted certificate authority (CA)-signed certificates, CodeReady Workspaces automatically processes all of those certificates, along with the ones that are explicitly assigned to it.&lt;/p&gt; &lt;h3&gt;Configure with a custom hostname&lt;/h3&gt; &lt;p&gt;You can now set the configuration property &lt;code&gt;cheHost&lt;/code&gt; in the CheCluster custom resource with a custom &lt;code&gt;hostname&lt;/code&gt; value. The custom &lt;code&gt;hostname&lt;/code&gt; value is then used for all communication to the CodeReady Workspaces server. You must ensure that the custom resource is configured with a trusted certificate for the custom &lt;code&gt;hostname&lt;/code&gt; value.&lt;/p&gt; &lt;h3&gt;Support for the .devfile.yaml name format&lt;/h3&gt; &lt;p&gt;In your source project folder, you can now include a devfile with the &lt;code&gt;.devfile.yaml&lt;/code&gt; or &lt;code&gt;devfile.yaml&amp;#60;/&lt;/code&gt; file name format. If it doesn&amp;#8217;t find any files named &lt;code&gt;devfile.yaml&lt;/code&gt;, CodeReady Workspaces automatically searches for files named &lt;code&gt;.devfile.yaml&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Try CodeReady Workspaces 2.4&lt;/h2&gt; &lt;p&gt;CodeReady Workspaces 2.4 is available now on OpenShift 3.11 and OpenShift 4.x.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;If you are using OpenShift 3.11, you can find Installation instructions &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_codeready_workspaces/2.0/html/installation_guide/installing-codeready-workspaces-on-openshift-3-using-the-operator_crw"&gt;here&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;If you are using OpenShift 4.x, you can install directly from the OpenShift OperatorHub and follow the documentation &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_codeready_workspaces/2.4/html/installation_guide/installing-codeready-workspaces_crw#installing-codeready-workspaces-on-openshiftt-4-using-operatorhub_crw"&gt;here&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;If you are using OpenShift 4.x on IBM Z, you can install directly from the OperatorHub and follow the documentation &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_codeready_workspaces/2.4/html/installation_guide/installing-codeready-workspaces_crw"&gt;here&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/products/codeready-workspaces/download"&gt;Download&lt;/a&gt; the Red Hat CodeReady Workspaces CLI.&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/products/codeready-workspaces"&gt;Visit&lt;/a&gt; the CodeReady Workspaces product page.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F13%2Fsupport-for-ibm-z-and-more-in-codeready-workspaces-2-4%2F&amp;#38;linkname=Support%20for%20IBM%20Z%20and%20more%20in%20CodeReady%20Workspaces%202.4" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F13%2Fsupport-for-ibm-z-and-more-in-codeready-workspaces-2-4%2F&amp;#38;linkname=Support%20for%20IBM%20Z%20and%20more%20in%20CodeReady%20Workspaces%202.4" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F13%2Fsupport-for-ibm-z-and-more-in-codeready-workspaces-2-4%2F&amp;#38;linkname=Support%20for%20IBM%20Z%20and%20more%20in%20CodeReady%20Workspaces%202.4" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F13%2Fsupport-for-ibm-z-and-more-in-codeready-workspaces-2-4%2F&amp;#38;linkname=Support%20for%20IBM%20Z%20and%20more%20in%20CodeReady%20Workspaces%202.4" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F13%2Fsupport-for-ibm-z-and-more-in-codeready-workspaces-2-4%2F&amp;#38;linkname=Support%20for%20IBM%20Z%20and%20more%20in%20CodeReady%20Workspaces%202.4" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F13%2Fsupport-for-ibm-z-and-more-in-codeready-workspaces-2-4%2F&amp;#38;linkname=Support%20for%20IBM%20Z%20and%20more%20in%20CodeReady%20Workspaces%202.4" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F13%2Fsupport-for-ibm-z-and-more-in-codeready-workspaces-2-4%2F&amp;#38;linkname=Support%20for%20IBM%20Z%20and%20more%20in%20CodeReady%20Workspaces%202.4" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F13%2Fsupport-for-ibm-z-and-more-in-codeready-workspaces-2-4%2F&amp;#038;title=Support%20for%20IBM%20Z%20and%20more%20in%20CodeReady%20Workspaces%202.4" data-a2a-url="https://developers.redhat.com/blog/2020/10/13/support-for-ibm-z-and-more-in-codeready-workspaces-2-4/" data-a2a-title="Support for IBM Z and more in CodeReady Workspaces 2.4"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/13/support-for-ibm-z-and-more-in-codeready-workspaces-2-4/"&gt;Support for IBM Z and more in CodeReady Workspaces 2.4&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/pB_Qxz7VEeA" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Red Hat CodeReady Workspaces 2.4 is now available. For this release, we focused on adding support for IBM Z and improving the IDE editor and configuration elements. CodeReady Workspaces (CRW) 2.4 is available on Red Hat OpenShift 3.11 and OpenShift 4.4 and higher. CodeReady Workspaces 2.4 is also available on OpenShift Dedicated 4.3 via the [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/13/support-for-ibm-z-and-more-in-codeready-workspaces-2-4/"&gt;Support for IBM Z and more in CodeReady Workspaces 2.4&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/10/13/support-for-ibm-z-and-more-in-codeready-workspaces-2-4/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">792217</post-id><dc:creator>Parag Dave</dc:creator><dc:date>2020-10-13T07:00:21Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/13/support-for-ibm-z-and-more-in-codeready-workspaces-2-4/</feedburner:origLink></entry><entry><title>JBoss Tools and Red Hat CodeReady Studio for Eclipse 2020-09</title><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/jbossbuzz/~3/TGJfW3DI-NE/12.17.0.ga.html" /><category term="release" /><category term="jbosstools" /><category term="devstudio" /><category term="jbosscentral" /><category term="codereadystudio" /><author><name>jeffmaury</name></author><id>https://tools.jboss.org/blog/12.17.0.ga.html</id><updated>2020-10-13T09:57:16Z</updated><published>2020-10-13T00:00:00Z</published><content type="html">&lt;div&gt;&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;a href="https://tools.jboss.org/downloads/jbosstools/2020-09/4.17.0.Final.html"&gt;JBoss Tools 4.17.0&lt;/a&gt; and &lt;a href="https://tools.jboss.org/downloads/devstudio/2020-09/12.17.0.GA.html"&gt;Red Hat CodeReady Studio 12.17&lt;/a&gt; for Eclipse 2020-09 are here waiting for you. Check it out!&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/blog/images/crstudio12.png" alt="crstudio12" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="installation"&gt;&lt;a class="anchor" href="#installation"&gt;&lt;/a&gt;Installation&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Red Hat CodeReady Studio comes with everything pre-bundled in its installer. Simply download it from our &lt;a href="https://developers.redhat.com/products/codeready-studio/overview/"&gt;Red Hat CodeReady product page&lt;/a&gt; and run it like this:&lt;/p&gt; &lt;/div&gt; &lt;div class="literalblock"&gt; &lt;div class="content"&gt; &lt;pre&gt;java -jar codereadystudio-&amp;lt;installername&amp;gt;.jar&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;JBoss Tools or Bring-Your-Own-Eclipse (BYOE) CodeReady Studio require a bit more:&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This release requires at least Eclipse 4.17 (2020-09) but we recommend using the latest &lt;a href="https://www.eclipse.org/downloads/packages/release/2020-09/r/eclipse-ide-enterprise-java-developers"&gt;Eclipse 4.17 2020-06 JEE Bundle&lt;/a&gt; since then you get most of the dependencies preinstalled.&lt;/p&gt; &lt;/div&gt; &lt;div class="admonitionblock warning"&gt; &lt;table&gt; &lt;tr&gt; &lt;td class="icon"&gt; &lt;i class="fa icon-warning" title="Warning"&gt;&lt;/i&gt; &lt;/td&gt; &lt;td class="content"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Java11 is now required to run Red Hat Developer Studio or JBoss Tools (this is a requirement from Eclipse 4.17). So make sure to select a Java11 JDK in the installer. You can still work with pre-Java11 JDK/JRE and projects in the tool.&lt;/p&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Once you have installed Eclipse, you can either find us on the Eclipse Marketplace under &amp;quot;JBoss Tools&amp;quot; or &amp;quot;Red Hat CodeReady Studio&amp;quot;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For JBoss Tools, you can also use our update site directly.&lt;/p&gt; &lt;/div&gt; &lt;div class="literalblock"&gt; &lt;div class="content"&gt; &lt;pre&gt;http://download.jboss.org/jbosstools/photon/stable/updates/&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-is-new"&gt;&lt;a class="anchor" href="#what-is-new"&gt;&lt;/a&gt;What is new?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Our main focus for this release was an improved tooling for the Quarkus framework, improvements for container based development and bug fixing. Eclipse 2020-09 itself has a lot of new cool stuff but let me highlight just a few updates in both Eclipse 2020-09 and JBoss Tools plugins that I think are worth mentioning.&lt;/p&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="openshift"&gt;&lt;a class="anchor" href="#openshift"&gt;&lt;/a&gt;OpenShift&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="openshift-container-platform-4-6-support"&gt;&lt;a class="anchor" href="#openshift-container-platform-4-6-support"&gt;&lt;/a&gt;OpenShift Container Platform 4.6 support&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;With the new OpenShift Container Platform (OCP) 4.6 now available, JBoss Tools is compatible with this major release in a transparent way. Just define your connection to your OCP 4.6 based cluster as you did before for an OCP 3 cluster, and use the tooling !&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="quarkus"&gt;&lt;a class="anchor" href="#quarkus"&gt;&lt;/a&gt;Quarkus&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="support-for-yaml-configuration-file"&gt;&lt;a class="anchor" href="#support-for-yaml-configuration-file"&gt;&lt;/a&gt;Support for YAML configuration file&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Quarkus supports configuration through YAML format. For more information, see the &lt;a href="https://quarkus.io/guides/config#yaml"&gt;Quarkus documentation&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In order to use it, follow the steps:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;create a Quarkus project using the new Quarkus wizard&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;create a new &lt;code&gt;application.yaml&lt;/code&gt; or &lt;code&gt;application.yml&lt;/code&gt; next to the &lt;code&gt;application.properties&lt;/code&gt; in &lt;code&gt;src/main/resources&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The editor will open and you will get content assist and syntax validation.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="server-tools"&gt;&lt;a class="anchor" href="#server-tools"&gt;&lt;/a&gt;Server Tools&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="wildfly-21-server-adapter"&gt;&lt;a class="anchor" href="#wildfly-21-server-adapter"&gt;&lt;/a&gt;Wildfly 21 Server Adapter&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A server adapter has been added to work with Wildfly 21. It adds support for Java EE 8, Jakarta EE 8 and Microprofile 3.3.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="hibernate-tools"&gt;&lt;a class="anchor" href="#hibernate-tools"&gt;&lt;/a&gt;Hibernate Tools&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="hibernate-runtime-provider-updates"&gt;&lt;a class="anchor" href="#hibernate-runtime-provider-updates"&gt;&lt;/a&gt;Hibernate Runtime Provider Updates&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A number of additions and updates have been performed on the available Hibernate runtime providers.&lt;/p&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="runtime-provider-updates"&gt;&lt;a class="anchor" href="#runtime-provider-updates"&gt;&lt;/a&gt;Runtime Provider Updates&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Hibernate 5.4 runtime provider now incorporates Hibernate Core version 5.4.21.Final and Hibernate Tools version 5.4.21.Final.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Hibernate 5.3 runtime provider now incorporates Hibernate Core version 5.3.18.Final and Hibernate Tools version 5.3.18.Final.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="platform"&gt;&lt;a class="anchor" href="#platform"&gt;&lt;/a&gt;Platform&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="views-dialogs-and-toolbar"&gt;&lt;a class="anchor" href="#views-dialogs-and-toolbar"&gt;&lt;/a&gt;Views, Dialogs and Toolbar&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="adjustable-view-fonts"&gt;&lt;a class="anchor" href="#adjustable-view-fonts"&gt;&lt;/a&gt;Adjustable view fonts&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The font used for tree and table views can now be customized with a font preference. This preference is called &amp;quot;Tree and Table font for views&amp;quot; and can be found in Window &amp;gt; Preferences &amp;gt; General &amp;gt; Appearance &amp;gt; Colors and Fonts under the &amp;quot;View and Editor Folders&amp;quot; category.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/adjustable-view-font-preference.png" alt="adjustable view font preference" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Project Explorer is an example of a view that gets affected by this font preference.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/adjustable-view-font.png" alt="adjustable view font" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="remove-gifs-from-views"&gt;&lt;a class="anchor" href="#remove-gifs-from-views"&gt;&lt;/a&gt;Remove gifs from views&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Several years ago, the icons of the platform views were migrated to .png files. As already opened views store their reference to the image, the .gif files were left in the code. These have been removed now. If you are using the same workspace for multiple years and view icons are missing due to that removal, you have to close and reopen the view.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="default-changed-for-confirm-on-exit-for-last-window"&gt;&lt;a class="anchor" href="#default-changed-for-confirm-on-exit-for-last-window"&gt;&lt;/a&gt;Default changed for confirm on exit for last window&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;By default, Eclipse now closes if you select the close icon on the last window without additional confirmation dialog. If you want to get a confirmation dialog, you can enable that via Window &amp;gt; Preferences &amp;gt; General &amp;gt; Startup and Shutdown &amp;gt; Confirm exit when closing last window.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="workbench-models-created-in-releases-before-2014-are-not-automatically-converted"&gt;&lt;a class="anchor" href="#workbench-models-created-in-releases-before-2014-are-not-automatically-converted"&gt;&lt;/a&gt;Workbench models created in releases before 2014 are not automatically converted&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Workbench models (workbench.xmi) stored in workspaces created with releases before 2014 and never opened with a later release are not automatically converted anymore if opened with the 2020-09 release.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="text-editors"&gt;&lt;a class="anchor" href="#text-editors"&gt;&lt;/a&gt;Text Editors&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="multiple-last-edit-locations"&gt;&lt;a class="anchor" href="#multiple-last-edit-locations"&gt;&lt;/a&gt;Multiple Last Edit Locations&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;strong&gt;Previous Edit Location&lt;/strong&gt; navigation (formerly named Last Edit Location) is now expanded to remember multiple edit locations.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The last 15 edit locations are now remembered. For convenience, similar edit locations in close proximity to each other are also merged so that each of the 15 remembered locations remains distinct.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/multiple-last-edit-locations.png" alt="multiple last edit locations" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;How to use&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Two new keyboard shortcuts are introduced:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ctrl+Alt+LEFT_ARROW&lt;/strong&gt; (or on Mac &lt;strong&gt;Ctrl+Opt+LEFT_ARROW&lt;/strong&gt;) navigates to the most recent edit location, just as &lt;strong&gt;Ctrl+Q&lt;/strong&gt; always has in prior releases.&lt;/p&gt; &lt;div class="paragraph"&gt; &lt;p&gt;However, now continuing to hold &lt;strong&gt;Ctrl+Alt&lt;/strong&gt; and then pressing &lt;strong&gt;LEFT_ARROW&lt;/strong&gt; again begins a traversal through the history of prior edit locations, with each additional press of &lt;strong&gt;LEFT_ARROW&lt;/strong&gt; moving a step further back in history. Once traversal stops, future &lt;strong&gt;Ctrl+Alt+LEFT_ARROW&lt;/strong&gt; actions are now temporarily anchored to this older historical location for easy exploration of that code region.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The classic &lt;strong&gt;Ctrl+Q&lt;/strong&gt; mapping has been likewise enhanced with this new functionality, so that &lt;strong&gt;Ctrl+Q&lt;/strong&gt; and &lt;strong&gt;Ctrl+Alt+LEFT_ARROW&lt;/strong&gt; are synonymous.&lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ctrl+Alt+RIGHT_ARROW&lt;/strong&gt; (or on Mac &lt;strong&gt;Ctrl+Opt+RIGHT_ARROW&lt;/strong&gt;) conversely moves the anchor forward through edit history, so after traversing backward with &lt;strong&gt;Ctrl+Alt+LEFT_ARROW&lt;/strong&gt;, you can go forward again by holding &lt;strong&gt;Ctrl+Alt&lt;/strong&gt; and repeatedly pressing &lt;strong&gt;RIGHT_ARROW&lt;/strong&gt;. A new menu item has likewise been added for this forward navigation as well.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;New edit locations are always inserted at the end, so original historical ordering is always maintained. New edits also reset the last location &amp;quot;anchor&amp;quot; back to the most recent edit, so that pressing &lt;strong&gt;Ctrl+Alt+LEFT_ARROW&lt;/strong&gt; once again brings you to the most recent edit rather than a historical one.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="printing-editor-content-adds-date-in-header"&gt;&lt;a class="anchor" href="#printing-editor-content-adds-date-in-header"&gt;&lt;/a&gt;Printing editor content adds date in header&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Printing editor content now includes the current date in addition to the filename in the header of each printed page.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/print-header-date.png" alt="print header date" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="themes-and-styling"&gt;&lt;a class="anchor" href="#themes-and-styling"&gt;&lt;/a&gt;Themes and Styling&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="improved-gtk-light-theme"&gt;&lt;a class="anchor" href="#improved-gtk-light-theme"&gt;&lt;/a&gt;Improved GTK light theme&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The GTK light theme has been updated to align better with the default GTK3 Adwaita theme.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Old:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/gtk-light-old.png" alt="gtk light old" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;New:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/gtk-light-new.png" alt="gtk light new" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="windows-menus-are-styled-in-the-dark-theme"&gt;&lt;a class="anchor" href="#windows-menus-are-styled-in-the-dark-theme"&gt;&lt;/a&gt;Windows menus are styled in the dark theme&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;SWT now natively styles the menu under Windows in the dark theme.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Old:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/menu-background-old.png" alt="menu background old" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;New:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/menu-background-dark.png" alt="menu background dark" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="dropbox-boxes-combos-are-styled-under-windows-in-the-dark-theme"&gt;&lt;a class="anchor" href="#dropbox-boxes-combos-are-styled-under-windows-in-the-dark-theme"&gt;&lt;/a&gt;Dropbox boxes (Combos) are styled under Windows in the dark theme&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;SWT now natively styles drop-down boxes under Windows in the dark theme.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Old:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/combo-win32-dark-old.png" alt="combo win32 dark old" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;New:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/combo-win32-dark-new.png" alt="combo win32 dark new" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="selection-highlighter-for-dark-theme"&gt;&lt;a class="anchor" href="#selection-highlighter-for-dark-theme"&gt;&lt;/a&gt;Selection highlighter for dark theme&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The active tab selection highlighter has been enabled for Eclipse’s default dark themes. This will help users identify which tab is active at a glance.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/dark-selection-highlighter.png" alt="dark selection highlighter" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="selection-highlighter-for-tables-under-windows-in-the-dark-theme"&gt;&lt;a class="anchor" href="#selection-highlighter-for-tables-under-windows-in-the-dark-theme"&gt;&lt;/a&gt;Selection highlighter for tables under Windows in the dark theme&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;SWT now natively supports selection highlighter in tables under Windows in the dark theme.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/selection-highlight.png" alt="selection highlight" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="debug"&gt;&lt;a class="anchor" href="#debug"&gt;&lt;/a&gt;Debug&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="filter-null-bytes-from-console-output"&gt;&lt;a class="anchor" href="#filter-null-bytes-from-console-output"&gt;&lt;/a&gt;Filter null bytes from console output&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The interpretation of ASCII control characters in the &lt;strong&gt;Console View&lt;/strong&gt; was extended to recognize the characters: &lt;code&gt;\0&lt;/code&gt; - null byte. If interpretation is enabled, any null byte will be stripped and not shown in console view. This is most relevant for the Linux platform where a null byte in console view causes anything after it on the same line to be not rendered.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This feature is disabled by default. You can enable it on the &lt;strong&gt;Run/Debug &amp;gt; Console&lt;/strong&gt; preference page.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="general-updates"&gt;&lt;a class="anchor" href="#general-updates"&gt;&lt;/a&gt;General Updates&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="builds-for-linux-aarch64-aka-arm64-added"&gt;&lt;a class="anchor" href="#builds-for-linux-aarch64-aka-arm64-added"&gt;&lt;/a&gt;Builds for Linux AArch64 (aka Arm64) added&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Binaries for Linux AArch64 (Arm64) are available for testing. With the raising popularity of this architecture people can continue using the Eclipse IDE even when changing their machine.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="java-developement-tools-jdt"&gt;&lt;a class="anchor" href="#java-developement-tools-jdt"&gt;&lt;/a&gt;Java Developement Tools (JDT)&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="java-15-support"&gt;&lt;a class="anchor" href="#java-15-support"&gt;&lt;/a&gt;Java 15 Support&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="java-15"&gt;&lt;a class="anchor" href="#java-15"&gt;&lt;/a&gt;Java 15&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Java 15 is out and Eclipse JDT supports Java 15 for 4.17 via Marketplace.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The release notably includes the following Java 15 features:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;JEP 378: Text Blocks (Standard).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;JEP 384: Records (Second Preview).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;JEP 375: Pattern Matching for Instanceof (Second Preview).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;JEP 360: Sealed Classes (Preview).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Please note that preview option should be on for preview language features. For an informal introduction of the support, please refer to &lt;a href="https://wiki.eclipse.org/Java15/Examples"&gt;Java 15 Examples wiki&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="junit"&gt;&lt;a class="anchor" href="#junit"&gt;&lt;/a&gt;JUnit&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="collapse-all-nodes-in-junit-view"&gt;&lt;a class="anchor" href="#collapse-all-nodes-in-junit-view"&gt;&lt;/a&gt;Collapse all nodes in JUnit view&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;JUnit view now provides a context-menu option to collapse all nodes:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/junit-collapse-all.png" alt="junit collapse all" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="sort-test-results-by-execution-time"&gt;&lt;a class="anchor" href="#sort-test-results-by-execution-time"&gt;&lt;/a&gt;Sort test results by execution time&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;JUnit view now provides the ability to sort results by execution time. By default, results will be sorted by execution order. Choosing &lt;strong&gt;Sort By &amp;gt; Execution Time&lt;/strong&gt; from the &lt;strong&gt;JUnit View&lt;/strong&gt; menu will reorder the results once all tests are complete. While tests are still running, they will be shown in execution order.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/junit-sort-time-before.png" alt="junit sort time before" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Sorting by execution order results in:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/junit-sort-time-after.png" alt="junit sort time after" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="java-editor"&gt;&lt;a class="anchor" href="#java-editor"&gt;&lt;/a&gt;Java Editor&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="substring-subword-matches-for-types"&gt;&lt;a class="anchor" href="#substring-subword-matches-for-types"&gt;&lt;/a&gt;Substring/Subword matches for types&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Content Assist now fully supports both substring and subword matches for types:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/substring-types.png" alt="substring types" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Substring matches are always shown and subword matches can be enabled/disabled with the existing &lt;strong&gt;Show subword matches&lt;/strong&gt; option on the &lt;strong&gt;Java &amp;gt; Editor &amp;gt; Content Assist&lt;/strong&gt; preference page.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="optimization-tab"&gt;&lt;a class="anchor" href="#optimization-tab"&gt;&lt;/a&gt;Optimization tab&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new tab has been added that gathers cleanups that improve the time performance: the existing lazy operator cleanup and the regex precompiler cleanup.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/regex-preferences.png" alt="regex preferences" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="objects-equals"&gt;&lt;a class="anchor" href="#objects-equals"&gt;&lt;/a&gt;Objects.equals()&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new clean up has been added that makes use of &lt;code&gt;Objects.equals()&lt;/code&gt; to implement the &lt;code&gt;equals(Object)&lt;/code&gt; method.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;It reduces the code and improves the reading. The cleanup is only available for Java 7 or higher. Although this kind of comparison is almost exclusively seen in the &lt;code&gt;equals(Object)&lt;/code&gt; method, it can also reduce code in other methods.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To select the clean up, invoke &lt;strong&gt;Source &amp;gt; Clean Up…​&lt;/strong&gt;, use a custom profile, and on the &lt;strong&gt;Configure…​&lt;/strong&gt; dialog select &lt;strong&gt;Use Objects.equals() in the equals method implementation&lt;/strong&gt; on the &lt;strong&gt;Unnecessary Code&lt;/strong&gt; tab.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/objects-equals-preferences.png" alt="objects equals preferences" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For the given code:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/objects-equals-before.png" alt="objects equals before" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You get this after the clean up:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/objects-equals-after.png" alt="objects equals after" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="precompiles-the-regular-expressions"&gt;&lt;a class="anchor" href="#precompiles-the-regular-expressions"&gt;&lt;/a&gt;Precompiles the regular expressions&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new clean up has been added that optimizes the regular expression execution by precompiling it.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;It replaces some usages of &lt;code&gt;java.lang.String&lt;/code&gt; by usages of &lt;code&gt;java.util.regex.Pattern&lt;/code&gt;. The cleanup is done only if it is sure that the string is used as a regular expression. If there is any doubt, nothing is done. The regular expression must be explicitly used several times to be sure the cleanup is useful.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To select the clean up, invoke &lt;strong&gt;Source &amp;gt; Clean Up…​&lt;/strong&gt;, use a custom profile, and on the &lt;strong&gt;Configure…​&lt;/strong&gt; dialog select &lt;strong&gt;Precompiles reused regular expressions&lt;/strong&gt; on the &lt;strong&gt;Optimization&lt;/strong&gt; tab.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/regex-preferences.png" alt="regex preferences" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For the given code:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/regex-before.png" alt="regex before" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You get this after the clean up:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/regex-after.png" alt="regex after" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="string-format-quickfix"&gt;&lt;a class="anchor" href="#string-format-quickfix"&gt;&lt;/a&gt;String.format quickfix&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new quickfix has been added to replace string concatenation with &lt;code&gt;String.format&lt;/code&gt;, similar to the existing ones for &lt;code&gt;StringBuilder&lt;/code&gt; and &lt;code&gt;MessageFormat&lt;/code&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/String.format-quickfix.png" alt="String.format quickfix" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="method-reference-quickfix"&gt;&lt;a class="anchor" href="#method-reference-quickfix"&gt;&lt;/a&gt;Method reference quickfix&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new quickfix has been added to create missing methods for method references.&lt;/p&gt; &lt;/div&gt; &lt;div class="admonitionblock note"&gt; &lt;table&gt; &lt;tr&gt; &lt;td class="icon"&gt; &lt;i class="fa icon-note" title="Note"&gt;&lt;/i&gt; &lt;/td&gt; &lt;td class="content"&gt; &lt;strong&gt;Current restriction is that this quickfix is only available on current class&lt;/strong&gt;. &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;div class="admonitionblock note"&gt; &lt;table&gt; &lt;tr&gt; &lt;td class="icon"&gt; &lt;i class="fa icon-note" title="Note"&gt;&lt;/i&gt; &lt;/td&gt; &lt;td class="content"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;strong&gt;Expect current implementation to work on simple cases only&lt;/strong&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;strong&gt;Method references invoking nested generics or type parameters might be problematic to resolve correct&lt;/strong&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/methodreference_1.png" alt="methodreference 1" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="java-views-and-dialog"&gt;&lt;a class="anchor" href="#java-views-and-dialog"&gt;&lt;/a&gt;Java Views and Dialog&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="toggle-code-minings-from-find-actions-menu"&gt;&lt;a class="anchor" href="#toggle-code-minings-from-find-actions-menu"&gt;&lt;/a&gt;Toggle Code Minings From Find Actions Menu&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The code minings within an editor can be enabled/disabled through the Find Actions menu (&lt;strong&gt;Ctrl+3&lt;/strong&gt;).&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/toggle-code-minings.png" alt="toggle code minings" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="java-formatter"&gt;&lt;a class="anchor" href="#java-formatter"&gt;&lt;/a&gt;Java Formatter&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="assert-statement-wrapping"&gt;&lt;a class="anchor" href="#assert-statement-wrapping"&gt;&lt;/a&gt;Assert statement wrapping&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new setting in the Formatter profile controls &lt;strong&gt;line wrapping of assert statements&lt;/strong&gt;. A line wrap can be added between the assert condition and its error message. The setting can be found in the &lt;strong&gt;Profile Editor (Preferences &amp;gt; Java &amp;gt; Code Style &amp;gt; Formatter &amp;gt; Edit…​&lt;/strong&gt;) in the &lt;strong&gt;Line Wrapping &amp;gt; Wrapping Settings &amp;gt; Statemtens &amp;gt; &amp;apos;assert&amp;apos; messages&lt;/strong&gt; node.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/formatter-wrap-assert.png" alt="formatter wrap assert" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect3"&gt; &lt;h4 id="debug-2"&gt;&lt;a class="anchor" href="#debug-2"&gt;&lt;/a&gt;Debug&lt;/h4&gt; &lt;div class="sect4"&gt; &lt;h5 id="anonymous-class-instance-in-evaluation"&gt;&lt;a class="anchor" href="#anonymous-class-instance-in-evaluation"&gt;&lt;/a&gt;Anonymous class instance in evaluation&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The &lt;strong&gt;JDT debugger&lt;/strong&gt; is now capable of inspecting/evaluating expressions with anonymous class instances.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/anon-instance-inspection-code.png" alt="anon instance inspection code" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/anon-instance-inspection.png" alt="anon instance inspection" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="jep-358-helpful-nullpointerexceptions"&gt;&lt;a class="anchor" href="#jep-358-helpful-nullpointerexceptions"&gt;&lt;/a&gt;JEP 358: Helpful NullPointerExceptions&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The &lt;strong&gt;JDT debugger&lt;/strong&gt; has now a checkbox option to activate the command line support for JEP 358. This is disabled below Java 14 and enabled by default for Java programs launched with Java 14 and above.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;strong&gt;-XX:+ShowCodeDetailsInExceptionMessages&lt;/strong&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/helpfulNullPointerExceptions.png" alt="helpfulNullPointerExceptions" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;JVM is now capable of analyzing which variable was null at the point of NullPointerException and describe the variable with a null-detail message in the NPE.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="actual-type-in-variables-view"&gt;&lt;a class="anchor" href="#actual-type-in-variables-view"&gt;&lt;/a&gt;Actual type in Variables view&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The option &lt;strong&gt;Show Type Names&lt;/strong&gt; in the &lt;strong&gt;Variables&lt;/strong&gt; and &lt;strong&gt;Expressions&lt;/strong&gt; views now displays the value’s actual type instead of its declared type. This simplifies debugging especially when variable details (&lt;code&gt;toString()&lt;/code&gt;) is shown &lt;strong&gt;As the label for all variables&lt;/strong&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To enable &lt;strong&gt;Show Type Names&lt;/strong&gt; in the &lt;strong&gt;Variables&lt;/strong&gt; view, column mode must be disabled (&lt;strong&gt;View Menu &amp;gt; Layout &amp;gt; Show Columns&lt;/strong&gt;).&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Example:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;Object s = &amp;quot;some string&amp;quot;; Collection&amp;lt;?&amp;gt; c = Arrays.asList(s, 1); // breakpoint&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://www.eclipse.org/eclipse/news/4.17/images/variables-actual-type.png" alt="variables actual type" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="and-more"&gt;&lt;a class="anchor" href="#and-more"&gt;&lt;/a&gt;And more…​&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You can find more noteworthy updates in on &lt;a href="https://tools.jboss.org/documentation/whatsnew/jbosstools/4.17.0.Final.html"&gt;this page&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-is-next"&gt;&lt;a class="anchor" href="#what-is-next"&gt;&lt;/a&gt;What is next?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Having JBoss Tools 4.17.0 and Red Hat CodeReady Studio 12.17 out we are already working on the next release.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Enjoy!&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Jeff Maury&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/TGJfW3DI-NE" height="1" width="1" alt=""/&gt;</content><summary>JBoss Tools 4.17.0 and Red Hat CodeReady Studio 12.17 for Eclipse 2020-09 are here waiting for you. Check it out! Installation Red Hat CodeReady Studio comes with everything pre-bundled in its installer. Simply download it from our Red Hat CodeReady product page and run it like this: java -jar codereadystudio-&lt;installername&gt;.jar JBoss Tools or Bring-Your-Own-Eclipse (BYOE) CodeReady Studio require a bit more: This release requires at least Eclipse 4.17 (2020-09) but we recommend using the latest Eclipse 4.17 2020-06 JEE Bundle since then you get most of the dependencies preinstalled. Java11 is now required to run Red Hat Developer Studio or JBoss Tools (this is a requirement from Eclipse 4.17). So...</summary><dc:creator>jeffmaury</dc:creator><dc:date>2020-10-13T00:00:00Z</dc:date><feedburner:origLink>https://tools.jboss.org/blog/12.17.0.ga.html</feedburner:origLink></entry><entry><title>Quarked testing: Writing tests for Quarkus</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/UEfGntMJ1yk/" /><category term="DevNation" /><category term="Java" /><category term="Kubernetes" /><category term="Quarkus" /><category term="java kubernetes" /><category term="service virtualization" /><category term="test containers" /><category term="test java application" /><author><name>Alex Soto Bueno</name></author><id>https://developers.redhat.com/blog/?p=799987</id><updated>2020-10-12T07:00:10Z</updated><published>2020-10-12T07:00:10Z</published><content type="html">&lt;p&gt;DevNation Tech Talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions plus code and sample projects to help you get started. In this talk, you’ll learn about testing &lt;a href="https://developers.redhat.com/topics/quarkus/"&gt;Quarkus&lt;/a&gt; applications and services from &lt;a href="https://developers.redhat.com/blog/author/asotobue/"&gt;Alex Soto Bueno&lt;/a&gt; and &lt;a href="https://developers.redhat.com/blog/author/burrsutter/"&gt;Burr Sutter&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Testing allows you to deliver your application with the confidence that you&amp;#8217;re building the right things and building the things right. Testing also helps developers refactor their code, add a new feature, or fix a bug knowing that nothing else is breaking.&lt;/p&gt; &lt;p&gt;Quarkus brings to the &lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java&lt;/a&gt; ecosystem a way to develop cloud-first, &lt;a href="https://developers.redhat.com/topics/containers/"&gt;container&lt;/a&gt;-native, &lt;a href="https://developers.redhat.com/topics/serverless-architecture/"&gt;serverless&lt;/a&gt;-focused, and &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt;-optimized applications. This is where GraalVM meets Quarkus, bringing server-side and enterprise-capable Java to help you build truly cloud-native apps.&lt;/p&gt; &lt;p&gt;But, how do you test Quarkus applications and services? In this talk, we show how you how. We&amp;#8217;ll look at how to test basic components, mocks, stubs, or (secured) RESTful web APIs. Also, we will cover more advanced topics such as persistence tests, service virtualization, and using containers for testing purposes. Come to this session to learn in practice how to write tests for Quarkus.&lt;/p&gt; &lt;p&gt;Watch the entire talk:&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/qQLSZTDODSQ?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Learn more&lt;/h2&gt; &lt;p&gt;Join us at an &lt;a href="https://developers.redhat.com/events/"&gt;upcoming developer event&lt;/a&gt;, and see our collection of &lt;a href="https://developers.redhat.com/devnation/?page=0"&gt;past DevNation Tech Talks&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F12%2Fquarked-testing-writing-tests-for-quarkus%2F&amp;#38;linkname=Quarked%20testing%3A%20Writing%20tests%20for%20Quarkus" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F12%2Fquarked-testing-writing-tests-for-quarkus%2F&amp;#38;linkname=Quarked%20testing%3A%20Writing%20tests%20for%20Quarkus" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F12%2Fquarked-testing-writing-tests-for-quarkus%2F&amp;#38;linkname=Quarked%20testing%3A%20Writing%20tests%20for%20Quarkus" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F12%2Fquarked-testing-writing-tests-for-quarkus%2F&amp;#38;linkname=Quarked%20testing%3A%20Writing%20tests%20for%20Quarkus" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F12%2Fquarked-testing-writing-tests-for-quarkus%2F&amp;#38;linkname=Quarked%20testing%3A%20Writing%20tests%20for%20Quarkus" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F12%2Fquarked-testing-writing-tests-for-quarkus%2F&amp;#38;linkname=Quarked%20testing%3A%20Writing%20tests%20for%20Quarkus" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F12%2Fquarked-testing-writing-tests-for-quarkus%2F&amp;#38;linkname=Quarked%20testing%3A%20Writing%20tests%20for%20Quarkus" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F12%2Fquarked-testing-writing-tests-for-quarkus%2F&amp;#038;title=Quarked%20testing%3A%20Writing%20tests%20for%20Quarkus" data-a2a-url="https://developers.redhat.com/blog/2020/10/12/quarked-testing-writing-tests-for-quarkus/" data-a2a-title="Quarked testing: Writing tests for Quarkus"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/12/quarked-testing-writing-tests-for-quarkus/"&gt;Quarked testing: Writing tests for Quarkus&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/UEfGntMJ1yk" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;DevNation Tech Talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions plus code and sample projects to help you get started. In this talk, you’ll learn about testing Quarkus applications and services from Alex Soto Bueno and Burr Sutter. Testing allows you to deliver your application with [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/12/quarked-testing-writing-tests-for-quarkus/"&gt;Quarked testing: Writing tests for Quarkus&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/10/12/quarked-testing-writing-tests-for-quarkus/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">799987</post-id><dc:creator>Alex Soto Bueno</dc:creator><dc:date>2020-10-12T07:00:10Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/12/quarked-testing-writing-tests-for-quarkus/</feedburner:origLink></entry><entry><title>CodeReady Containers - Getting Started with OpenShift Container Platform 4.5 and Process Automation Tooling</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Vy-9QYoAvFQ/codeready-containers-ocp-45-with-process-automation-tooling.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="CodeReadyContainers" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-codeready_containers_getting_started_with_openshift_container_platform_4_5_and_process_automation_tooling</id><updated>2020-10-12T05:00:03Z</updated><published>2020-10-12T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-9I8eBXVQklE/X4AnRySlulI/AAAAAAAAxlc/_ndkm7yspeAYfbTO2KDvMIDTdV5L2IZZQCNcBGAsYHQ/s2048/hello-i-m-nik-MAgPyHRO0AA-unsplash.jpg" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="process automation tooling" border="0" data-original-height="1371" data-original-width="2048" height="214" src="https://1.bp.blogspot.com/-9I8eBXVQklE/X4AnRySlulI/AAAAAAAAxlc/_ndkm7yspeAYfbTO2KDvMIDTdV5L2IZZQCNcBGAsYHQ/w320-h214/hello-i-m-nik-MAgPyHRO0AA-unsplash.jpg" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;As a cloud-native developer you've &lt;a href="https://gitlab.com/redhatdemocentral/ocp-install-demo" target="_blank"&gt;installed an OpenShift Container Platform&lt;/a&gt; development environment on your local machine, but what's next?&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;What can you do with the fully stocked container registry provided to you?&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;There is no better way to learn about container technologies, cloud native methods, and container-based application development than getting hands-on with great open technologies.&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;This article targets getting you started on your new &lt;a href="https://gitlab.com/redhatdemocentral/ocp-install-demo" target="_blank"&gt;OpenShift Container Platform 4.5&lt;/a&gt; by putting the latest process automation developer tooling at your disposal. You'll get started by installing it using the latest available container registry images. After that, if you need more help getting started, try a free online workshop where you can build your first process automation project hands-on.&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;Get started today with new &lt;a href="https://gitlab.com/redhatdemocentral/rhcs-rhpam-install-demo" target="_blank"&gt;developer tooling for process design&lt;/a&gt;, user tasks, forms, rules, and business logic in just a few simple steps.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 data-sourcepos="1:1-3:130"&gt;Process automation developer tooling&lt;/h3&gt;&lt;div data-sourcepos="3:1-4:70" dir="auto"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-8fEVFoNYtFc/X4Am18bwfpI/AAAAAAAAxlU/DHJ_1--K8qUfFiE-dg6V6gqdsOtTuCJMQCNcBGAsYHQ/s2048/crc-rhpam-architecture.png" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="process automation tooling" border="0" data-original-height="1152" data-original-width="2048" height="180" src="https://1.bp.blogspot.com/-8fEVFoNYtFc/X4Am18bwfpI/AAAAAAAAxlU/DHJ_1--K8qUfFiE-dg6V6gqdsOtTuCJMQCNcBGAsYHQ/w320-h180/crc-rhpam-architecture.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;Let's install the &lt;a href="https://gitlab.com/redhatdemocentral/rhcs-rhpam-install-demo" target="_blank"&gt;Red Hat Process Automation Manager on an OpenShift Container Platform&lt;/a&gt; using the latest provided container catalog image. It delivers fully functioning developer process automation tooling containerized on your OpenShift Container Platform.&lt;br /&gt;&lt;/div&gt;&lt;div data-sourcepos="3:1-4:70" dir="auto"&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 data-sourcepos="7:1-9:131"&gt;Install from container catalog&lt;/h3&gt;&lt;div data-sourcepos="9:1-10:83" dir="auto"&gt;There are two options to install and run this project on the OpenShift Container Platform; use your own existing installation or to install on CodeReady Containers which provides you with a local OpenShift cluster.&lt;/div&gt;&lt;ol data-sourcepos="12:1-13:0" dir="auto"&gt;&lt;li data-sourcepos="12:1-13:0"&gt;Ensure you have an OpenShift container based installation, such as one of the following:&lt;/li&gt;&lt;/ol&gt;&lt;ul data-sourcepos="14:3-17:0" dir="auto"&gt;&lt;li data-sourcepos="14:3-15:0"&gt;&lt;div data-sourcepos="14:5-14:116"&gt;your own OpenShift installation, if using this you just need to pass the IP address to the init.{sh|bat} script.&lt;/div&gt;&lt;/li&gt;&lt;li data-sourcepos="16:3-17:0"&gt;&lt;div data-sourcepos="16:5-16:95"&gt;&lt;a href="https://gitlab.com/redhatdemocentral/ocp-install-demo" target="_blank"&gt;CodeReady Containers Easy Install&lt;/a&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol data-sourcepos="18:1-23:0" dir="auto" start="2"&gt;&lt;li data-sourcepos="18:1-19:0"&gt;&lt;div data-sourcepos="18:4-18:146"&gt;&lt;a href="https://gitlab.com/redhatdemocentral/rhcs-rhpam-install-demo/-/archive/master/rhcs-rhpam-install-demo-master.zip" target="_blank"&gt;Download and unzip this demo.&lt;/a&gt;&lt;/div&gt;&lt;/li&gt;&lt;li data-sourcepos="22:1-23:0"&gt;&lt;div data-sourcepos="22:4-22:91"&gt;Run 'init.sh' or 'init.bat' file. 'init.bat' must be run with Administrative privileges&amp;nbsp;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;pre class="code highlight" lang="plaintext"&gt;&lt;span class="line" id="LC1" lang="plaintext"&gt; # If using CodeReady Containers Easy Install project, just add the cluster &lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC2" lang="plaintext"&gt; # address to HOST_IP variable found at the top of the init.{sh|bat} files:&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC3" lang="plaintext"&gt; #&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC4" lang="plaintext"&gt; # HOST_IP=api.crc.testing &lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC5" lang="plaintext"&gt; # &lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC6" lang="plaintext"&gt; # Now run the script without any arguments and it uses the hostname:&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC7" lang="plaintext"&gt; #&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC8" lang="plaintext"&gt; $ ./init.sh&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div data-sourcepos="42:1-42:140" dir="auto"&gt;&lt;a href="https://www.blogger.com/blog/post/edit/3868547292717970492/3054799686837756106#" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="red hat process automation manager" border="0" data-original-height="886" data-original-width="1600" height="177" src="https://1.bp.blogspot.com/-vEsuIwWe5xg/XhLsYPZArnI/AAAAAAAAw1w/9NM0V6bfpYEUVxTBUf6R4kw2wloDArxSQCEwYBhgL/w320-h177/rhcs-rhpam-ocp.png" title="process automation tooling" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div data-sourcepos="42:1-42:140" dir="auto"&gt;After some installation magic you can watch and read about in the script log output on your console, it's time to login to your process automation tooling.&lt;/div&gt;&lt;div data-sourcepos="42:1-42:140" dir="auto"&gt;&lt;br /&gt;Get started developing containerized process automation projects here (the address will be generated):&lt;/div&gt;&lt;ul data-sourcepos="44:3-45:0" dir="auto"&gt;&lt;li data-sourcepos="44:3-45:0"&gt;CodeReady Container example: http:rhcs-rhpam-install-demo-appdev-in-cloud.apps-crc.testing/business-central ( u:erics / p:redhatpam1! )&lt;/li&gt;&lt;/ul&gt;&lt;div data-sourcepos="46:1-46:195" dir="auto"&gt;Not sure how to get started with Red Hat Process Automation Manager? Try one of these&amp;nbsp;&lt;a href="https://bpmworkshop.gitlab.io/index-rhpam.html#/1" target="_blank"&gt;online workshops&lt;/a&gt;&amp;nbsp;to build a first project from scratch.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=J1iPmKtJjHg:rVJj6juP_9k:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=J1iPmKtJjHg:rVJj6juP_9k:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=J1iPmKtJjHg:rVJj6juP_9k:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=J1iPmKtJjHg:rVJj6juP_9k:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=J1iPmKtJjHg:rVJj6juP_9k:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=J1iPmKtJjHg:rVJj6juP_9k:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=J1iPmKtJjHg:rVJj6juP_9k:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=J1iPmKtJjHg:rVJj6juP_9k:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=J1iPmKtJjHg:rVJj6juP_9k:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=J1iPmKtJjHg:rVJj6juP_9k:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=J1iPmKtJjHg:rVJj6juP_9k:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/J1iPmKtJjHg" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Vy-9QYoAvFQ" height="1" width="1" alt=""/&gt;</content><summary>As a cloud-native developer you've installed an OpenShift Container Platform development environment on your local machine, but what's next? What can you do with the fully stocked container registry provided to you? There is no better way to learn about container technologies, cloud native methods, and container-based application development than getting hands-on with great open technologies. This...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-10-12T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/J1iPmKtJjHg/codeready-containers-ocp-45-with-process-automation-tooling.html</feedburner:origLink></entry><entry><title>This week in JBoss - 12th October 2020</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/5GXzz1yjfMk/weekly-2020-10-12.html" /><category term="Camel" scheme="searchisko:content:tags" /><category term="decision_manager" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_weeklyeditorial" scheme="searchisko:content:tags" /><category term="hacktoberfest" scheme="searchisko:content:tags" /><category term="infinispan" scheme="searchisko:content:tags" /><category term="Kafka" scheme="searchisko:content:tags" /><category term="kamlets" scheme="searchisko:content:tags" /><category term="news" scheme="searchisko:content:tags" /><category term="process_automation" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="weekly_editorial" scheme="searchisko:content:tags" /><category term="weekly_update" scheme="searchisko:content:tags" /><author><name>Kevin Conner</name></author><id>searchisko:content:id:jbossorg_blog-this_week_in_jboss_12th_october_2020</id><updated>2020-10-12T00:00:00Z</updated><published>2020-10-12T00:00:00Z</published><content type="html">&lt;article class="" data-tags="news, weekly_update, weekly_editorial, decision_manager, process_automation, kafka, camel, kamlets, quarkus, hacktoberfest, infinispan"&gt; &lt;h1&gt;This week in JBoss - 12th October 2020&lt;/h1&gt; &lt;p class="preamble"&gt;&lt;/p&gt;&lt;p&gt;Welcome to another edition of the JBoss Editorial where we bring you articles and news from across the JBoss Community of projects&lt;/p&gt;&lt;p&gt;&lt;/p&gt; &lt;div class="sect1"&gt; &lt;h2 id="_creating_a_payments_architecture"&gt;Creating a Payments Architecture&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;With Cloud technologies changing the way we architect and deliver software Eric has been taking a look at how these technologies will apply to the Payment Services industry.&lt;/p&gt; &lt;p&gt;In the next two posts from his Payment Architecture series Eric introduces us to &lt;a href="https://www.schabell.org/2020/10/payments-architecture-anti-money-laundering-example.html"&gt;the design of an Anti-Money Laundering solution&lt;/a&gt; and follows that with &lt;a href="https://www.schabell.org/2020/10/payments-architecture-fraud-detection-example.html"&gt;the design of a Fraud Detection solution&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_codeready_containers_decision_manager_and_process_automation"&gt;CodeReady Containers, Decision Manager and Process Automation&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;If you have ever wanted to explore Decision Manager or Process Automation running within the cloud then it has never been easier to get started. Eric has developed two simple setups, both leveraging CodeReady containers and OpenShift Container Platform 4.5, which allow you to quickly set up &lt;a href="https://www.schabell.org/2020/10/codeready-containers-getting-started-with-ocp-45-and-decision-manager-tooling.html"&gt;Decision Manager&lt;/a&gt; and &lt;a href="https://www.schabell.org/2020/10/codeready-containers-ocp-45-with-process-automation-tooling.html"&gt;Process Automation&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_kafka_and_emitters_a_deeper_dive"&gt;Kafka and Emitters, a deeper dive&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;Following on from an earlier blog post introducing us to emitters and how they can be used to send messages, Clement has taken a &lt;a href="https://quarkus.io/blog/reactive-messaging-emitter/"&gt;deeper look into the Emitter construct and explains how this can be used to bridge between the imperative and reactive worlds&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_optimizing_camel_3_6"&gt;Optimizing Camel 3.6&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;Camel 3.6 will bring with it a number of optimizations to the camel core which will improve not only the performance of the core but also reduce the resources required to run camel routes. For more information &lt;a href="http://www.davsclaus.com/2020/10/apache-camel-36-more-camel-core.html"&gt;check out Claus' blog where he describes the changes in more detail&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_kamlets_camel_in_the_cloud"&gt;Kamlets, Camel in the cloud&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;Apache Camel K 1.2.0 introduced a number of features, the most important of which is the Kamelet. The Kamelet represents a camel route snippet and encapsulates the logic for connecting to a specific system. For more information check out &lt;a href="https://www.nicolaferraro.me/2020/10/12/kamelets/"&gt;Nicola’s blog where he introduces you to Kamelets and how they relate to Knative Eventing&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_testing_quarkus"&gt;Testing Quarkus&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;Alex Soto and Burr Sutter recently gave a talk about testing Quarkus applications as part of the DevNation Tech Talk series. The talk covers &lt;a href="https://developers.redhat.com/blog/2020/10/12/quarked-testing-writing-tests-for-quarkus/"&gt;how to test basic components as well as more advanced topics such as persistence, service virtualization and using containers for testing&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_contributing_to_opensource_communities"&gt;Contributing to OpenSource Communities&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;With &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktoberfest&lt;/a&gt; already under way there are a number of opportunities for contributing to OpenSource, including a number of projects within the JBoss Community with two of those being &lt;a href="https://strimzi.io"&gt;Strimzi&lt;/a&gt; and &lt;a href="https://quarkus.io/"&gt;Quarkus&lt;/a&gt;. If you are interested in &lt;a href="https://strimzi.io/blog/2020/10/01/hacktoberfest/"&gt;contributing to Strimzi&lt;/a&gt; then check out Paolo’s post, if interested in &lt;a href="https://quarkus.io/blog/contributing-for-the-first-time/"&gt;contributing to Quarkus&lt;/a&gt; then check out Loïc’s post.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_new_releases"&gt;New Releases&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;a href="https://quarkus.io/"&gt;Quarkus team&lt;/a&gt; have announced the release of &lt;a href="https://quarkus.io/blog/quarkus-1-8-2-final-released/"&gt;Quarkus 1.8.2.Final&lt;/a&gt; and &lt;a href="https://quarkus.io/blog/quarkus-1-8-3-final-released/"&gt;Quarkus 1.8.3.Final&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;a href="https://infinispan.org/"&gt;Infinispan&lt;/a&gt; team have announced the release of &lt;a href="https://infinispan.org/blog/2020/09/08/infinispan-12/"&gt;Infinispan 12.0.0.Dev03&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;p&gt;That’s all for this episode of the JBoss Editorial, please join us for our next edition when we will take another spin through the JBoss Community Projects in search of more interesting news and articles.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="author"&gt; &lt;pfe-avatar pfe-shape="circle" pfe-pattern="squares" pfe-src="/img/people/kevin-conner.png"&gt;&lt;/pfe-avatar&gt; &lt;span&gt;Kevin Conner&lt;/span&gt; &lt;/div&gt;&lt;/article&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/5GXzz1yjfMk" height="1" width="1" alt=""/&gt;</content><summary>This week in JBoss - 12th October 2020 Welcome to another edition of the JBoss Editorial where we bring you articles and news from across the JBoss Community of projects Creating a Payments Architecture With Cloud technologies changing the way we architect and deliver software Eric has been taking a look at how these technologies will apply to the Payment Services industry. In the next two posts f...</summary><dc:creator>Kevin Conner</dc:creator><dc:date>2020-10-12T00:00:00Z</dc:date><feedburner:origLink>https://www.jboss.org/posts/weekly-2020-10-12.html</feedburner:origLink></entry><entry><title>Kamelets</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/nSEo7f9PbZY/" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_nicolaferraro" scheme="searchisko:content:tags" /><category term="JBoss Fuse" scheme="searchisko:content:tags" /><category term="Knative" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="serverless" scheme="searchisko:content:tags" /><author><name>Nicola Ferraro</name></author><id>searchisko:content:id:jbossorg_blog-kamelets</id><updated>2020-10-12T16:00:00Z</updated><published>2020-10-11T22:00:00Z</published><content type="html">&lt;p&gt;Kamelets are the most important feature released with Apache Camel K 1.2.0. Apart from their cool name, Kamelets represent a significant change in the whole Camel ecosystem, because they introduce new ways of using Apache Camel in the cloud and a novel approach for contributing new connectors.&lt;/p&gt; &lt;h2 id="what-is-a-kamelet"&gt;What is a Kamelet?&lt;/h2&gt; &lt;p&gt;A Kamelet is a “&lt;strong&gt;Kamel&lt;/strong&gt; Route Snipp&lt;strong&gt;et&lt;/strong&gt;”. Before going into the details of what this actually means, let’s make a step backward to add some background context.&lt;/p&gt; &lt;p&gt;Traditionally, the building blocks of Apache Camel have always been the &lt;strong&gt;components&lt;/strong&gt;. Camel users can write complex routes by leveraging the 350+ components that are available in Apache Camel. It’s not a fixed pool: Camel developers and contributors are constantly increasing the collection of supported components at each new release.&lt;/p&gt; &lt;p&gt;This model has worked very well for all these years and it will continue to work. But it &lt;strong&gt;misses an important feature&lt;/strong&gt; that we want to cover with Kamelets: the &lt;strong&gt;ability to abstract&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;In Camel, if I want to publish a tweet in response to a Knative event, I’d do something like this:&lt;/p&gt; &lt;div class="language-groovy highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'knative:event/public.post'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'twitter-timeline://user'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Every time some application sends an event of type “public.post” to the Knative broker, that event is published in my Twitter timeline.&lt;/p&gt; &lt;p&gt;As a user, I don’t care about what the “twitter-timeline” component is doing under the covers: it may contact a single API, or more than one, or it may establish several connections to various systems using strange protocols. I’m only interested in the result.&lt;/p&gt; &lt;p&gt;Now, being an enterprise user, I would like to do a similar thing with my own systems and create a new component to add an item to the inventory of my e-commerce application. I decide to create a new component named &lt;strong&gt;“company-inventory”&lt;/strong&gt; that provides an &lt;strong&gt;“add”&lt;/strong&gt; endpoint to implement such feature. So:&lt;/p&gt; &lt;div class="language-groovy highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'knative:event/new.item'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'company-inventory://add'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// easy, but now try to implement it&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Now it’s time to implement the “company-inventory” component. When adding an item to the inventory, &lt;em&gt;we need to call an HTTP API to get the ID of the actual item type, call another API if the ID is not already present, in order to create a new one, then a third API to add the item, then add another event to a third-party Kafka topic to synchronize downstream services&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Easy?&lt;/strong&gt; Of course, with Apache Camel. But guess what? &lt;strong&gt;You can’t use Apache Camel when writing a new component&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;True. Developers who contribute code to Apache Camel usually adapt existing libraries to the Camel APIs, but they can’t leverage existing components. There’s been an attempt in Camel 2.x to bring such possibility with the &lt;a href="https://camel.apache.org/components/2.x/routebox-component.html"&gt;Routebox component&lt;/a&gt;, but it was not intuitive in some parts and missed a good delivery model, so it wasn’t widely used and it was finally removed in 3.x in favor of this new idea of Kamelets.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Kamelets come to the rescue&lt;/strong&gt;. With Kamelets you can encapsulate the logic to connect to a specific system into &lt;a href="https://camel.apache.org/manual/latest/route-template.html"&gt;&lt;strong&gt;route templates&lt;/strong&gt; (new feature of Camel 3.5.0)&lt;/a&gt;. And guess what? &lt;strong&gt;Kamelets are made of pure Camel DSL&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;Kamelets are Kubernetes resources. We’ll see shortly how to write them. As any Kubernetes resource, you can write a Kamelet into a file and install it on a cluster using Kubectl:&lt;/p&gt; &lt;p&gt;&lt;em&gt;company-inventory-add.kamelet.yaml&lt;/em&gt;&lt;/p&gt; &lt;div class="language-yaml highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt; &lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;camel.apache.org/v1alpha1&lt;/span&gt; &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Kamelet&lt;/span&gt; &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;company-inventory-add&lt;/span&gt; &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# ...&lt;/span&gt; &lt;span class="c1"&gt;# The Kamelet will declare all accepted parameters&lt;/span&gt; &lt;span class="c1"&gt;# in JSON-schema format.&lt;/span&gt; &lt;span class="c1"&gt;# &lt;/span&gt; &lt;span class="c1"&gt;# Skipping the details here.&lt;/span&gt; &lt;span class="c1"&gt;# ...&lt;/span&gt; &lt;span class="na"&gt;flow&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Here's the route&lt;/span&gt; &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="na"&gt;uri&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;kamelet:source"&lt;/span&gt; &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;http://first-endpoint"&lt;/span&gt; &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;https://second-endpoint/{{itemType}}"&lt;/span&gt; &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;choice&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# ...&lt;/span&gt; &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;kafka:downstream"&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;I’m not going into the details of how to write a Kamelet, that is &lt;a href="https://camel.apache.org/camel-k/latest/kamelets/kamelets.html"&gt;covered in the Camel K user guide about Kamelets&lt;/a&gt;. We need just to know that:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;A Kamelet exposes a well defined JSON-schema interface, that documents its purpose and defines the accepted parameters.&lt;/li&gt; &lt;li&gt;A Kamelet can be a source of data or a sink (consumer or producer, in the Camel jargon). The “company-inventory-add” Kamelet is a sink.&lt;/li&gt; &lt;li&gt;A Kamelet defines what Camel code should be executed when the Kamelet is used inside an integration: the code is expressed as route template that can use properties (e.g. “{{itemType}}”)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can install the Kamelet on a namespace by simply executing:&lt;/p&gt; &lt;div class="language-shell highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;kubetctl apply &lt;span class="nt"&gt;-f&lt;/span&gt; company-inventory-add.kamelet.yaml &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Once done so, the Kamelet becomes available in all integrations that are deployed in the same Kubernetes namespace. So you can write a route like this to use the Kamelet:&lt;/p&gt; &lt;p&gt;&lt;em&gt;example.groovy&lt;/em&gt;&lt;/p&gt; &lt;div class="language-groovy highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'knative:event/new.item'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'kamelet://company-inventory-add?itemType=grocery'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// implementing this is much simpler&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;And run it with:&lt;/p&gt; &lt;div class="language-shell highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;kamel run example.groovy &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;The logic about what it means to add an inventory item is encapsulated in the Kamelet (multiple HTTP calls, enterprise integration patterns and sync with Kafka), that can be shared among all other integrations. And it’s all &lt;strong&gt;Camel DSL&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;This is only a simple example of what a Kamelet can do, there are many more interesting use cases out there.&lt;/p&gt; &lt;h2 id="what-about-knative-sources"&gt;What about Knative sources?&lt;/h2&gt; &lt;p&gt;The first time we thought about Kamelets was in the context of &lt;a href="https://knative.dev/docs/eventing/sources/"&gt;Knative Eventing sources&lt;/a&gt;. It was the end of 2018, believe it or not. We thought that they could really make the difference in that space, but we were not ready for the leap.&lt;/p&gt; &lt;p&gt;We are currently providing &lt;a href="https://knative.dev/docs/eventing/samples/apache-camel-source/"&gt;CamelSources&lt;/a&gt; in Knative, and they are really cool because they &lt;em&gt;allow users to write a small piece of Camel DSL&lt;/em&gt; to produce any kind of event, taking data from any system that Camel supports.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;So, what’s wrong with CamelSources?&lt;/strong&gt; They are really cool from my point of view. But the problem is that Knative users are usually &lt;strong&gt;not&lt;/strong&gt; Camel users. As a Camel user, I can write a piece of Camel DSL in a few minutes and make it work. But people with a background in Go or Python… they don’t even know what Camel actually is.&lt;/p&gt; &lt;p&gt;But that’s where a Kamelet can help.&lt;/p&gt; &lt;p&gt;Camel developers and passionate contributors will write the Camel DSL, creating “connectors” for external sources using the language of Kamelets. In future versions of Camel K, we’ll create a &lt;strong&gt;catalog of curated Kamelets&lt;/strong&gt; that will be installed together with Camel K. Those Kamelets will be available to anyone who installs Camel K on a Kubernetes cluster.&lt;/p&gt; &lt;p&gt;&lt;img src="/images/kamelets-binding.png" alt="kamelet-binding" class="align-center" /&gt;&lt;/p&gt; &lt;p&gt;Without any knowledge of Apache Camel, people can list the catalog of the available Kamelets with standard Kubernetes tools:&lt;/p&gt; &lt;div class="language-shell highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get kamelets NAME inventory-source twitter-source slack-source telegram-source ... &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Kamelets declare the list of expected parameters using a JSON-schema format, so it will be easy to check them and provide values.&lt;/p&gt; &lt;p&gt;Users can then decide to use a Kamelet e.g. to push some twitter data into the Knative broker. To do so, they can create a &lt;strong&gt;KameletBinding&lt;/strong&gt;.&lt;/p&gt; &lt;div class="language-yaml highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;camel.apache.org/v1alpha1&lt;/span&gt; &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;KameletBinding&lt;/span&gt; &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;twitter-source-to-knative&lt;/span&gt; &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;camel.apache.org/v1alpha1&lt;/span&gt; &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Kamelet&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;twitter-source&lt;/span&gt; &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="na"&gt;keywords&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Apache Camel&lt;/span&gt; &lt;span class="na"&gt;sink&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;eventing.knative.dev/v1&lt;/span&gt; &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Broker&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;default&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;As you see, the final user will not need to know anything about Camel, only use the source.&lt;/p&gt; &lt;p&gt;Of course, the &lt;strong&gt;KameletBinding&lt;/strong&gt; resource is a wrapper for an Integration. I.e. under the hood the operator will create the Camel DSL corresponding to the binding, which is something like:&lt;/p&gt; &lt;div class="language-groovy highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;demonstration&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;don&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;generate&lt;/span&gt; &lt;span class="n"&gt;groovy&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;;)&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'kamelet:twitter-source?keywords=Apache+Camel'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'knative:event'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;This makes Kamelets available to different kind of users: Camel users and Knative users, with a different interface.&lt;/p&gt; &lt;h2 id="so-is-it-only-about-knative"&gt;So, is it only about Knative?&lt;/h2&gt; &lt;p&gt;Of course not: Kamelets are general purpose connectors, not directly linked to Knative.&lt;/p&gt; &lt;p&gt;If I want to send data from my Twitter Kamelet to a Kafka topic, I just need to create the following code and run it:&lt;/p&gt; &lt;div class="language-groovy highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'kamelet:twitter-source?keywords=Apache+Camel'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'kafka:topic'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;All Kamelets can be used to feed Kafka instead of Knative with the same exact approach. In fact, we’ve also extended the &lt;strong&gt;KameletBinding&lt;/strong&gt; mechanism to Kafka via &lt;a href="https://camel.apache.org/camel-k/latest/kamelets/kamelets.html#_binding_to_a_kafka_topic"&gt;Strimzi&lt;/a&gt;.&lt;/p&gt; &lt;h2 id="what-makes-kamelets-great"&gt;What makes Kamelets great?&lt;/h2&gt; &lt;p&gt;The main difference between a Kamelet and a Camel component is its purpose. While a component can serve several purposes by specifying different combinations of the parameters, &lt;strong&gt;Kamelets are driven by use cases&lt;/strong&gt;. A Kamelet can let you perform a specific action on a system or gather data from another system, with a limited degree of flexibility.&lt;/p&gt; &lt;p&gt;Reducing the scope helps designing CLI or &lt;strong&gt;UI tools&lt;/strong&gt; around them.&lt;/p&gt; &lt;p&gt;A Kamelet contains (see the &lt;a href="https://camel.apache.org/camel-k/latest/kamelets/kamelets.html#kamelets-specification"&gt;Kamelet specification&lt;/a&gt; for more details):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Title and description of the purpose of the Kamelet and how to use it&lt;/li&gt; &lt;li&gt;A nice icon&lt;/li&gt; &lt;li&gt;The set of expected parameters in JSON-schema format&lt;/li&gt; &lt;li&gt;The schema of the output they produce (or the input they require)&lt;/li&gt; &lt;li&gt;Implementation (Camel DSL)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Writing a UI that allows browsing the available Kamelets, configure them and bind them to a destination should be pretty easy.&lt;/p&gt; &lt;p&gt;There are many possible use cases:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;A specialized UI, e.g. in the OpenShift dev console, can let the user browse the available Kamelets and configure them via a graphical form to send data to a particular Knative destination&lt;/li&gt; &lt;li&gt;A second specialized UI about Kafka can include a section where the users can instantiate the Kamelets to bring data to a particular topic&lt;/li&gt; &lt;li&gt;Another platform, e.g. like &lt;a href="https://syndesis.io/"&gt;Syndesis&lt;/a&gt; can use the Kamelets to provide additional connectors for creating end-to-end integrations&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The great thing about Kamelets is that they are not bound to a spcific technology: they are reusable connectors.&lt;/p&gt; &lt;h2 id="try-them-out"&gt;Try them out!&lt;/h2&gt; &lt;p&gt;Camel K 1.2.0 has already been released, so, why don’t you try this new feature?&lt;/p&gt; &lt;p&gt;Feedback is welcome, as well as any kind of contribution!&lt;/p&gt; &lt;p&gt;Meet us on &lt;a href="https://camel.zulipchat.com/"&gt;Zulip&lt;/a&gt;!&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/nSEo7f9PbZY" height="1" width="1" alt=""/&gt;</content><summary>Kamelets are the most important feature released with Apache Camel K 1.2.0. Apart from their cool name, Kamelets represent a significant change in the whole Camel ecosystem, because they introduce new ways of using Apache Camel in the cloud and a novel approach for contributing new connectors. What is a Kamelet? A Kamelet is a “Kamel Route Snippet”. Before going into the details of what this actua...</summary><dc:creator>Nicola Ferraro</dc:creator><dc:date>2020-10-11T22:00:00Z</dc:date><feedburner:origLink>https://www.nicolaferraro.me/2020/10/12/kamelets/</feedburner:origLink></entry><entry><title>Apache Camel 3.6 - More camel-core optimizations coming (Part 4)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/fkJ7cCYUY6M/apache-camel-36-more-camel-core.html" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_clausibsen" scheme="searchisko:content:tags" /><category term="roadmap" scheme="searchisko:content:tags" /><author><name>Claus Ibsen</name></author><id>searchisko:content:id:jbossorg_blog-apache_camel_3_6_more_camel_core_optimizations_coming_part_4</id><updated>2020-10-09T09:32:31Z</updated><published>2020-10-09T09:32:00Z</published><content type="html">&lt;p&gt;I have previously blogged about the optimziations we are doing in the Apache Camel core. The first 3 blogs (&lt;a href="http://www.davsclaus.com/2020/01/apache-camel-31-more-camel-core.html" target="_blank"&gt;part1&lt;/a&gt;, &lt;a href="http://www.davsclaus.com/2020/01/apache-camel-31-more-camel-core_30.html" target="_blank"&gt;part2&lt;/a&gt;, &lt;a href="http://www.davsclaus.com/2020/02/apache-camel-31-more-camel-core.html" target="_blank"&gt;part3&lt;/a&gt;) were a while back leading up to the 3.4 LTS release.&lt;/p&gt;&lt;p&gt;Now we have done some more work that is coming in Camel 3.6 leading up to the next 3.7 LTS release.&lt;/p&gt;&lt;p&gt;To speedup startup we switched to a new uuid generator. The old (classic) generator was inherited from Apache ActiveMQ which needed to ensure its ids were unique in a network of brokers, and therefore to ensure this the generator was using the hostname as prefix in the id. This required on startup to do a network access to obtain this information which costs a little time. Also depending on networks this can be more restrictive and delay the startup. The new generator is a pure in-memory fast generator that was used by Camel K and Camel Quarkus.&lt;/p&gt;&lt;p&gt;We also identified a few other spots during route initialization. For example one small change was to avoid doing some regular expression masking on route endpoints which wasn't necessary anymore.&lt;/p&gt;&lt;p&gt;Now the bigger improvements are in the following areas&lt;/p&gt;&lt;p&gt;&lt;b&gt;Avoid throwing exceptions&lt;/b&gt;&lt;/p&gt;&lt;p&gt;We identified on spring runtimes that Camel would query the spring bean registry for known beans by id, which the Spring framework would throw a NoSuchBeanDefinitionException if the bean is not present. As Camel does a bit of optional bean discovery during bootstrap, we found a way to avoid this which prevents this.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Singleton languages&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Another related problem is that in Camel 3 due to the modularization then some of the languages (bean, simple, and others) have been changed from being a singleton to prototype scoped. This is in fact one of the biggest problems and we had a Camel user report a problem with thread contention in a high concurrent use-case would race for resolving languages (they are prototype scoped). So you would have this problem, and because the language resolver would query the registry first then Spring would throw that no such bean exception, and then Camel would resolve the language via its own classpath resolver. So all together this cost performance. We can see this in the screenshots from the profiler in the following.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-Z1cfZX4UPfI/X4AnjnSnc5I/AAAAAAAACTU/XqQSfdCpd2wvI_0KXgyY7w6IovlRBbTGgCLcBGAsYHQ/s2482/350-blocked.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="1068" data-original-width="2482" src="https://1.bp.blogspot.com/-Z1cfZX4UPfI/X4AnjnSnc5I/AAAAAAAACTU/XqQSfdCpd2wvI_0KXgyY7w6IovlRBbTGgCLcBGAsYHQ/s320/350-blocked.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-6g2ysd-nAAE/X4Anjqjjn7I/AAAAAAAACTY/CHXzTVx2uqkAtaJ1D5ESolGci-PHnRN8ACLcBGAsYHQ/s2388/360-blocked.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="840" data-original-width="2388" src="https://1.bp.blogspot.com/-6g2ysd-nAAE/X4Anjqjjn7I/AAAAAAAACTY/CHXzTVx2uqkAtaJ1D5ESolGci-PHnRN8ACLcBGAsYHQ/s320/360-blocked.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;p&gt;The top screenshot is using Camel 3.5 and the bottom 3.6. In the top we can see the threads are blocked in Camels resolveLanguage method. And in 3.6 then its actually the log4j logger that is blocking for writing to the log file. Both applications are using the same Camel application and have been running for about 8 minutes.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Reduce object allocations&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The next screenshots are showing a sample of the object allocations.&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-qgdNqOhKbyo/X4AoUiYZ-_I/AAAAAAAACTg/0QaLtbYwtSor8Xv6s2Q18yIxa6GfabqCgCLcBGAsYHQ/s2046/350-allocations.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="544" data-original-width="2046" src="https://1.bp.blogspot.com/-qgdNqOhKbyo/X4AoUiYZ-_I/AAAAAAAACTg/0QaLtbYwtSor8Xv6s2Q18yIxa6GfabqCgCLcBGAsYHQ/s320/350-allocations.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-bFRCi1trEBE/X4AoUgq3H6I/AAAAAAAACTk/plymeUJZZ8Y7DW91zBobjtW-GW0qQbKvQCLcBGAsYHQ/s1846/360-allocations.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="534" data-original-width="1846" src="https://1.bp.blogspot.com/-bFRCi1trEBE/X4AoUgq3H6I/AAAAAAAACTk/plymeUJZZ8Y7DW91zBobjtW-GW0qQbKvQCLcBGAsYHQ/s320/360-allocations.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;p&gt;With Camel 3.5 we are average about 1000 obj/sec and with 3.6 we are down to about a 1/3th.&lt;/p&gt;&lt;p&gt;One of the improvements to help reduce the object allocations was how parameters to languages was changed from using a Map to a plain object array. The Map takes up more memory and object allocations than a single fixed object array.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Do as much init as possible&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Another performance improvement that aids during runtime was that we moved as much we could from the evaluation to the initialization phase in the Camel languages (simple, bean, etc.). We did this by introducing the init phase and ensuring CamelContext was carried around in the interns so we can use the context during the init phase, where its really needed. This ensures the runtime evaluation is as fast as possible.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Other smaller optimizations&lt;/b&gt;&lt;/p&gt;&lt;p&gt;We also improved the simple language to be a bit smarter in its binary operators (such as header.foo &amp;gt; 100). Now the simple language has stronger types for numeric and boolean types during its parsing, which allows us to know better from the right and left hand side of the binary operator to do type coercion so the types are comparable by the JVM. Before we may end up with falling back to converting to string types on both sides. And there is more to come, I have some ideas how to work on a compiled simple language.&lt;/p&gt;&lt;p&gt;The screenshots below shows a chart with the CPU, object allocations and thrown exceptions.&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-bkWON32w2NE/X4ArD16CGII/AAAAAAAACT4/HGhG-t_A6HoUPTNCx_LxvhXf_6X8cH2FQCLcBGAsYHQ/s2048/350-performance.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="1047" data-original-width="2048" src="https://1.bp.blogspot.com/-bkWON32w2NE/X4ArD16CGII/AAAAAAAACT4/HGhG-t_A6HoUPTNCx_LxvhXf_6X8cH2FQCLcBGAsYHQ/s320/350-performance.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-PGPnX2alJNw/X4ArD3d7l3I/AAAAAAAACT0/Q8g-4MMhCG8yr6dPwvmMHcsw7If04E6gACLcBGAsYHQ/s2232/360-performance.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="936" data-original-width="2232" src="https://1.bp.blogspot.com/-PGPnX2alJNw/X4ArD3d7l3I/AAAAAAAACT0/Q8g-4MMhCG8yr6dPwvmMHcsw7If04E6gACLcBGAsYHQ/s320/360-performance.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;p&gt;As we can see this summarise what was mentioned was done to optimize. The number of exceptions has been reduced to 0 at runtime. There is about 3500 thrown during bootstrap (that is Java JAXB which is used for loading the spring XML file with the Camel routes used for the sample application). We do have a &lt;a href="http://www.davsclaus.com/2020/03/apache-camel-31-fast-loading-of-xml.html" target="_blank"&gt;fast XML loader&lt;/a&gt; in Camel that is not using JAXB.&lt;/p&gt;&lt;p&gt;Another improvement we did was to build a source code generator for a new UriFactory which allows each component to quickly build dynamic endpoint URIs from a Map of parameters. The previous solution was to use RuntimeCamelCatalog that was more generic and required loading component metadata from json descriptor files. A few components use this to optimize the toD (such as http components). By this change we avoid the runtime catalog as dependency (reduce JAR size) and the source code generated uri factory is much faster (its speedy plain Java). However the sample application used for this blog did not use toD nor the UriFactory.&lt;/p&gt;&lt;p&gt;Apache Camel 3.6 is scheduled for release later this month of October. It's going to be the fastest Camel ever ;)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=s7G7E1djXZM:clqBe53SGjc:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=s7G7E1djXZM:clqBe53SGjc:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=s7G7E1djXZM:clqBe53SGjc:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=s7G7E1djXZM:clqBe53SGjc:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=s7G7E1djXZM:clqBe53SGjc:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=s7G7E1djXZM:clqBe53SGjc:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=s7G7E1djXZM:clqBe53SGjc:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ApacheCamel/~4/s7G7E1djXZM" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/fkJ7cCYUY6M" height="1" width="1" alt=""/&gt;</content><summary>I have previously blogged about the optimziations we are doing in the Apache Camel core. The first 3 blogs (part1, part2, part3) were a while back leading up to the 3.4 LTS release. Now we have done some more work that is coming in Camel 3.6 leading up to the next 3.7 LTS release. To speedup startup we switched to a new uuid generator. The old (classic) generator was inherited from Apache ActiveMQ...</summary><dc:creator>Claus Ibsen</dc:creator><dc:date>2020-10-09T09:32:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/ApacheCamel/~3/s7G7E1djXZM/apache-camel-36-more-camel-core.html</feedburner:origLink></entry><entry><title>Static analysis with KubeAudit for Red Hat OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Ib3GHDxqQ0w/" /><category term="DevOps" /><category term="Kubernetes" /><category term="Microservices" /><category term="jq json" /><category term="KubeAudit" /><category term="kubernetes manifest" /><category term="openshift" /><category term="static analyzer" /><author><name>Sean Pryor</name></author><id>https://developers.redhat.com/blog/?p=788447</id><updated>2020-10-09T07:00:20Z</updated><published>2020-10-09T07:00:20Z</published><content type="html">&lt;p&gt;In this article, we introduce a new utility for developers who want to ensure that their code transitions cleanly from upstream &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; to &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;. &lt;a target="_blank" rel="nofollow" href="https://github.com/AICoE/OpenShiftKubeAudit"&gt;OpenShiftKubeAudit&lt;/a&gt; (KubeAudit) is a static analyzer that semantically checks a user&amp;#8217;s code for known incompatibilities so you can fix them before bringing the code into OpenShift. KubeAudit is also simple to use and easy to extend.&lt;/p&gt; &lt;h2&gt;Running an audit&lt;/h2&gt; &lt;p&gt;This being the first release, KubeAudit currently offers only a handful of audits, but they&amp;#8217;re easy to write. We&amp;#8217;re looking for feedback and additional use cases from the community to help make the tool more comprehensive.&lt;/p&gt; &lt;p&gt;&lt;span id="more-788447"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;To start, find &lt;a target="_blank" rel="nofollow" href="https://github.com/AICoE/OpenShiftKubeAudit"&gt;KubeAudit&lt;/a&gt; on GitHub.&lt;/p&gt; &lt;p&gt;You&amp;#8217;ll want to clone the git repo somewhere on the same machine where the manifests to audit reside, and set up a Python virtual environment:&lt;/p&gt; &lt;pre&gt;$ git clone https://github.com/AICoE/OpenShiftKubeAudit.git $ cd OpenShiftKubeAudit $ python3 -m virtualenv venv $ source venv/bin/activate $ python3 -m pip install -r requirements.txt&lt;/pre&gt; &lt;p&gt;Now, let&amp;#8217;s run the auditing tool:&lt;/p&gt; &lt;pre&gt;$ ./audit.py /path/to/yaml/directory&lt;/pre&gt; &lt;p&gt;It should produce similar output to this:&lt;/p&gt; &lt;pre&gt;$ ./audit.py ./testaudits Audit Results: Issue: Pod Security Policies in manifests Severity: 1 - High Resolution: In OpenShift PodSecurityPolicies are replaced by SecurityContextConstraints. See https://docs.openshift.com/container-platform/4.5/authentication/managing-security-context-constraints.html Affected Files: Matched regex: testaudits/yaml/PodSecurityPolicies.yaml Issue: NetworkPolicy has an IPBlock Severity: 2 - Medium Resolution: The Kubernetes v1 NetworkPolicy features are available in OpenShift Container Platform except for egress policy types and IPBlock. Affected Files: Matched regex: testaudits/yaml/NetworkPolicies.yaml Issue: Egress network policy set Severity: 2 - Medium Resolution: The Kubernetes v1 NetworkPolicy features are available in OpenShift Container Platform except for egress policy types and IPBlock. Affected Files: Matched regex: testaudits/yaml/NetworkPolicies.yaml&lt;/pre&gt; &lt;p&gt;Now with these issues identified, a developer could fix them before they become issues in production. However, since the tool is new, there are many use cases that have not yet been identified, which is why the tool is easy to extend.&lt;/p&gt; &lt;h2&gt;Adding a custom audit&lt;/h2&gt; &lt;p&gt;KubeAudit uses a simple initialization (INI) syntax to define an audit with a few fields:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: A name or title to identify the audit.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Query (optional)&lt;/strong&gt;: This is a &lt;a target="_blank" rel="nofollow" href="https://stedolan.github.io/jq/"&gt;jq-syntax query&lt;/a&gt;, which the auditing tool uses for semantic analysis of parts of a manifest. Note that the &lt;code&gt;query&lt;/code&gt; is optional if you are using &lt;code&gt;regex&lt;/code&gt;. This type of query is useful when you need a more comprehensive analysis.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Regex (optional)&lt;/strong&gt;: You can specify a &lt;code&gt;regex&lt;/code&gt; to search for in each file. Although &lt;code&gt;regex&lt;/code&gt; is a simpler check than &lt;code&gt;query&lt;/code&gt;, the utility can ignore &lt;code&gt;regex&lt;/code&gt;es found in the code comments.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Regexes section (optional)&lt;/strong&gt;: Use this section when you need multiple &lt;code&gt;regex&lt;/code&gt;es. Once again, the utility ignores &lt;code&gt;regex&lt;/code&gt; matches found in comments, and it matches the results in the order that they appear. If all of the &lt;code&gt;regex&lt;/code&gt;es are found in the corresponding order, it is considered a match.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Severity&lt;/strong&gt;: This message indicates the relative severity of the issue. It needs to start with a number, and can then be followed by a text description of the severity.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Message&lt;/strong&gt;: The diagnostic message to output to the user.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Below is an example audit:&lt;/p&gt; &lt;pre&gt;[Default] # The name/title of the issue, e.g., "Pod Security Policies in manifests" name = RunAsUser is set outside range, has some known issues # A jq-syntax query to be applied to the yaml files. The query must return # either True or False, but can be otherwise any valid jq string query = ((.. | .runAsUser? | numbers) != 0) and ((.. | .runAsUser? | numbers) &amp;#60; 10000000 or (.. | .runAsUser? | numbers) &amp;#62; 20000000) # Python-compatible regex to search for. The script automatically ignores # commented lines regex = runAsUser: # Severity to help the user prioritize fixes severity = 4 - Warning # Message to output to the user, usually a resolution or more information message = Setting runAsUser ID explicitly is not recommended. Additionally setting runAsUser explicitly outside of the expected range in OpenShift (10000000 - 20000000) has known incompatibilities # This section can be used to construct a multiline regex for the files. # Each regex is searched for in the order that it appears and automatically # ignores comments. Any number of regexes can be added this way [regexes] regex1 = regex2 = &lt;/pre&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;This auditing tool currently only supports Kubernetes manifests, but we plan to expand it to include &lt;a href="https://developers.redhat.com/blog/2020/07/20/advanced-helm-support-in-the-openshift-4-5-web-console/"&gt;Helm charts&lt;/a&gt; and &lt;a href="https://developers.redhat.com/blog/category/go/"&gt;Go code&lt;/a&gt;, as well. The tool is in very early stages, but is looking for community input to help add use cases.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F09%2Fstatic-analysis-with-kubeaudit-for-red-hat-openshift%2F&amp;#38;linkname=Static%20analysis%20with%20KubeAudit%20for%20Red%20Hat%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F09%2Fstatic-analysis-with-kubeaudit-for-red-hat-openshift%2F&amp;#38;linkname=Static%20analysis%20with%20KubeAudit%20for%20Red%20Hat%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F09%2Fstatic-analysis-with-kubeaudit-for-red-hat-openshift%2F&amp;#38;linkname=Static%20analysis%20with%20KubeAudit%20for%20Red%20Hat%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F09%2Fstatic-analysis-with-kubeaudit-for-red-hat-openshift%2F&amp;#38;linkname=Static%20analysis%20with%20KubeAudit%20for%20Red%20Hat%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F09%2Fstatic-analysis-with-kubeaudit-for-red-hat-openshift%2F&amp;#38;linkname=Static%20analysis%20with%20KubeAudit%20for%20Red%20Hat%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F09%2Fstatic-analysis-with-kubeaudit-for-red-hat-openshift%2F&amp;#38;linkname=Static%20analysis%20with%20KubeAudit%20for%20Red%20Hat%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F09%2Fstatic-analysis-with-kubeaudit-for-red-hat-openshift%2F&amp;#38;linkname=Static%20analysis%20with%20KubeAudit%20for%20Red%20Hat%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F09%2Fstatic-analysis-with-kubeaudit-for-red-hat-openshift%2F&amp;#038;title=Static%20analysis%20with%20KubeAudit%20for%20Red%20Hat%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2020/10/09/static-analysis-with-kubeaudit-for-red-hat-openshift/" data-a2a-title="Static analysis with KubeAudit for Red Hat OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/09/static-analysis-with-kubeaudit-for-red-hat-openshift/"&gt;Static analysis with KubeAudit for Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Ib3GHDxqQ0w" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In this article, we introduce a new utility for developers who want to ensure that their code transitions cleanly from upstream Kubernetes to Red Hat OpenShift. OpenShiftKubeAudit (KubeAudit) is a static analyzer that semantically checks a user&amp;#8217;s code for known incompatibilities so you can fix them before bringing the code into OpenShift. KubeAudit is also [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/09/static-analysis-with-kubeaudit-for-red-hat-openshift/"&gt;Static analysis with KubeAudit for Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/10/09/static-analysis-with-kubeaudit-for-red-hat-openshift/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">788447</post-id><dc:creator>Sean Pryor</dc:creator><dc:date>2020-10-09T07:00:20Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/09/static-analysis-with-kubeaudit-for-red-hat-openshift/</feedburner:origLink></entry><entry><title>Migrating C and C++ applications from Red Hat Enterprise Linux version 7 to version 8</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/QFKrisKVNwo/" /><category term="C" /><category term="C++" /><category term="Linux" /><category term="Programming Languages" /><category term="application migration" /><category term="binary interface" /><category term="rhel 7" /><category term="rhel 8" /><category term="share libraries" /><author><name>Thomas Rodgers</name></author><id>https://developers.redhat.com/blog/?p=782477</id><updated>2020-10-08T07:00:22Z</updated><published>2020-10-08T07:00:22Z</published><content type="html">&lt;p&gt;When moving an application that you&amp;#8217;ve compiled on &lt;a href="https://developers.redhat.com/topics/linux"&gt;Red Hat Enterprise Linux&lt;/a&gt; (RHEL) 7 to RHEL 8, you will likely encounter issues due to changes in the application binary interface (ABI). The ABI describes the low-level binary interface between an application and its operating environment. This interface requires tools such as compilers and linkers, as well as the produced runtime libraries and the operating system itself, to agree upon the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The application&amp;#8217;s data type, size, and alignment.&lt;/li&gt; &lt;li&gt;The calling conventions, which define how function arguments are passed and how return values are retrieved.&lt;/li&gt; &lt;li&gt;The function and symbol names and their versions.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;As the toolchain and operating environment evolve with successive versions of Red Hat Enterprise Linux, the details of the ABI will change. Red Hat makes certain guarantees regarding application compatibility between releases. Those guarantees are outlined in the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/articles/rhel-abi-compatibility"&gt;RHEL 7 Application Compatibility Guide&lt;/a&gt; (ACG) and the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/articles/rhel8-abi-compatibility"&gt;RHEL 8 Application Compatibility Guide&lt;/a&gt;. This article is a companion to the ACG guides.&lt;/p&gt; &lt;h2&gt;Migrating compatible C and C++ applications&lt;/h2&gt; &lt;p&gt;The most straightforward way to avoid compatibility problems when migrating your &lt;a href="https://developers.redhat.com/topics/c"&gt;C and C++&lt;/a&gt; application code from RHEL 7 to RHEL 8 is to rebuild the code on RHEL 8. Users can leverage a containerized or virtualized environment to build and test in a RHEL 8 environment on a RHEL 7 system before migrating to the newer version.&lt;/p&gt; &lt;p&gt;In some cases, it might be possible to deploy C and C++ applications built on RHEL 7 to RHEL 8 without first rebuilding. If you&amp;#8217;ve followed the guidance in the RHEL 7 ACG, and depend only on the C and C++ libraries in &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/articles/rhel-abi-compatibility#Appendix"&gt;compatibility level 1 (CL1)&lt;/a&gt;, then Red Hat provides a compatible version of those libraries in RHEL 8. Indeed, we maintain stable versions of those libraries for three major RHEL releases. Note, however, that there are no guarantees that RHEL 8 will provide RHEL 7-compatible libraries beyond CL1.&lt;/p&gt; &lt;h2&gt;Migrating shared libraries&lt;/h2&gt; &lt;p&gt;Unless a C application loads shared libraries via &lt;code&gt;dlopen()&lt;/code&gt;, the &lt;code&gt;ldd&lt;/code&gt; command shows what libraries a given application depends on (in the case of &lt;code&gt;dlopen()&lt;/code&gt;, you can use &lt;code&gt;LD_DEBUG=all my_application&lt;/code&gt; or the &lt;code&gt;strace&lt;/code&gt; command to observe which libraries are being loaded). However, shared libraries for C++ applications are more complicated and restricted.&lt;/p&gt; &lt;h3&gt;C++ ABI incompatibility between RHEL 7 and RHEL 8&lt;/h3&gt; &lt;p&gt;C++ libraries from RHEL 7 are likely to be incompatible with the corresponding libraries from RHEL 8. The reason is that the system compiler for RHEL 8 uses a new ABI for C++ code, which is different from the ABI used by the RHEL 7 system compiler. The RHEL 7 version of the C++ libraries uses the old ABI, whereas the RHEL 8 version uses the new one. Applications linked to an RHEL 7 version of a C++ library cannot use the RHEL 8 version of that library. The only C++ libraries that are in ACG CL1 are the C++ standard library (&lt;code&gt;libstdc++&lt;/code&gt;) and Thread Building Blocks libraries (&lt;code&gt;libtbb&lt;/code&gt; and &lt;code&gt;libtbbmalloc&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;Changes in the C++ ABI between RHEL 7 and RHEL 8 are due to introducing new versions of &lt;code&gt;std::string&lt;/code&gt; and &lt;code&gt;std::list&lt;/code&gt; in the C++ standard library. For details about the changes to the &lt;code&gt;std::string&lt;/code&gt; ABI, see Jason Merril&amp;#8217;s article, &lt;a href="https://developers.redhat.com/blog/2015/02/05/gcc5-and-the-c11-abi/"&gt;GCC5 and the C++11 ABI&lt;/a&gt;. The changes to the C++ ABI apply to all language modes, so it doesn&amp;#8217;t matter whether you are compiling for &lt;code&gt;-std=c++11&lt;/code&gt; or any other &lt;code&gt;-std&lt;/code&gt; option.&lt;/p&gt; &lt;h3&gt;Workarounds that do not work&lt;/h3&gt; &lt;p&gt;If your application code depends on libraries not in ACG CL1, it might be tempting to simply copy those other binary dependencies over; however, this is neither supported nor likely to work. It might also be tempting to statically link all dependencies on RHEL 7 and deploy to RHEL 8. Statically linking &lt;code&gt;glibc&lt;/code&gt; prevents some features from functioning, so this option is also unsupported and not recommended by Red Hat. It is possible to statically link to &lt;code&gt;libstdc++&lt;/code&gt;, but doing that shouldn&amp;#8217;t be necessary. The &lt;code&gt;libstdc++.so.6&lt;/code&gt; that shipped with RHEL 8 is backward compatible. Statically linking to other C++ libraries could be a solution if the versions of those libraries on RHEL 8 are incompatible with the RHEL 7 versions.&lt;/p&gt; &lt;h3&gt;Build guidance&lt;/h3&gt; &lt;p&gt;Finally, the ACG provides a recommended approach to building applications on RHEL 7 that will run on RHEL 8. This essentially means building your application against your own version(s) of library dependencies outside of those specifically listed in ACG CL1, rather than those provided by the base system. See the ACG for guidance on providing compatibility libraries for applications that have been built with libraries that are outside of the desired compatibility level.&lt;/p&gt; &lt;h2&gt;Frequently asked questions (F.A.Q.)&lt;/h2&gt; &lt;p&gt;Before closing, I&amp;#8217;ll answer the most pertinent questions that we&amp;#8217;ve received since releasing RHEL 8.&lt;/p&gt; &lt;h3&gt;Q: What does Red Hat recommend if I want to deploy an application on RHEL 8? Where should I build my application?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: The most straightforward way to avoid compatibility problems is to build your application on RHEL 8.&lt;/p&gt; &lt;h3&gt;Q: Can I build my application on RHEL 7 and deploy it on RHEL 8?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: Yes, if you follow the guidance in the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/articles/rhel-abi-compatibility"&gt;Application Compatibility Guide&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Whether a given application built on RHEL 7 can be deployed on RHEL 8 depends on the system libraries the application is linked with. For libraries within the RHEL 7 ACG&amp;#8217;s CL1, a compatible version of the library is provided in RHEL 8. For all other libraries, there is no guarantee that RHEL 8 provides a compatible version.&lt;/p&gt; &lt;p&gt;For C++ libraries, this advice is not hypothetical, as C++ libraries from RHEL 7 are likely to be incompatible with the corresponding libraries from RHEL 8. To build applications on RHEL 7 that will run on RHEL 8, the ACG suggests the following:&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Provide compatibility libraries for applications that have been built with libraries that are not at the desired compatibility level.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;In other words, build your application against your own version of the libraries, rather than the RHEL 7 versions. That way, your application depends on a library that you control, not one that belongs to RHEL, and will be incompatible between major releases.&lt;/p&gt; &lt;h3&gt;Q: Why are C++ libraries built with the system compiler on RHEL 7 not compatible with RHEL 8?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: The system compiler on RHEL 8 uses a new ABI for C++ code, which is different from the ABI used by the RHEL 7 system compiler. The RHEL 7 versions of C++ libraries use the old ABI, and the RHEL 8 versions use the new one. Applications linked to the RHEL 7 version of a C++ library will not be able to use the RHEL 8 version of that library.&lt;/p&gt; &lt;h3&gt;Q: What has changed in the C++ compiler and libraries to cause ABI incompatibilities between RHEL 7 and 8?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: Starting with RHEL 8, new versions of the &lt;code&gt;std::string&lt;/code&gt; and &lt;code&gt;std::list&lt;/code&gt; types are defined in the C++ standard library. As a result, C++ binaries (applications and libraries) built on RHEL 7 could fail to link with C++ binaries built on RHEL 8—or they might link successfully but fail at runtime.&lt;/p&gt; &lt;h3&gt;Q: If I want to build a C++ application on RHEL 8, do I need to compile with &lt;code&gt;-std=c++11&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: No. The changes to the C++ ABI apply to all language modes, whether you compile with &lt;code&gt;-std=c++11&lt;/code&gt; or &lt;code&gt;-std=c++98&lt;/code&gt; or any other &lt;code&gt;-std&lt;/code&gt; option.&lt;/p&gt; &lt;h3&gt;Q: Can I fix library ABI compatibility problems by copying shared libraries from RHEL 7 over to RHEL 8?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: Copying a RHEL 7 library to RHEL 8 might work, but Red Hat does not support it. There are downsides of copying RHEL 7 libraries to RHEL 8, such as the library not being automatically updated by &lt;code&gt;yum&lt;/code&gt;/&lt;code&gt;dnf&lt;/code&gt; when Red Hat issues an erratum for the package to fix bugs or security flaws.&lt;/p&gt; &lt;h3&gt;Q: I built my application on RHEL 6, and it ran fine on RHEL 7. Will my application work on RHEL 8 as well?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: It depends. If the application only uses libraries from CL1 in the RHEL 6 ACG, then it should work on RHEL 8 because those libraries are stable for three major releases (RHEL versions 6, 7, and 8). If the application uses RHEL 6 libraries that are outside of CL1, but which still happen to work on RHEL 7, it might also run on RHEL 8, but it might not. There was never a guarantee that such an application would run on RHEL 7.&lt;/p&gt; &lt;h3&gt;Q: Which packages are guaranteed to be ABI compatible across major RHEL releases?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: See the Application Compatibility Guides for each version of RHEL. Libraries in compatibility level 1 are guaranteed to be compatible. On RHEL 7, the only C++ libraries in CL1 are &lt;code&gt;libstdc++&lt;/code&gt; and the Thread Building Blocks (TBB) libs.&lt;/p&gt; &lt;h3&gt;Q: Are there libraries that support both the old and new C++ ABIs?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: Yes, &lt;code&gt;libstdc++&lt;/code&gt; does. The TBB libraries are not affected by the ABI change, so they are also compatible with both ABIs.&lt;/p&gt; &lt;h3&gt;Q: How can I find out which libraries my application depends on?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: The &lt;code&gt;ldd&lt;/code&gt; command displays all the shared libraries that a binary depends on (including indirect dependencies from other libraries).&lt;/p&gt; &lt;h3&gt;Q: Can I build an application for RHEL 8 (with the RHEL 8 system compiler) on RHEL 7?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: While theoretically possible, doing so would be awkward and error-prone. If developing on RHEL 7 is a requirement for applications to be deployed on RHEL 8, Red Hat recommends running RHEL 8 in a container or virtual machine.&lt;/p&gt; &lt;h3&gt;Q: If I link statically to glibc/libstdc++ on RHEL 7, will the resulting binary work fine on RHEL 8?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: Red Hat does not support statically linking applications. Statically linking &lt;code&gt;glibc&lt;/code&gt; prevents some features from functioning and is not recommended. Statically linking &lt;code&gt;libstdc++&lt;/code&gt; is possible, but it should not be necessary because the &lt;code&gt;libstdc++.so.6&lt;/code&gt; library on RHEL 8 is backward compatible. Statically linking to other C++ libraries could be a solution if the versions of those libraries on RHEL 8 are incompatible with the RHEL 7 versions.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F08%2Fmigrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8%2F&amp;#38;linkname=Migrating%20C%20and%20C%2B%2B%20applications%20from%20Red%20Hat%20Enterprise%20Linux%20version%207%20to%20version%208" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F08%2Fmigrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8%2F&amp;#38;linkname=Migrating%20C%20and%20C%2B%2B%20applications%20from%20Red%20Hat%20Enterprise%20Linux%20version%207%20to%20version%208" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F08%2Fmigrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8%2F&amp;#38;linkname=Migrating%20C%20and%20C%2B%2B%20applications%20from%20Red%20Hat%20Enterprise%20Linux%20version%207%20to%20version%208" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F08%2Fmigrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8%2F&amp;#38;linkname=Migrating%20C%20and%20C%2B%2B%20applications%20from%20Red%20Hat%20Enterprise%20Linux%20version%207%20to%20version%208" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F08%2Fmigrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8%2F&amp;#38;linkname=Migrating%20C%20and%20C%2B%2B%20applications%20from%20Red%20Hat%20Enterprise%20Linux%20version%207%20to%20version%208" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F08%2Fmigrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8%2F&amp;#38;linkname=Migrating%20C%20and%20C%2B%2B%20applications%20from%20Red%20Hat%20Enterprise%20Linux%20version%207%20to%20version%208" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F08%2Fmigrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8%2F&amp;#38;linkname=Migrating%20C%20and%20C%2B%2B%20applications%20from%20Red%20Hat%20Enterprise%20Linux%20version%207%20to%20version%208" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F08%2Fmigrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8%2F&amp;#038;title=Migrating%20C%20and%20C%2B%2B%20applications%20from%20Red%20Hat%20Enterprise%20Linux%20version%207%20to%20version%208" data-a2a-url="https://developers.redhat.com/blog/2020/10/08/migrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8/" data-a2a-title="Migrating C and C++ applications from Red Hat Enterprise Linux version 7 to version 8"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/08/migrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8/"&gt;Migrating C and C++ applications from Red Hat Enterprise Linux version 7 to version 8&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/QFKrisKVNwo" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;When moving an application that you&amp;#8217;ve compiled on Red Hat Enterprise Linux (RHEL) 7 to RHEL 8, you will likely encounter issues due to changes in the application binary interface (ABI). The ABI describes the low-level binary interface between an application and its operating environment. This interface requires tools such as compilers and linkers, as [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/08/migrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8/"&gt;Migrating C and C++ applications from Red Hat Enterprise Linux version 7 to version 8&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/10/08/migrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">782477</post-id><dc:creator>Thomas Rodgers</dc:creator><dc:date>2020-10-08T07:00:22Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/08/migrating-c-and-c-applications-from-red-hat-enterprise-linux-version-7-to-version-8/</feedburner:origLink></entry></feed>
