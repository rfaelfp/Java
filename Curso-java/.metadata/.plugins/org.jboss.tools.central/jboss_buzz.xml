<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title type="html">Predictions in Kogito: PMML endpoints with OpenAPI</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/7_9ETYAuuoU/predictions-in-kogito-pmml-endpoints-with-openapi.html" /><author><name>Gabriele Cardosi</name></author><id>https://blog.kie.org/2021/02/predictions-in-kogito-pmml-endpoints-with-openapi.html</id><updated>2021-02-25T11:36:06Z</updated><content type="html">INTRODUCTION is an XML standard whose scope is to define different kinds of predictive models (Regression, Scorecard, Tree, Neural Network, etc) in a system-agnostic way, so that it may be used and shared by different systems/implementations. The Specification (OAS) defines a standard, language-agnostic interface to RESTful APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. Beginning in January 2020 a new initiative, , has started to provide a fast, reliable implementation natively available inside Drools and Kogito. Recently, a new feature has been added to implement OpenAPI usage in PMML-specific rest-endpoints created by the Kogito framework, for both Quarkus and Springboot environments. PREDICTIONS IN KOGITO The PMML-Trusty engine is exposed in Kogito through rest endpoints. This allows an extremely easy way to create a PMML executor that, at the same time, is available through easy-to-use, standard, language agnostic rest endpoints. A bare-minimum Kogito project requires some PMML files in the resources folder and a configuration yaml. Here are and example projects. During Kogito code generation, engine-specific classes are created out of the models found in the given PMML files.  Then, for each model a Rest class is created, whose root path is derived from the model name. Inside this class there are two specific endpoints: 1. result (“{root_path}/”) 2. descriptive (“{root_path}/descriptive”) The first endpoint will return only the raw result of model evaluation, while the second one will return a complex object containing additional information and metadata. OPENAPI REST ENDPOINTS The generated endpoints are further enriched with OpenAPI metadata.  For each model a json-schema file is created, containing the descriptive representation of: 1. requested input (InputSet) 2. (raw) result output (ResultSet) 3. descriptive output (OutputSet) Here’s the overall skeleton of a generated json schema: { "definitions": { "OutputSet": { "type": "object", "properties": { ... } }, "InputSet": { "type": "object", ... } }, "ResultSet": { "type": "object", "properties": { ... } } } } An extremely useful feature is the ability to propagate the model requirements/constraints to the final consumer, for example, the valid values for a string field or the allowed ranges for numeric values. The following snippet shows a couple of example about that "resultCode": { "type": "string", "enum": [ "OK", "FAIL" ] } "temperature": { "type": "number", "format": "double", "intervals": [ "-∞ -10", "-10 10", "10 ∞" ] } When rendered inside the html page, such metadata will be shown, providing help on endpoint usage to the final end user.  A couple of images will give an idea on how the pages would look like for PMML endpoints: Quarkus (http://{server_url:port}/q/swagger-ui/#/) Descriptive endpoint CONCLUSION OpenAPI-enriched Rest-endpoints provides a useful feature to help end users in the rest-endpoint usage and, at the same time, to write more robust program-driven consumers. Exposing input and output schemas in json format allows the developer to write code that 1. retrieves the required fields and formats 2. submit data for evaluation 3. analyze or manage returned values in the light of the expected output The post appeared first on .&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/7_9ETYAuuoU" height="1" width="1" alt=""/&gt;</content><dc:creator>Gabriele Cardosi</dc:creator><feedburner:origLink>https://blog.kie.org/2021/02/predictions-in-kogito-pmml-endpoints-with-openapi.html</feedburner:origLink></entry><entry><title>Debuginfod project update: New clients and metrics</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/HjwEeUCpquU/" /><category term="Developer Tools" /><category term="Linux" /><category term="debuginfo" /><category term="debuginfod" /><category term="elfutils" /><category term="monitoring" /><author><name>Aaron Merey</name></author><id>https://developers.redhat.com/blog/?p=827527</id><updated>2021-02-25T08:00:27Z</updated><published>2021-02-25T08:00:27Z</published><content type="html">&lt;p&gt;It&amp;#8217;s been about a year since our last update about &lt;code&gt;debuginfod&lt;/code&gt;, an HTTP file server that serves debugging resources to debugger-like tools. Since then, we&amp;#8217;ve been busy integrating clients across a range of developer tools and improving the server&amp;#8217;s available metrics. This article covers the features and improvements we&amp;#8217;ve added to &lt;code&gt;debuginfod&lt;/code&gt; since our last update.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: For an introduction to &lt;code&gt;debuginfod&lt;/code&gt; and how to use it, check out our &lt;a href="https://developers.redhat.com/blog/2019/10/14/introducing-debuginfod-the-elfutils-debuginfo-server/"&gt;first article introducing debuginfod&lt;/a&gt; and the follow-up explaining &lt;a href="https://developers.redhat.com/blog/2019/12/17/deploying-debuginfod-servers-for-your-developers/"&gt;how to set up your own debuginfod services&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;New debuginfod clients&lt;/h2&gt; &lt;p&gt;Debuginfod is a part of the &lt;a target="_blank" rel="nofollow" href="https://sourceware.org/elfutils/"&gt;elfutils&lt;/a&gt; project. Tools that already use elfutils to find or analyze debugging resources automatically inherit &lt;code&gt;debuginfod&lt;/code&gt; support. Tools like &lt;a target="_blank" rel="nofollow" href="https://sourceware.org/systemtap/"&gt;Systemtap&lt;/a&gt;, &lt;a target="_blank" rel="nofollow" href="https://sourceware.org/libabigail/"&gt;Libabigail&lt;/a&gt;, and &lt;a target="_blank" rel="nofollow" href="https://pmachata.github.io/dwgrep/"&gt;dwgrep&lt;/a&gt; all inherit &lt;code&gt;debuginfod&lt;/code&gt; this way. In Systemtap, for example, &lt;code&gt;debuginfod&lt;/code&gt; offers new ways to specify which processes to probe. Previously, if you wanted to explore a running user process, you would have to provide either a process identifier (PID) or the executable path. With &lt;code&gt;debuginfod&lt;/code&gt;, Systemtap can probe processes according to &lt;code&gt;build-id&lt;/code&gt;, as well. So, it is possible to investigate specific versions of a binary independently from the location of the corresponding executable file.&lt;/p&gt; &lt;p&gt;Debuginfod includes a client library (&lt;code&gt;libdebuginfod&lt;/code&gt;) that lets other tools easily query &lt;code&gt;debuginfod&lt;/code&gt; servers for source files, executables, and of course, &lt;code&gt;debuginfo&lt;/code&gt;—generally, DWARF (debugging with attributed record format) &lt;code&gt;debuginfo&lt;/code&gt;. Since last year, a variety of developer tools have integrated &lt;code&gt;debuginfod&lt;/code&gt; clients. As of version 2.34, &lt;a target="_blank" rel="nofollow" href="https://www.gnu.org/software/binutils/"&gt;Binutils&lt;/a&gt; includes &lt;code&gt;debuginfod&lt;/code&gt; support for its components that use separate &lt;code&gt;debuginfo&lt;/code&gt; (&lt;code&gt;readelf&lt;/code&gt; and &lt;code&gt;objdump&lt;/code&gt;). Starting in version 9.03, the &lt;a href="https://developers.redhat.com/blog/2018/02/20/annobin-storing-information-binaries/"&gt;Annobin&lt;/a&gt; project contains &lt;code&gt;debuginfod&lt;/code&gt; support for fetching separate &lt;code&gt;debuginfo&lt;/code&gt; files, and support for &lt;a target="_blank" rel="nofollow" href="https://dyninst.org/"&gt;Dyninst&lt;/a&gt; is planned in version 10.3.&lt;/p&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://www.gnu.org/software/gdb/"&gt;GDB&lt;/a&gt; 10.1 was recently released with &lt;code&gt;debuginfod&lt;/code&gt; support, making it easy to download any missing &lt;code&gt;debuginfo&lt;/code&gt; or source files on-the-fly as you debug your programs, whether the files are for the executable being debugged or any shared libraries used by the executable. GDB also uses improvements to the &lt;code&gt;libdebuginfod&lt;/code&gt; API, including programmable progress updates, as shown in the following example (note that this output is abridged for clarity):&lt;/p&gt; &lt;pre&gt;$ gdb /usr/bin/python Reading symbols from /usr/bin/python... Downloading separate debug info for /usr/bin/python (gdb) list Downloading source file /usr/src/debug/python3-3.8.6-1.fc32.x86_64/Programs/python.c... 8 wmain (int argc, wchar_t **argv) 9 { 10 return Py_Main(argc, argv) 11 } (gdb) break main Breakpoint 1 at 0x1140: file /usr/src/debug/python3-3.8.6-1.fc32.x86_64/Programs/python.c, line 16. (gdb) run Starting program: /usr/bin/python Downloading separate debug info for /lib64/ld-linux-x86-64.so.2... Downloading separate debug info for /lib64/libc.so.6... Downloading separate debug info for /lib64/libpthread.so.0... [...] &lt;/pre&gt; &lt;p&gt;Configuring &lt;code&gt;debuginfod&lt;/code&gt; to supply all of these tools with debugging resources is as simple as setting an environment variable (&lt;code&gt;DEBUGINFOD_URLS&lt;/code&gt;) with the URLs of &lt;code&gt;debuginfod&lt;/code&gt; servers. In case you don&amp;#8217;t want to set up your own server, we also provide servers that include debugging resources for many common Fedora, CentOS, Ubuntu, Debian, and OpenSUSE packages.  For more information, explore the &lt;a target="_blank" rel="nofollow" href="https://sourceware.org/elfutils/Debuginfod.html"&gt;elfutils debuginfod page&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;New debuginfod server metrics&lt;/h2&gt; &lt;p&gt;Operating a &lt;code&gt;debuginfod&lt;/code&gt; server for other people is a pleasure and a chore. Once you have users, they will expect the service to stay up. While &lt;code&gt;debuginfod&lt;/code&gt; is a simple server, it still needs monitoring and management. With that in mind, &lt;code&gt;debuginfod&lt;/code&gt; comes with the usual logging-to-stderr flags, which are tailor-made for container or systemd operation. (Add another &lt;code&gt;-v&lt;/code&gt; for more information.) Additionally, &lt;code&gt;debuginfod&lt;/code&gt; offers a web API for sharing a variety of metrics about its internal operations. These metrics are exported in &lt;a target="_blank" rel="nofollow" href="https://prometheus.io/docs/instrumenting/exposition_formats/"&gt;Prometheus&lt;/a&gt;, which is industry-standard, human-readable, and comes with numerous consumer and processing tools. The metrics are designed to let you see what its various threads are doing, how they&amp;#8217;re progressing with their workloads, and what types of errors they&amp;#8217;ve encountered. When archived in a time-series database and lightly analyzed, the metrics might help you derive all sorts of neat quantities guiding resource allocation.&lt;/p&gt; &lt;h2&gt;Configuring Prometheus for debuginfod&lt;/h2&gt; &lt;p&gt;To configure a Prometheus server to scrape &lt;code&gt;debuginfod&lt;/code&gt; metrics, add a clause for HTTP or HTTPS to the &lt;code&gt;prometheus.yml&lt;/code&gt; configuration file, as shown here:&lt;/p&gt; &lt;pre&gt; scrape_configs: - job_name: 'debuginfod' scheme: http static_configs: - targets: ['localhost:8002'] - job_name: 'debuginfod-https' scheme: https static_configs: - targets: ['debuginfod.elfutils.org'] # adjust &lt;/pre&gt; &lt;p&gt;Adjust the global &lt;code&gt;scrape_interval&lt;/code&gt; if you like. Debuginfod can handle &lt;code&gt;/metrics&lt;/code&gt; queries quickly. Let it run a while, then let&amp;#8217;s take a tour of the metrics.&lt;/p&gt; &lt;h2&gt;Visualizing debuginfod metrics&lt;/h2&gt; &lt;p&gt;When &lt;code&gt;debuginfod&lt;/code&gt; is directed to scan a large directory of archives or files for the first time, it uses a pool of threads (&lt;code&gt;-c option&lt;/code&gt;) to decompress and parse them. This activity can be I/O and CPU intensive, and ideally both! How can we tell? Look at the &lt;em&gt;scanned_bytes_total&lt;/em&gt; metric, which tabulates the total size of input files &lt;code&gt;debuginfod&lt;/code&gt; processed. When converted to a rate, it is close to the read throughput of the source filesystem.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: The following screenshots were generated from built-in Prometheus graphs, but you could use another visualizer like &lt;a target="_blank" rel="nofollow" href="https://grafana.com/"&gt;Grafana&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Measuring total bytes scanned&lt;/h3&gt; &lt;p&gt;The graph in Figure 1 represents an intensive scan job where a remote NFS server is feeding &lt;code&gt;debuginfod&lt;/code&gt; at a steady 50MBs for some time, then a less impressive 10MBs later on. We believe Monday&amp;#8217;s arrival was the likely cause for this drop in scanning performance. Developers returned from the weekend and &lt;code&gt;debuginfod&lt;/code&gt; had to share NFS capacity.&lt;/p&gt; &lt;div id="attachment_827637" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm1.png"&gt;&lt;img aria-describedby="caption-attachment-827637" class="wp-image-827637" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm1-300x249.png" alt="The graph shows a sudden drop in scanning performance." width="640" height="532" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm1-300x249.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm1-768x638.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm1.png 874w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-827637" class="wp-caption-text"&gt;Figure 1: Results from debuginfod&amp;#8217;s scanned_bytes_total metric displayed in a Prometheus graph.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;As you can see, the initial scan goes on and on. Developers keep developing, but the NFS server runs slower and slower. To analyze that, we can look at the &lt;em&gt;thread_work_pending&lt;/em&gt; metric.&lt;/p&gt; &lt;h3&gt;Measuring thread activity&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;thread_work_pending&lt;/em&gt; metric jumps whenever a periodic traversal pass is started (the &lt;code&gt;-t&lt;/code&gt; option and &lt;code&gt;SIGUSR1&lt;/code&gt;) and winds back down to zero as those scanner threads do their work. The graph in Figure 2 represents the five-day period where a multi-terabyte &lt;a href="https://developers.redhat.com/products/rhel/overview"&gt;Red Hat Enterprise Linux 8&lt;/a&gt; RPM dataset was scanned. The gentle slope-periods corresponded to a few packages with a unique combination of enormous RPM sizes and many builds (Kernel, RT-Kernel, Ceph, LibreOffice). Sharp upticks and downticks corresponded to concurrent re-traversals that were immediately dismissed because the indexed data was still fresh. As the line touches zero, the scanning is done. After that, only brief pulses should show.&lt;/p&gt; &lt;div id="attachment_827647" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm2.png"&gt;&lt;img aria-describedby="caption-attachment-827647" class="wp-image-827647" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm2-300x250.png" alt="This graph shows sharp upticks and downticks." width="640" height="534" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm2-300x250.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm2-768x640.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm2.png 873w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-827647" class="wp-caption-text"&gt;Figure 2: Results from debuginfod&amp;#8217;s thread_work_pending metric displayed in a Prometheus graph.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Even before all the scanning is finished, the server is ready to answer queries. This is what it&amp;#8217;s all about, after all—letting developers enjoy that sweet nectar of &lt;code&gt;debuginfo&lt;/code&gt;. But how many are using it, and at what cost? Let&amp;#8217;s check the &lt;em&gt;http_responses_total&lt;/em&gt; metric, which counts and classifies web API requests.&lt;/p&gt; &lt;h3&gt;Measuring HTTP responses&lt;/h3&gt; &lt;p&gt;The graph in Figure 3 shows a small peak of errors (unknown &lt;code&gt;build-id&lt;/code&gt;s), a large number of successes (extracting content .rpm), and a very small number of other successes (using the &lt;code&gt;fdcache&lt;/code&gt;). This was the workload from a bulk, distro-wide &lt;code&gt;debuginfod&lt;/code&gt; scan that could not take advantage of any serious caching or prefetching.&lt;/p&gt; &lt;div id="attachment_827657" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm3.png"&gt;&lt;img aria-describedby="caption-attachment-827657" class="wp-image-827657" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm3-300x267.png" alt="The graph shows a sharp incline and a gradual decline." width="640" height="569" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm3-300x267.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm3-768x683.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm3.png 845w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-827657" class="wp-caption-text"&gt;Figure 3: Results from debuginfod&amp;#8217;s http_responses_total metric displayed in a Prometheus graph.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Let&amp;#8217;s take a look at the cost, too. If you measure cost by bytes by network data, pull up the &lt;em&gt;http_responses_transfer_bytes&lt;/em&gt; pair of metrics. If measuring cost by CPU time, pull up the &lt;em&gt;http_responses_duration_milliseconds&lt;/em&gt; pair of metrics. With a little bit of PromQL, you can compute the average data transfer or processing time.&lt;/p&gt; &lt;h3&gt;Measuring processing time, groom statistics and error counts&lt;/h3&gt; &lt;p&gt;The graph in Figure 4 shows the duration variant for the same time frame in Figure 3. It reveals how the inability to cache or prefetch the results sometimes required tens of seconds of service time, probably from the same large archives that took so long to scan. Configuring aggressive caching could help to create more typical access patterns. See the metrics that mention &lt;code&gt;fdcache&lt;/code&gt;.&lt;/p&gt; &lt;div id="attachment_827677" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm4.png"&gt;&lt;img aria-describedby="caption-attachment-827677" class="wp-image-827677" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm4-300x230.png" alt="need alt text." width="640" height="490" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm4-300x230.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm4-768x588.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm4.png 873w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-827677" class="wp-caption-text"&gt;Figure 4: Measuring processing time with debuginfod metrics in Prometheus.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Now that your server is up, it will also periodically groom its index (&lt;code&gt;-g&lt;/code&gt; option and &lt;code&gt;SIGUSR2&lt;/code&gt;). As a part of each groom cycle, another set of metrics is updated to provide an overview of the entire index. The last few numbers give an idea of the storage requirements of a fairly large installation: 6.58TB of RPMs, in 76.6GB of index data:&lt;/p&gt; &lt;pre&gt; groom{statistic="archive d/e"} 11837375 groom{statistic="archive sdef"} 152188513 groom{statistic="archive sref"} 2636847754 groom{statistic="buildids"} 11477232 groom{statistic="file d/e"} 0 groom{statistic="file s"} 0 groom{statistic="filenames"} 163330844 groom{statistic="files scanned (#)"} 579264 groom{statistic="files scanned (mb)"} 6583193 groom{statistic="index db size (mb)"} 76662 &lt;/pre&gt; &lt;p&gt;The &lt;code&gt;error_count&lt;/code&gt; metrics track errors from various subsystems of &lt;code&gt;debuginfod&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Here, you can see how the errors are categorized by subsystem and type. We hope increases to these metrics can be used to signal a gradual degradation or outright failure. We recommend attaching alerts to them.&lt;/p&gt; &lt;pre&gt; error_count{libc="Connection refused"} 3 error_count{libc="No such file or directory"} 1 error_count{libc="Permission denied"} 33 error_count{libarchive="cannot extract file"} 1 &lt;/pre&gt; &lt;p&gt;Finally, you can use Grafana to scrape the &lt;code&gt;debuginfod&lt;/code&gt; Prometheus server to prepare informative and stylish dashboards, such as the one shown in Figure 5.&lt;/p&gt; &lt;div id="attachment_841147" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/debuginfod-grafana.png"&gt;&lt;img aria-describedby="caption-attachment-841147" class="wp-image-841147" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/debuginfod-grafana-300x231.png" alt="The dashboard displays a variety of debuginfod metrics." width="640" height="493" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/debuginfod-grafana-300x231.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/debuginfod-grafana-768x592.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/debuginfod-grafana.png 882w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-841147" class="wp-caption-text"&gt;Figure 5: Debuginfod metrics displayed on a Grafana dashboard.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;This article was an overview of the new client support and metrics available from &lt;code&gt;debuginfod&lt;/code&gt;. We didn&amp;#8217;t cover all of the available metrics, so feel free to check them out for yourself. If you think of more useful metrics for &lt;code&gt;debuginfod&lt;/code&gt; please get in touch with our developers at elfutils-devel@sourceware.org.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F25%2Fdebuginfod-project-update-new-clients-and-metrics%2F&amp;#38;linkname=Debuginfod%20project%20update%3A%20New%20clients%20and%20metrics" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F25%2Fdebuginfod-project-update-new-clients-and-metrics%2F&amp;#38;linkname=Debuginfod%20project%20update%3A%20New%20clients%20and%20metrics" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F25%2Fdebuginfod-project-update-new-clients-and-metrics%2F&amp;#38;linkname=Debuginfod%20project%20update%3A%20New%20clients%20and%20metrics" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F25%2Fdebuginfod-project-update-new-clients-and-metrics%2F&amp;#38;linkname=Debuginfod%20project%20update%3A%20New%20clients%20and%20metrics" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F25%2Fdebuginfod-project-update-new-clients-and-metrics%2F&amp;#38;linkname=Debuginfod%20project%20update%3A%20New%20clients%20and%20metrics" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F25%2Fdebuginfod-project-update-new-clients-and-metrics%2F&amp;#38;linkname=Debuginfod%20project%20update%3A%20New%20clients%20and%20metrics" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F25%2Fdebuginfod-project-update-new-clients-and-metrics%2F&amp;#38;linkname=Debuginfod%20project%20update%3A%20New%20clients%20and%20metrics" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F25%2Fdebuginfod-project-update-new-clients-and-metrics%2F&amp;#038;title=Debuginfod%20project%20update%3A%20New%20clients%20and%20metrics" data-a2a-url="https://developers.redhat.com/blog/2021/02/25/debuginfod-project-update-new-clients-and-metrics/" data-a2a-title="Debuginfod project update: New clients and metrics"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/25/debuginfod-project-update-new-clients-and-metrics/"&gt;Debuginfod project update: New clients and metrics&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/HjwEeUCpquU" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;It&amp;#8217;s been about a year since our last update about debuginfod, an HTTP file server that serves debugging resources to debugger-like tools. Since then, we&amp;#8217;ve been busy integrating clients across a range of developer tools and improving the server&amp;#8217;s available metrics. This article covers the features and improvements we&amp;#8217;ve added to debuginfod since our last [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/25/debuginfod-project-update-new-clients-and-metrics/"&gt;Debuginfod project update: New clients and metrics&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/02/25/debuginfod-project-update-new-clients-and-metrics/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">827527</post-id><dc:creator>Aaron Merey</dc:creator><dc:date>2021-02-25T08:00:27Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/02/25/debuginfod-project-update-new-clients-and-metrics/</feedburner:origLink></entry><entry><title type="html">Business optimisation architecture - Common architectural elements</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/2ztoiz9pzlw/business-optimisation-common-architectural-elements.html" /><author><name>Eric D. Schabell</name></author><id>http://feedproxy.google.com/~r/schabell/jboss/~3/Dl6AQyo4ff8/business-optimisation-common-architectural-elements.html</id><updated>2021-02-25T06:00:00Z</updated><content type="html">Part 2 - Common architecture elements In from this series I introduced a use case around business optimisation for retail stores. The process was laid out how I've approached the use case and how portfolio solutions are the base for researching a generic architectural blueprint.  The only thing left to cover was the order in which you'll be led through the blueprint details. This article starts the real journey at the very top, with a generic architecture from which we'll discuss the common architectural elements one by one. BLUEPRINTS REVIEW As mentioned before, the architectural details covered here are base on real solutions using open source technologies. The example scenario presented here is a generic common blueprint that was uncovered researching those solutions. It's my intent to provide a blueprint that provides guidance and not deep technical details. This section covers the visual representations as presented, but it's expected that they'll be evolving based on future research. There are many ways to represent each element in this architectural blueprint, but I've chosen a format that I hope makes it easy to absorb. Feel free to post comments at the bottom of this post, or  with your feedback. Now let's take a look at the details in this blueprint and outline the solution. FROM SPECIFIC TO GENERIC Before diving in to the common elements, it might be nice to understand that this is not a catch all for every possible business optimisation solution. It's a collection of identified elements that I've uncovered in multiple customer implementations. These elements presented here are then the generic common architectural elements that I've identified and collected in to the generic architectural blueprint.  It's my intent to provide a blueprint for guidance and not deep technical details. You're smart enough to figure out wiring integration points in your own architectures. You're capable of slotting in the technologies and components you've committed to in the past where applicable.  It's my job here to describe the architectural blueprint generic components and outline a few specific cases with visual diagrams so that you're able to make the right decisions from the start of your own projects. Another challenge has been how to visually represent the architectural blueprint. There are many ways to represent each element, but I've chosen some icons, text and colours that I hope are going to make it all easy to absorb. Feel free to post comments at the bottom of this post, or  with your feedback. Now let's take a quick tour of the generic architecture and outline the common elements uncovered in my research. EXTERNAL SYSTEMS Starting at the top right of the diagram, which is by no means a geographical necessity, there are two elements that represent external systems that are integrated with the core elements of this architecture.  The first is third-party systems, covering basically everything that customers use from partnering ventors. This can be SaaS solutions or any other third-party backend systems. The second is called internal remote systems, a broad element to contain all other types of backend systems that might be internal to the organisation, but deployed externally to to architecture in use. INFRASTRUCTURE SERVICES These elements in the common architecture are found in every solution researched. They were mentioned by name and consisted of an single-sign-on (SSO) that ensures a smooth interaction between processes, authorisation, authentication, and integration services. The internal local systems, shown with a private cloud icon, can be any backend systems that are managed and deployed in this organisation's infrastructure. CONTAINER PLATFORM Without a doubt, every modern organisation engaged in business optimisation has seen the value of containers and use of a container platform. The container platform provides for one consistent environment for developers and operations to manage services, applications, integration points, process integration, planning services, and security. It's also the one way to ensure you can uniformly leverage the same container infrastructure across a hybrid multicloud environment. It avoids becoming locked into any private or cloud infrastructure as you have an exit strategy with a container platform that's consistent across your architecture. There are a few elements here worth mentioning, first off the use of retail decision microservices for centralising all store business decisions for other services to leverage. An api management element for well defined access to services and processes, and a retail processes element to capture repeatable and sometimes long running store processes. The key element here in our business optimisation use case is of course the retail planning services, the powerful services used to solve many of the issues covered in this use case. Finally, there are elements representing collections of integration microservices and integration data microservices for storage service access. The security aspect is interwoven in the container platform, as each container service, application, or process integration can be plugged in to an organisations authentication and authorization mechanisms. STORAGE SERVICES The storage services uncovered in the research were diverse and numerous. For that reason there is no single common architectural element shown at the highest level. Everything from container native storage to traditional block storage was found. In later articles, when more detail is shown, I'll make a point to present a few of the options chosen by customers integrating data services with processes and applications. WHAT'S NEXT This was just a short overview of the common generic elements that make up our architecture blueprint for omnichannel customer experience use case.  An overview of this series on the business optimisation portfolio architecture blueprint can be found here: 1. 2. 3. Example planning optimisation 4. Example vaccine scheduling Catch up on any articles you missed by following one of the links above. Next in this series, taking a look at an example planning optimisation architecture to provide you with a map for your own optimisation solutions. (Article co-authored by , Chief Architect Retail, Red Hat)&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/2ztoiz9pzlw" height="1" width="1" alt=""/&gt;</content><dc:creator>Eric D. Schabell</dc:creator><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/Dl6AQyo4ff8/business-optimisation-common-architectural-elements.html</feedburner:origLink></entry><entry><title type="html">This Week in JBoss - 25 February 2021</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/tfhNxgo1GNY/weekly-2021-02-25.html" /><category term="quarkus" /><category term="wildfly" /><category term="kogito" /><category term="openshift" /><category term="bpm" /><category term="microprofile" /><category term="resteasy" /><category term="keycloak" /><category term="infinispan" /><author><name>Romain Pelisse</name><uri>https://www.jboss.org/people/romain-pelisse</uri><email>do-not-reply@jboss.com</email></author><id>https://www.jboss.org/posts/weekly-2021-02-25.html</id><updated>2021-02-25T00:00:00Z</updated><content type="html">&lt;article class="" data-tags="quarkus, wildfly, kogito, openshift, bpm, microprofile, resteasy, keycloak, infinispan"&gt; &lt;h1&gt;This Week in JBoss - 25 February 2021&lt;/h1&gt; &lt;p class="preamble"&gt;&lt;/p&gt;&lt;p&gt;Welcome to another installment of our JBoss Editorial! Today, we’ll focus on Kogito and the upcoming major release of Wildfly. Enjoy!&lt;/p&gt;&lt;p&gt;&lt;/p&gt; &lt;div class="sect1"&gt; &lt;h2 id="_wildfly_23_beta_microprofile"&gt;Wildfly 23 Beta: Microprofile&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;As the release of the next major version of Wildlfy is coming up soon, Brian Stanberry took the time to write up a brief article on the &lt;a href="https://www.wildfly.org//news/2021/02/24/WildFly23-Beta-Released/"&gt;progress with MicroProfile&lt;/a&gt;. If you have interested in playing with &lt;a href="https://github.com/eclipse/microprofile/releases/tag/4.0"&gt;MicroProfile Platform 4.0&lt;/a&gt; or see tech preview support for &lt;a href="https://github.com/eclipse/microprofile-reactive-messaging/releases/tag/1.0"&gt;MicroProfile Reactive Messaging 1.0&lt;/a&gt;, go check out &lt;a href="https://download.jboss.org/wildfly/23.0.0.Beta1/wildfly-23.0.0.Beta1.zip"&gt;Wildfly 23 Beta1&lt;/a&gt; and let us know what you think!&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_kogito"&gt;Kogito&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;If you are already a Kogito user or if you are interested in exploring this software, there were a few articles released in the past two weeks that you might find interesting. The first one is on &lt;a href="https://blog.kie.org/2021/02/kogito-notifications-api.html"&gt;Kogito Notification API&lt;/a&gt; which is followed nicely by the second one on &lt;a href="https://blog.kie.org/2021/02/event-driven-decisions-with-kogito.html"&gt;Event-driven decisions with Kogito&lt;/a&gt;&lt;/p&gt; &lt;p&gt;If you want something more practical, you’ll certainly enjoy the third article on &lt;a href="https://blog.kie.org/2021/02/3-steps-to-author-bpmn-dmn-editors-on-github-codespaces.html"&gt;3 steps to author BPMN and DMN assets on GitHub Codespaces&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_quarkus_fast_jar_as_default_multipart_support_for_resteasy_reactive"&gt;Quarkus: Fast jar as default, Multipart support for RESTEasy Reactive&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;Following up the recent release of &lt;a href="https://quarkus.io/blog/quarkus-1-11-3-final-released/"&gt;Quarkus 1.11.3.Final&lt;/a&gt;, &lt;a href="https://quarkus.io/blog/quarkus-1-12-0-final-released/"&gt;Quarkus 1.12 was just released&lt;/a&gt; and includes some exciting new features. First, fast jar is now by default and the framework added multipart support for RESTEasy Reactive. Go check it out!&lt;/p&gt; &lt;p&gt;And if you have not yet looked into Quarkus, a new tutorial has been released: &lt;a href="https://developers.redhat.com/blog/2021/02/11/enhancing-the-development-loop-with-quarkus-remote-development/"&gt;Enhancing the development loop with Quarkus remote development&lt;/a&gt;, so it’s the perfect opportunity to explore the framework potential and test it over OpenShift.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_evangelists_corner"&gt;Evangelist’s Corner&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;As always, our very own Eric Schabell has provided the community with quite a lot of content in the last two weeks. First, you have a nice &lt;a href="https://www.schabell.org/2021/02/business-optimisation-an-introduction.html"&gt;introduction to Business optimization architecture&lt;/a&gt;, which can be followed by this other piece on &lt;a href="https://www.schabell.org/2021/02/business-optimisation-common-architectural-elements.html"&gt;Business optimization architecture - Common architectural elements&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Of course, Eric has not forgotten the famous OpenShift and delivered a pretty nifty &lt;a href="https://www.schabell.org/2021/03/refcard-getting-started-with-openshift.html"&gt;RefCard - Getting started with OpenShift&lt;/a&gt; published for DZone. Go grab it!&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_releases"&gt;Releases!&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://quarkus.io/blog/quarkus-1-12-0-final-released/"&gt;Quarkus 1.12 released&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://download.jboss.org/wildfly/23.0.0.Beta1/wildfly-23.0.0.Beta1.zip"&gt;Wildfly 23 Beta1 is now available&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://resteasy.github.io/2021/02/18/resteasy-3.15.0.Final/"&gt;RESTEasy 3.15.0.Final is now available&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://bytemanblog.blogspot.com/2021/02/byteman-4014-has-been-released.html"&gt;Byteman 4.0.14 has been released &lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://www.keycloak.org//2021/02/keycloak-1203-released.html"&gt;Keycloak 12.0.3 released&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://infinispan.org/blog/2021/02/12/infinispan-12-0-1"&gt;Infinispan 12.0.1.Final "Lockdown"&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;p&gt;&lt;em&gt;That’s all for today! Please join us again in two weeks for another installment of our JBoss editorial! Stay safe and healthy in the meantime.&lt;/em&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="author"&gt; &lt;pfe-avatar pfe-shape="circle" pfe-pattern="squares" pfe-src="/img/people/romain-pelisse.png"&gt;&lt;/pfe-avatar&gt; &lt;span&gt;Romain Pelisse&lt;/span&gt; &lt;/div&gt;&lt;/article&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/tfhNxgo1GNY" height="1" width="1" alt=""/&gt;</content><dc:creator>Romain Pelisse</dc:creator><feedburner:origLink>https://www.jboss.org/posts/weekly-2021-02-25.html</feedburner:origLink></entry><entry><title>Custom policies in Red Hat 3scale API Management, Part 1: Overview</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/beypzRAjn5M/" /><category term="Event-Driven" /><category term="Kubernetes" /><category term="Modern App Dev" /><category term="3scale API Management" /><category term="API policies" /><category term="custom policies" /><category term="policy chaining" /><author><name>Satya Jayanti</name></author><id>https://developers.redhat.com/blog/?p=869677</id><updated>2021-02-24T08:00:50Z</updated><published>2021-02-24T08:00:50Z</published><content type="html">&lt;p&gt;API management platforms such as &lt;a href="https://developers.redhat.com/products/3scale/overview"&gt;Red Hat 3scale API Management&lt;/a&gt; provide an API gateway as a reverse proxy between API requests and responses. In this stage, most API management platforms optimize the request-response pathway and avoid introducing complex processing and delays. Such platforms provide minimal policy enforcement such as authentication, authorization, and rate-limiting. With the proliferation of API-based integrations, however, customers are demanding more fine-tuned capabilities.&lt;/p&gt; &lt;p&gt;Policy frameworks are key to adding new capabilities to the API request and response lifecycle. In this series, you will learn about the Red Hat 3scale API Management policy framework and how to use it to configure custom policies in the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_3scale_api_management/2.6/html/administering_the_api_gateway/index"&gt;APIcast API gateway&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Policy enforcement with 3scale API Management&lt;/h2&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_3scale_api_management/2.9/html/administering_the_api_gateway/index"&gt;APIcast&lt;/a&gt; is 3scale API Management&amp;#8217;s default data-plane gateway and policy enforcement point for API requests and responses. Its core functionality is to enforce rate limits, report methods and metrics, and use the mapping paths and security specified for each API defined in the 3scale API manager.&lt;/p&gt; &lt;p&gt;APIcast is built on &lt;a target="_blank" rel="nofollow" href="https://www.nginx.com/"&gt;NGINX&lt;/a&gt;. It is a custom implementation of a reverse proxy using the &lt;a target="_blank" rel="nofollow" href="https://openresty.org/en/resources.html"&gt;OpenResty&lt;/a&gt; framework, with modules written in &lt;a target="_blank" rel="nofollow" href="https://www.lua.org/docs.html"&gt;Lua&lt;/a&gt;. Most NGINX functionality is implemented using modules, which are controlled by directives specified in a configuration file.&lt;/p&gt; &lt;p&gt;APIcast enforces API configuration rules that are set in the 3scale API manager. It authenticates new requests by connecting to the service API exposed by the API manager. It also allows access to the backend API and reports usage. Figure 1 presents a high-level view of APIcast in 3scale API Management&amp;#8217;s API request and response flow.&lt;/p&gt; &lt;div id="attachment_742967" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/3scale-High-level-diagram.png"&gt;&lt;img aria-describedby="caption-attachment-742967" wp-image-742967 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/3scale-High-level-diagram-1024x698.png" alt="A diagram of APIcast in the 3scale API Management request and response flow." width="640" height="436" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/3scale-High-level-diagram-1024x698.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/3scale-High-level-diagram-300x205.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/3scale-High-level-diagram-768x524.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/3scale-High-level-diagram.png 1154w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742967" class="wp-caption-text"&gt;Figure 1: APIcast in the 3scale API Management API request and response flow.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;The default APIcast policy&lt;/h2&gt; &lt;p&gt;A default APIcast policy interprets the standard configuration and provides API gateway functionality. The default policy acts as the API&amp;#8217;s entry point to the gateway and must be enabled for all APIs configured in 3scale API Management. The APIcast policy ensures that API requests are handled using the rules configured in the API manager. The configuration is provided to the APIcast gateway as a JSON specification, which APIcast downloads from the 3scale API Management portal.&lt;/p&gt; &lt;p&gt;Each HTTP request passes through a sequence of &lt;a target="_blank" rel="nofollow" href="http://nginx.org/en/docs/dev/development_guide.html#http_phases"&gt;phases&lt;/a&gt;. A distinct type of processing is performed on the request in each phase. Module-specific handlers can be registered in most phases, and many standard NGINX modules register their phase handlers so that they will be called at a specific stage of request processing. Phases are processed successively, and phase handlers are called once the request reaches the phase.&lt;/p&gt; &lt;p&gt;To customize request processing, we can register additional modules at the appropriate phase. 3scale API Management provides standard policies that are pre-built as NGINX modules and can be plugged into each service&amp;#8217;s request.&lt;/p&gt; &lt;h2&gt;Custom APIcast policies&lt;/h2&gt; &lt;p&gt;In addition to the default policy, 3scale API Management provides custom policies that can be configured to each API. Using modules and configurations, these policies provide custom features for handling API requests and responses. Using custom modules makes the APIcast gateway highly customizable. It is possible to add custom processing and functionality on demand without modifying API gateway code or writing any additional code.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: See the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_3scale_api_management/2.9/html/administering_the_api_gateway/apicast_policies#standard-policies"&gt;chapter on APIcast policies&lt;/a&gt; in the 3sale API Management documentation for a list of all the standard policies that are available to be configured directly with APIcast.&lt;/p&gt; &lt;h2&gt;Policy chaining&lt;/h2&gt; &lt;p&gt;Policies must be placed in order of execution priority, and this placement is called &lt;em&gt;policy chaining&lt;/em&gt;. Policy chains affect the default behavior of any combination of policies. The default APIcast policy should be part of the policy chain. If a custom policy needs to be evaluated before the APIcast policy, it must be placed before that policy in the chain. Figure 2 shows an example of the policy order as defined in the policy chain.&lt;/p&gt; &lt;div id="attachment_872307" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/02/Policy-Chain.png"&gt;&lt;img aria-describedby="caption-attachment-872307" class="wp-image-872307" src="https://developers.redhat.com/blog/wp-content/uploads/2021/02/Policy-Chain.png" alt="A diagram of the custom policy chain." width="640" height="480" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/02/Policy-Chain.png 960w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/Policy-Chain-300x225.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/Policy-Chain-768x576.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-872307" class="wp-caption-text"&gt;Figure 2: A custom URL-rewriting policy in the policy chain.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;For example, take a scenario using a URL-rewriting policy to change the URL path from &lt;em&gt;/A/B&lt;/em&gt; to &lt;em&gt;/B&lt;/em&gt;. Placing the URL-rewriting policy before the APIcast policy ensures that the path is changed before gateway processing. Backend rules, mapping rules, and metrics all will be evaluated using the &lt;em&gt;/B&lt;/em&gt; URL path.&lt;/p&gt; &lt;p&gt;If, on the other hand, the custom policy should be evaluated &lt;em&gt;after&lt;/em&gt; the APIcast policy, you can reverse the order. As an example, if you wanted the mapping rules to be evaluated for &lt;em&gt;/A/B&lt;/em&gt;, with the URL rewrite to &lt;em&gt;/B&lt;/em&gt; applied afterward, then you would place the URL rewriting policy after the APIcast policy.&lt;/p&gt; &lt;h2&gt;Configuring custom policies&lt;/h2&gt; &lt;p&gt;There are two ways to add a new policy to an API. One option is to use the Policy section for each managed API in the 3scale API Management Admin Portal. All of the available policies are available to be added. If you prefer to use the Admin API, then you can provide the policy as a JSON specification, which you can upload to the service configuration using the provided REST API.&lt;/p&gt; &lt;p&gt;You also can copy a set of policies as part of the service configuration from one running environment to another using the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_3scale_api_management/2.9/html/operating_3scale/the-threescale-toolbox"&gt;3scale Toolbox&lt;/a&gt;. To verify the set of policies applied to a specific API, you can download the current configuration and configuration history from the administration portal or using the provided REST API.&lt;/p&gt; &lt;p&gt;Check the video below for a demonstration of the policy configuration in 3scale API Management.&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/8R5FvYE9JC0?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;3scale API Management provides multiple options for configuring custom API policies. This article introduced the 3scale API Management policy framework, custom policies, and policy chaining. I also presented a brief example of how to configure and view policies in 3scale API Management. Future articles in this series will look at the available policies, and I will introduce the developer toolset that you can use to create your own custom policies. In the meantime, you can explore 3scale API Management by signing up for a &lt;a target="_blank" rel="nofollow" href="https://www.3scale.net/signup"&gt;free 3scale API Management account&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F24%2Fcustom-policies-in-red-hat-3scale-api-management-part-1-overview%2F&amp;#38;linkname=Custom%20policies%20in%20Red%20Hat%203scale%20API%20Management%2C%20Part%201%3A%20Overview" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F24%2Fcustom-policies-in-red-hat-3scale-api-management-part-1-overview%2F&amp;#38;linkname=Custom%20policies%20in%20Red%20Hat%203scale%20API%20Management%2C%20Part%201%3A%20Overview" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F24%2Fcustom-policies-in-red-hat-3scale-api-management-part-1-overview%2F&amp;#38;linkname=Custom%20policies%20in%20Red%20Hat%203scale%20API%20Management%2C%20Part%201%3A%20Overview" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F24%2Fcustom-policies-in-red-hat-3scale-api-management-part-1-overview%2F&amp;#38;linkname=Custom%20policies%20in%20Red%20Hat%203scale%20API%20Management%2C%20Part%201%3A%20Overview" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F24%2Fcustom-policies-in-red-hat-3scale-api-management-part-1-overview%2F&amp;#38;linkname=Custom%20policies%20in%20Red%20Hat%203scale%20API%20Management%2C%20Part%201%3A%20Overview" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F24%2Fcustom-policies-in-red-hat-3scale-api-management-part-1-overview%2F&amp;#38;linkname=Custom%20policies%20in%20Red%20Hat%203scale%20API%20Management%2C%20Part%201%3A%20Overview" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F24%2Fcustom-policies-in-red-hat-3scale-api-management-part-1-overview%2F&amp;#38;linkname=Custom%20policies%20in%20Red%20Hat%203scale%20API%20Management%2C%20Part%201%3A%20Overview" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F24%2Fcustom-policies-in-red-hat-3scale-api-management-part-1-overview%2F&amp;#038;title=Custom%20policies%20in%20Red%20Hat%203scale%20API%20Management%2C%20Part%201%3A%20Overview" data-a2a-url="https://developers.redhat.com/blog/2021/02/24/custom-policies-in-red-hat-3scale-api-management-part-1-overview/" data-a2a-title="Custom policies in Red Hat 3scale API Management, Part 1: Overview"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/24/custom-policies-in-red-hat-3scale-api-management-part-1-overview/"&gt;Custom policies in Red Hat 3scale API Management, Part 1: Overview&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/beypzRAjn5M" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;API management platforms such as Red Hat 3scale API Management provide an API gateway as a reverse proxy between API requests and responses. In this stage, most API management platforms optimize the request-response pathway and avoid introducing complex processing and delays. Such platforms provide minimal policy enforcement such as authentication, authorization, and rate-limiting. With the [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/24/custom-policies-in-red-hat-3scale-api-management-part-1-overview/"&gt;Custom policies in Red Hat 3scale API Management, Part 1: Overview&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/02/24/custom-policies-in-red-hat-3scale-api-management-part-1-overview/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">869677</post-id><dc:creator>Satya Jayanti</dc:creator><dc:date>2021-02-24T08:00:50Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/02/24/custom-policies-in-red-hat-3scale-api-management-part-1-overview/</feedburner:origLink></entry><entry><title type="html">WildFly 23 Beta1 — More Progress with MicroProfile</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/YLmlOLOPFIE/" /><author><name>Brian Stansberry</name></author><id>https://wildfly.org//news/2021/02/24/WildFly23-Beta-Released/</id><updated>2021-02-24T00:00:00Z</updated><content type="html">I’m pleased to announce that the new WildFly and WildFly Preview 23.0.0.Beta1 releases are available for download at . The WildFly 23 development cycle has been a bit shorter than our typical three months, as we’ve reduced this one some to see if we can get on a rough cadence of Final releases in March/June/September/December. That works well for avoiding releases during the peak summer and year end holiday periods. And the cycle was even shorter in practice due to the normal year end slowdown. But we got a lot done! The biggest thing we’ve done is update all our of Eclipse MicroProfile implementations to the versions. We’ve also added tech preview support for . There are lots of other features and fixes in WildFly 23 Beta1. I’ll wait for the Final release in a couple weeks to get into more details, but the release notes for the release are , with issues fixed in the underlying WildFly Core beta listed . Please try it out and give us your feedback, while we get to work WildFly 23 Final! Best regards, Brian&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/YLmlOLOPFIE" height="1" width="1" alt=""/&gt;</content><dc:creator>Brian Stansberry</dc:creator><feedburner:origLink>https://wildfly.org//news/2021/02/24/WildFly23-Beta-Released/</feedburner:origLink></entry><entry><title>Installing Red Hat OpenShift API Management</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/fNpcebxnRLM/" /><category term="DevOps" /><category term="Kubernetes" /><category term="Microservices" /><category term="3scale" /><category term="api gateway" /><category term="API-Management" /><category term="Integration" /><category term="openshift" /><author><name>Jennifer Vargas</name></author><id>https://developers.redhat.com/blog/?p=862137</id><updated>2021-02-23T08:00:29Z</updated><published>2021-02-23T08:00:29Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/products/rhoam/overview"&gt;Red Hat OpenShift API Management&lt;/a&gt; is a new managed application service designed as an add-on to &lt;a target="_blank" rel="nofollow" href="https://www.openshift.com/products/dedicated/"&gt;Red Hat OpenShift Dedicated&lt;/a&gt;. The service provides developers with a streamlined experience when developing and delivering &lt;a href="https://developers.redhat.com/topics/microservices"&gt;microservices&lt;/a&gt; applications with an &lt;a href="https://developers.redhat.com/blog/2019/12/02/apis-as-a-product-get-the-value-out-of-your-apis/"&gt;API-first approach&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;OpenShift API Management was built on the success of &lt;a href="https://developers.redhat.com/products/3scale/overview"&gt;3scale API Management&lt;/a&gt; and designed to let developers easily share, secure, reuse, and discover APIs when developing applications. This article shows you how to install OpenShift API Management as an add-on to your OpenShift Dedicated cluster. As you will see, it takes less than 10 minutes to install, configure, administer, and be up and running with OpenShift API Management. Check the end of the article for the included video demonstration.&lt;/p&gt; &lt;h2&gt;Step 1: Get OpenShift Dedicated&lt;/h2&gt; &lt;p&gt;You will need an OpenShift Dedicated subscription to provision a cluster to run Red Hat OpenShift API Management.&lt;/p&gt; &lt;p&gt;Start by provisioning your cluster:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Log in to your account on &lt;a target="_blank" rel="nofollow" href="https://cloud.redhat.com"&gt;cloud.redhat.com/openshift&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Open the Red Hat OpenShift Cluster Manager.&lt;/li&gt; &lt;li&gt;Create a cluster by selecting &lt;b&gt;Red Hat OpenShift Dedicated&lt;/b&gt;.&lt;/li&gt; &lt;li&gt;Choose your cloud provider.&lt;/li&gt; &lt;li&gt;Fill in all the cluster configuration details: Cluster names, regions, availability zones, computer nodes, node instance type, CIDR ranges (these are optional, but cannot be modified at a later date), and so on.&lt;/li&gt; &lt;li&gt;Submit your request and wait for the cluster to be provisioned.&lt;/li&gt; &lt;/ol&gt; &lt;h2&gt;Step 2: Select and configure an identity provider&lt;/h2&gt; &lt;p&gt;Once your cluster is ready, you can configure your preferred &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/openshift_dedicated/4/html/authentication/configuring-identity-providers"&gt;identity provider&lt;/a&gt; (IDP)&lt;/p&gt; &lt;p&gt;To start, select and configure your identity provider (IDP) from the drop-down menu. Options include GitHub, Google, OpenID, LDAP, GitLab, and other providers that support OpenID flows.&lt;/p&gt; &lt;p&gt;After you have configured your IDP, you will need to add at least one user to the &lt;b&gt;dedicated-admins&lt;/b&gt; group. Click &lt;b&gt;Add user&lt;/b&gt; within the &lt;b&gt;Cluster administrative users&lt;/b&gt; section, then enter the username of the new &lt;b&gt;dedicated-admin&lt;/b&gt; user.&lt;/p&gt; &lt;p&gt;Access levels vary per organization. Any user that requires full access should be defined as an administrator. As an administrator, you can use 3scale API Management and OpenShift&amp;#8217;s role-based access control (RBAC) features to limit other users&amp;#8217; access.&lt;/p&gt; &lt;h2&gt;Step 3: Install OpenShift API Management&lt;/h2&gt; &lt;p&gt;The process to &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_openshift_api_management/1/guide/53dfb804-2038-4545-b917-2cb01a09ef98#_f19cd79a-19f1-4bbe-83b0-8a76e977b99c"&gt;install OpenShift API Management&lt;/a&gt; is straightforward. From the cluster details page, you can navigate to the Add-ons tab and find the services available to you. Here&amp;#8217;s the setup:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Go to the &lt;strong&gt;Add-ons&lt;/strong&gt; tabs on the cluster details page.&lt;/li&gt; &lt;li&gt;Choose &lt;b&gt;Red Hat OpenShift API Management&lt;/b&gt; and hit &lt;b&gt;Install&lt;/b&gt;.&lt;/li&gt; &lt;li&gt;Provide the email address for the account that will receive service-related &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_openshift_api_management/1/topic/c26ddfc9-e5bd-4685-a403-7f84697a6e8a"&gt;alerts and notifications&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Click &lt;b&gt;Install&lt;/b&gt; again to allow the Operators to install and configure the service.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;After installing the add-on, you can access the service via the Application Launcher menu located in the OpenShift Dedicated console&amp;#8217;s top-right corner. The Application Launcher provides direct access to the OpenShift API Management and Red Hat single sign-on (SSO) technology service UIs.&lt;/p&gt; &lt;h2&gt;Watch the video demonstration&lt;/h2&gt; &lt;p&gt;Check out the following video to see the OpenShift API Management installation steps in action:&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/sd2TlBm5KHs?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Using OpenShift API Management&lt;/h2&gt; &lt;p&gt;There you go! Getting OpenShift API Management installed and running on your OpenShift Dedicated cluster is as simple as the steps described here. Now you can start using the service. Check out the following resources to get going:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Familiarize yourself with &lt;a href="https://developers.redhat.com/products/rhoam/overview"&gt;Red Hat OpenShift API Management&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Use OpenShift​ API Management to &lt;a target="_blank" rel="nofollow" href="https://www.youtube.com/watch?v=NzNgc0f75pc"&gt;deploy and manage your own Quarkus API&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Learn more about &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt; and your cluster by following a quickstart from the &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.2/web_console/odc-about-developer-perspective.html"&gt;OpenShift developer perspective&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F23%2Finstalling-red-hat-openshift-api-management%2F&amp;#38;linkname=Installing%20Red%20Hat%20OpenShift%20API%20Management" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F23%2Finstalling-red-hat-openshift-api-management%2F&amp;#38;linkname=Installing%20Red%20Hat%20OpenShift%20API%20Management" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F23%2Finstalling-red-hat-openshift-api-management%2F&amp;#38;linkname=Installing%20Red%20Hat%20OpenShift%20API%20Management" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F23%2Finstalling-red-hat-openshift-api-management%2F&amp;#38;linkname=Installing%20Red%20Hat%20OpenShift%20API%20Management" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F23%2Finstalling-red-hat-openshift-api-management%2F&amp;#38;linkname=Installing%20Red%20Hat%20OpenShift%20API%20Management" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F23%2Finstalling-red-hat-openshift-api-management%2F&amp;#38;linkname=Installing%20Red%20Hat%20OpenShift%20API%20Management" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F23%2Finstalling-red-hat-openshift-api-management%2F&amp;#38;linkname=Installing%20Red%20Hat%20OpenShift%20API%20Management" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F23%2Finstalling-red-hat-openshift-api-management%2F&amp;#038;title=Installing%20Red%20Hat%20OpenShift%20API%20Management" data-a2a-url="https://developers.redhat.com/blog/2021/02/23/installing-red-hat-openshift-api-management/" data-a2a-title="Installing Red Hat OpenShift API Management"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/23/installing-red-hat-openshift-api-management/"&gt;Installing Red Hat OpenShift API Management&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/fNpcebxnRLM" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Red Hat OpenShift API Management is a new managed application service designed as an add-on to Red Hat OpenShift Dedicated. The service provides developers with a streamlined experience when developing and delivering microservices applications with an API-first approach. OpenShift API Management was built on the success of 3scale API Management and designed to let developers easily [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/23/installing-red-hat-openshift-api-management/"&gt;Installing Red Hat OpenShift API Management&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/02/23/installing-red-hat-openshift-api-management/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">862137</post-id><dc:creator>Jennifer Vargas</dc:creator><dc:date>2021-02-23T08:00:29Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/02/23/installing-red-hat-openshift-api-management/</feedburner:origLink></entry><entry><title>5 steps to manage your first API using Red Hat OpenShift API Management</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/OqukF57ihcQ/" /><category term="Java" /><category term="Kubernetes" /><category term="Quarkus" /><category term="3scale" /><category term="API security" /><category term="API-Management" /><category term="OpenShift Dedicated" /><author><name>Evan Shortiss</name></author><id>https://developers.redhat.com/blog/?p=863057</id><updated>2021-02-23T08:00:14Z</updated><published>2021-02-23T08:00:14Z</published><content type="html">&lt;p&gt;Companies are increasingly using hosted and managed services to deliver on application modernization efforts and reduce the burden of managing cloud infrastructure. The recent release of &lt;a href="https://developers.redhat.com/products/rhoam/overview"&gt;Red Hat OpenShift API Management&lt;/a&gt; makes it easier than ever to get your own dedicated instance of &lt;a href="https://developers.redhat.com/products/3scale/overview"&gt;Red Hat 3scale API Management&lt;/a&gt; running on &lt;a target="_blank" rel="nofollow" href="https://www.openshift.com/products/dedicated/"&gt;Red Hat OpenShift Dedicated&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This article is for developers who want to learn how to use Red Hat&amp;#8217;s hosted and managed services to automatically import and manage exposed APIs. We&amp;#8217;ll deploy a &lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt;Quarkus&lt;/a&gt; application on OpenShift Dedicated, then use OpenShift API Management to add API key security. See the end of the article for a video demonstration of the workflow described.&lt;/p&gt; &lt;h2&gt;Prerequisites&lt;/h2&gt; &lt;p&gt;This article assumes that you already have the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Access to a &lt;a target="_blank" rel="nofollow" href="https://cloud.redhat.com"&gt;cloud.redhat.com&lt;/a&gt; account.&lt;/li&gt; &lt;li&gt;An existing OpenShift Dedicated cluster or the ability to deploy one.&lt;/li&gt; &lt;li&gt;Entitlements to deploy the Red Hat OpenShift API Management add-on.&lt;/li&gt; &lt;li&gt;A development environment with: &lt;ul&gt; &lt;li&gt;Git CLI&lt;/li&gt; &lt;li&gt;Java 8 or 11+&lt;/li&gt; &lt;li&gt;Maven 3.6.2&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.5/cli_reference/openshift_cli/getting-started-cli.html#installing-the-cli"&gt;OpenShift CLI&lt;/a&gt; 4.5 or later&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Step 1: Obtain an OpenShift Dedicated cluster&lt;/h2&gt; &lt;p&gt;Using a hosted and managed service like OpenShift API Management makes this step straightforward. See &lt;a target="_blank" rel="nofollow" href="https://www.youtube.com/watch?v=sd2TlBm5KHs&amp;#038;feature=youtu.be"&gt;this video guide&lt;/a&gt; to obtaining an OpenShift Dedicated cluster and installing the OpenShift API Management add-on. You can also find instructions in &lt;a href="https://developers.redhat.com/blog/2021/02/23/installing-red-hat-openshift-api-management"&gt;this article&lt;/a&gt; and in the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_openshift_api_management/1/"&gt;OpenShift API Management documentation&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Once you&amp;#8217;ve obtained your OpenShift Dedicated cluster and installed the Red Hat OpenShift API Management add-on, we can move on to the next step.&lt;/p&gt; &lt;h2&gt;Step 2: Create a project using the OpenShift CLI&lt;/h2&gt; &lt;p&gt;Logging into an OpenShift Dedicated cluster via the OpenShift command-line interface requires a login token and URL. You can obtain both of these by logging into the OpenShift console via a web browser and using the configured &lt;a target="_blank" rel="nofollow" href="https://en.wikipedia.org/wiki/Identity_provider"&gt;IdP&lt;/a&gt;. Click &lt;b&gt;Copy Login Command&lt;/b&gt; in the dropdown menu displayed under your username in the top-right corner. Alternatively, navigate directly to &lt;strong&gt;https://oauth-openshift.$CLUSTER_HOSTNAME/oauth/token/request&lt;/strong&gt; and use your web browser to obtain a valid login command.&lt;/p&gt; &lt;p&gt;Once you have a token, issue a login command, then create a new project:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;code&gt;$ oc login --token=$TOKEN --server=$URL&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;$ oc new-project my-quarkus-api&lt;/code&gt;&lt;/li&gt; &lt;/ol&gt; &lt;h2&gt;Step 3: Deploy the Quarkus application to OpenShift&lt;/h2&gt; &lt;p&gt;The Java application you’ll deploy for this demonstration is based on the example from the &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/openapi-swaggerui"&gt;Quarkus OpenAPI and Swagger UI Guide&lt;/a&gt;. It’s a straightforward CRUD application that supports using a REST API to modify an in-memory list of fruits. You&amp;#8217;ll find the source code in &lt;a target="_blank" rel="nofollow" href="https://github.com/evanshortiss/rhoam-quarkus-openapi"&gt;this GitHub repository&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Our application&amp;#8217;s codebase differs slightly from the &lt;em&gt;Quarkus OpenAPI and Swagger UI Guide&lt;/em&gt; example. I made the following changes:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Set &lt;code&gt;quarkus.smallrye-openapi.store-schema-directory&lt;/code&gt; in &lt;code&gt;application.properties&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Updated &lt;code&gt;.gitignore&lt;/code&gt; to &lt;code&gt;openapi.json&lt;/code&gt; and &lt;code&gt;openapi.yaml&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Added the &lt;code&gt;quarkus-openshift&lt;/code&gt; extension.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;These modifications create a local copy of the OpenAPI spec in JSON format and include tooling that simplifies the deployment process.&lt;/p&gt; &lt;h3&gt;Build and deploy the Quarkus application&lt;/h3&gt; &lt;p&gt;Start by cloning the repository to your local environment:&lt;/p&gt; &lt;pre&gt;$ git clone https://github.com/evanshortiss/rhoam-quarkus-openapi &lt;/pre&gt; &lt;p&gt;Issue the following command to start a local development server and view the Swagger UI at &lt;strong&gt;http://localhost:8080/swagger-ui&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;$ ./mvnw quarkus:dev&lt;/pre&gt; &lt;p&gt;Enter this command to build and deploy the application on your OpenShift Dedicated cluster:&lt;/p&gt; &lt;pre&gt;$ ./mvnw clean package -Dquarkus.kubernetes.deploy=true -Dquarkus.openshift.expose=true&lt;/pre&gt; &lt;p&gt;The build progress will be streamed from the OpenShift build pod to your terminal. You can also track the build logs and status in the project&amp;#8217;s &lt;b&gt;Builds&lt;/b&gt; section in the OpenShift console, as shown in Figure 1.&lt;/p&gt; &lt;div id="attachment_863077" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig1.png"&gt;&lt;img aria-describedby="caption-attachment-863077" class="wp-image-863077 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig1-1024x626.png" alt="The Builds section in the OpenShift console." width="640" height="391" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig1-1024x626.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig1-300x183.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig1-768x469.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-863077" class="wp-caption-text"&gt;Figure 1: Viewing build logs in the OpenShift console.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Once the build and deployment process is complete, the URL to access the application will be printed in your terminal. Use this URL to verify that the application&amp;#8217;s OpenAPI spec is available at the &lt;code&gt;/openapi?format=json&lt;/code&gt; endpoint. It’s important to verify that the JSON response is returned. You&amp;#8217;ll need it to import the API to 3scale API Management and automatically generate the 3scale API Management ActiveDocs. Figure 2 shows an example of the response returned by this endpoint.&lt;/p&gt; &lt;div id="attachment_863097" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig2.png"&gt;&lt;img aria-describedby="caption-attachment-863097" class="wp-image-863097 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig2-1024x626.png" alt="The OpenAPI spec for Quarkus Fruits." width="640" height="391" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig2-1024x626.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig2-300x183.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig2-768x469.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-863097" class="wp-caption-text"&gt;Figure 2: Viewing the OpenAPI specification in JSON format.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Step 4: Apply Service Discovery annotations&lt;/h2&gt; &lt;p&gt;Next, we&amp;#8217;ll import the API into 3scale API Management using its Service Discovery feature. For this step, we need to apply a specific set of annotations and labels to the service associated with the Quarkus application. The Service Discovery annotations and labels are &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_3scale_api_management/2.9/html/admin_portal_guide/service-discovery"&gt;documented here&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use the following commands to apply the necessary annotations:&lt;/p&gt; &lt;pre&gt;$ oc annotate svc/rhoam-openapi "discovery.3scale.net/description-path=/openapi?format=json" $ oc annotate svc/rhoam-openapi discovery.3scale.net/port="8080" $ oc annotate svc/rhoam-openapi discovery.3scale.net/scheme=http&lt;/pre&gt; &lt;p&gt;Add the &lt;code&gt;discovery&lt;/code&gt; label using the following command:&lt;/p&gt; &lt;pre&gt;$ oc label svc/rhoam-openapi discovery.3scale.net="true"&lt;/pre&gt; &lt;p&gt;Verify the label and annotations using:&lt;/p&gt; &lt;pre&gt;$ oc get svc/rhoam-openapi -o yaml&lt;/pre&gt; &lt;p&gt;The output should be similar to the sample displayed in Figure 3.&lt;/p&gt; &lt;div id="attachment_863107" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig3.png"&gt;&lt;img aria-describedby="caption-attachment-863107" class="wp-image-863107" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig3.png" alt="The YAML file for the Quarkus Fruits API service definition." width="640" height="286" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig3.png 890w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig3-300x134.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig3-768x343.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-863107" class="wp-caption-text"&gt;Figure 3: The Quarkus API Service definition in YAML format with annotations and labels.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Step 5: Use Service Discovery to import the API&lt;/h2&gt; &lt;p&gt;At this point, you can import the Quarkus Fruits API and manage it using 3scale API Management&amp;#8217;s Service Discovery feature. Use the OpenShift Dedicated application launcher to navigate to the 3scale API Management console. Figure 4 shows the application launcher in the top-right corner of the OpenShift Dedicated console.&lt;/p&gt; &lt;div id="attachment_863117" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig4.png"&gt;&lt;img aria-describedby="caption-attachment-863117" class="wp-image-863117 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig4-1024x626.png" alt="The OpenShift Dedicated console and application launcher with API Management selected." width="640" height="391" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig4-1024x626.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig4-300x183.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig4-768x470.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-863117" class="wp-caption-text"&gt;Figure 4: Using the application launcher to access 3scale API Management.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Import the API&lt;/h3&gt; &lt;p&gt;Log in to 3scale API Management using your configured IdP, and click the &lt;b&gt;New Product&lt;/b&gt; link on the dashboard. Perform the following steps on the &lt;b&gt;New Product&lt;/b&gt; screen:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Select &lt;b&gt;Import from OpenShift&lt;/b&gt; (authenticate if necessary).&lt;/li&gt; &lt;li&gt;Choose the &lt;b&gt;my-quarkus-api&lt;/b&gt; namespace from the &lt;b&gt;Namespace&lt;/b&gt; dropdown.&lt;/li&gt; &lt;li&gt;Choose the &lt;b&gt;rhoam-openapi&lt;/b&gt; service from the &lt;b&gt;Name&lt;/b&gt; dropdown.&lt;/li&gt; &lt;li&gt;Click the &lt;b&gt;Create Product&lt;/b&gt; button.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Figure 5 shows the new product screen in 3scale API Management.&lt;/p&gt; &lt;div id="attachment_863127" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig5.png"&gt;&lt;img aria-describedby="caption-attachment-863127" class="wp-image-863127 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig5-1024x626.png" alt="The 3scale API Management dialog to create a new product." width="640" height="391" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig5-1024x626.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig5-300x183.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig5-768x469.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-863127" class="wp-caption-text"&gt;Figure 5: Creating a new product in 3scale API Management.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;At this point, you should be redirected back to the 3scale API Management dashboard. If your new API isn’t listed in the &lt;b&gt;APIs&lt;/b&gt; section after a few moments, try refreshing the page. Once the API has been imported and listed on the dashboard, expand it and click the &lt;b&gt;ActiveDoc&lt;/b&gt; link. Select &lt;b&gt;rhoam-openapi&lt;/b&gt; on the subsequent screen to view the live documentation that was generated from the OpenAPI specification, as shown in Figure 6.&lt;/p&gt; &lt;div id="attachment_863137" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig6.png"&gt;&lt;img aria-describedby="caption-attachment-863137" class="wp-image-863137 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig6-1024x626.png" alt="The 3scale API Management ActiveDocs page." width="640" height="391" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig6-1024x626.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig6-300x183.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig6-768x469.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-863137" class="wp-caption-text"&gt;Figure 6: Viewing the generated ActiveDocs in 3scale API Management.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Create an Application Plan in 3scale API Management&lt;/h3&gt; &lt;p&gt;Next, you’ll need to configure an &lt;em&gt;Application Plan&lt;/em&gt; to interact with the API via a protected route:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Choose &lt;b&gt;Product: rhoam-openapi&lt;/b&gt; from the top navigation bar.&lt;/li&gt; &lt;li&gt;Select &lt;b&gt;Applications &amp;#62; Application Plans&lt;/b&gt; from the menu on the left.&lt;/li&gt; &lt;li&gt;Click the &lt;b&gt;Create Application Plan&lt;/b&gt; link.&lt;/li&gt; &lt;li&gt;Enter “RHOAM Test Plan” in the &lt;b&gt;Name&lt;/b&gt; field.&lt;/li&gt; &lt;li&gt;Enter “rhoam-test-plan” in the &lt;b&gt;System name&lt;/b&gt; field.&lt;/li&gt; &lt;li&gt;Click the &lt;b&gt;Create Application Plan&lt;/b&gt; button.&lt;/li&gt; &lt;li&gt;Click the &lt;b&gt;Publish&lt;/b&gt; link when redirected to the &lt;b&gt;Application Plans&lt;/b&gt; screen.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Figure 7 shows the dialog to create a new application plan in 3scale API Management.&lt;/p&gt; &lt;div id="attachment_863147" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig7.png"&gt;&lt;img aria-describedby="caption-attachment-863147" class="wp-image-863147 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig7-1024x626.png" alt="The 'Create Application Plan' screen in 3scale API Management." width="640" height="391" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig7-1024x626.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig7-300x183.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig7-768x469.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-863147" class="wp-caption-text"&gt;Figure 7: Creating an application plan in 3scale API Management.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Configure a developer account to use the application&lt;/h3&gt; &lt;p&gt;Now that you’ve created an Application Plan, you&amp;#8217;ll need to sign up a developer account to use the application. Typically, an API consumer signs up using your API Developer portal. For the purpose of this demonstration, you will manually provide the default Developer account with API access:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Select &lt;b&gt;Audience&lt;/b&gt; from the top navigation bar.&lt;/li&gt; &lt;li&gt;Select the &lt;b&gt;Developer&lt;/b&gt; account from the &lt;b&gt;Accounts&lt;/b&gt; list.&lt;/li&gt; &lt;li&gt;Click the &lt;b&gt;1 Applications&lt;/b&gt; link from the breadcrumb links at the top of the screen.&lt;/li&gt; &lt;li&gt;Click the &lt;b&gt;Create Application&lt;/b&gt; link and you’ll be directed to the &lt;b&gt;New Application&lt;/b&gt; screen.&lt;/li&gt; &lt;li&gt;Select &lt;b&gt;RHOAM Test Plan&lt;/b&gt; as the &lt;b&gt;Application Plan&lt;/b&gt;.&lt;/li&gt; &lt;li&gt;Enter “RHOAM Test Application” in the &lt;b&gt;Name&lt;/b&gt; field.&lt;/li&gt; &lt;li&gt;Enter a description of the API.&lt;/li&gt; &lt;li&gt;Click &lt;b&gt;Create Application&lt;/b&gt;.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Once the application is created, you’ll see that an API key is listed under the &lt;b&gt;API Credentials&lt;/b&gt; section, as shown in Figure 8. Take note of the key.&lt;/p&gt; &lt;div id="attachment_863157" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig8.png"&gt;&lt;img aria-describedby="caption-attachment-863157" class="wp-image-863157 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig8-1024x626.png" alt="The 3scale API Management Application Details screen." width="640" height="391" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig8-1024x626.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig8-300x183.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig8-768x469.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-863157" class="wp-caption-text"&gt;Figure 8: Creating an application for a user generates an API key.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Test the application&lt;/h3&gt; &lt;p&gt;Use the top navigation bar to navigate back to the Quarkus API&amp;#8217;s product page, then open the &lt;b&gt;Integration &amp;#62; Configuration&lt;/b&gt; section. The &lt;b&gt;Staging APIcast&lt;/b&gt; section should include an example cURL command for testing, as shown in Figure 9. Copy this command and add &lt;code&gt;/fruits&lt;/code&gt; to the URL, e.g &lt;code&gt;https://my-quarkus-api-3scale-staging.$CLUSTER_HOSTNAME:443/fruits?user_key=$YOUR_API_KEY&lt;/code&gt;&lt;/p&gt; &lt;div id="attachment_863167" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig9.png"&gt;&lt;img aria-describedby="caption-attachment-863167" class="wp-image-863167 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig9-1024x626.png" alt="The 3scale API Management API configuration screen." width="640" height="391" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig9-1024x626.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig9-300x183.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/01/fig9-768x469.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-863167" class="wp-caption-text"&gt;Figure 9: The example cURL command now contains a valid API key.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Issuing the cURL command or pasting the URL into a web browser returns the list of fruits from the Quarkus API. Congratulations: You’ve deployed a Quarkus-based REST API on OpenShift and protected it using Red Hat 3scale API Management.&lt;/p&gt; &lt;h2&gt;Video demonstration: Red Hat OpenShift API Management&lt;/h2&gt; &lt;p&gt;If you want to go over the steps in this article again, see this video guide to using Red Hat OpenShift API Management, Quarkus​, and 3scale API Management to automatically import and manage exposed APIs.&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/NzNgc0f75pc?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Summary and next steps&lt;/h2&gt; &lt;p&gt;If you’ve made it this far, you have successfully:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Provisioned an OpenShift Dedicated cluster.&lt;/li&gt; &lt;li&gt;Installed the Red Hat OpenShift API Management add-on.&lt;/li&gt; &lt;li&gt;Deployed a Quarkus application on your OpenShift Dedicated cluster.&lt;/li&gt; &lt;li&gt;Applied custom labels and annotations to a service using the OpenShift CLI.&lt;/li&gt; &lt;li&gt;Imported the Quarkus API into 3scale API Management and protected it using API key security.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Now that you’ve learned the basics of OpenShift Dedicated and 3scale API Management, why not explore other OpenShift Dedicated and Red Hat OpenShift API Management features? Here are some ideas:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Familiarize yourself with the single sign-on instance that’s included with your Red Hat OpenShift API Management add-on. You could consider using Red Hat&amp;#8217;s single sign-on (SSO) technology instead of API key security to &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_3scale_api_management/2.9/html/administering_the_api_gateway/openid-connect#configure-3scale"&gt;protect routes using OpenID Connect&lt;/a&gt;. (SSO is accessible from the OpenShift Dedicated application launcher.)&lt;/li&gt; &lt;li&gt;Learn more about OpenShift and your cluster by following a quickstart from the OpenShift web console&amp;#8217;s &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.2/web_console/odc-about-developer-perspective.html"&gt;developer perspective&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Delete the unprotected route to the Quarkus API using the OpenShift console or CLI. This was the route you used to view the OpenAPI in JSON format.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Happy coding!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F23%2F5-steps-to-manage-your-first-api-using-red-hat-openshift-api-management%2F&amp;#38;linkname=5%20steps%20to%20manage%20your%20first%20API%20using%20Red%20Hat%20OpenShift%20API%20Management" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F23%2F5-steps-to-manage-your-first-api-using-red-hat-openshift-api-management%2F&amp;#38;linkname=5%20steps%20to%20manage%20your%20first%20API%20using%20Red%20Hat%20OpenShift%20API%20Management" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F23%2F5-steps-to-manage-your-first-api-using-red-hat-openshift-api-management%2F&amp;#38;linkname=5%20steps%20to%20manage%20your%20first%20API%20using%20Red%20Hat%20OpenShift%20API%20Management" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F23%2F5-steps-to-manage-your-first-api-using-red-hat-openshift-api-management%2F&amp;#38;linkname=5%20steps%20to%20manage%20your%20first%20API%20using%20Red%20Hat%20OpenShift%20API%20Management" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F23%2F5-steps-to-manage-your-first-api-using-red-hat-openshift-api-management%2F&amp;#38;linkname=5%20steps%20to%20manage%20your%20first%20API%20using%20Red%20Hat%20OpenShift%20API%20Management" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F23%2F5-steps-to-manage-your-first-api-using-red-hat-openshift-api-management%2F&amp;#38;linkname=5%20steps%20to%20manage%20your%20first%20API%20using%20Red%20Hat%20OpenShift%20API%20Management" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F23%2F5-steps-to-manage-your-first-api-using-red-hat-openshift-api-management%2F&amp;#38;linkname=5%20steps%20to%20manage%20your%20first%20API%20using%20Red%20Hat%20OpenShift%20API%20Management" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F23%2F5-steps-to-manage-your-first-api-using-red-hat-openshift-api-management%2F&amp;#038;title=5%20steps%20to%20manage%20your%20first%20API%20using%20Red%20Hat%20OpenShift%20API%20Management" data-a2a-url="https://developers.redhat.com/blog/2021/02/23/5-steps-to-manage-your-first-api-using-red-hat-openshift-api-management/" data-a2a-title="5 steps to manage your first API using Red Hat OpenShift API Management"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/23/5-steps-to-manage-your-first-api-using-red-hat-openshift-api-management/"&gt;5 steps to manage your first API using Red Hat OpenShift API Management&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/OqukF57ihcQ" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Companies are increasingly using hosted and managed services to deliver on application modernization efforts and reduce the burden of managing cloud infrastructure. The recent release of Red Hat OpenShift API Management makes it easier than ever to get your own dedicated instance of Red Hat 3scale API Management running on Red Hat OpenShift Dedicated. This [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/23/5-steps-to-manage-your-first-api-using-red-hat-openshift-api-management/"&gt;5 steps to manage your first API using Red Hat OpenShift API Management&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/02/23/5-steps-to-manage-your-first-api-using-red-hat-openshift-api-management/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">863057</post-id><dc:creator>Evan Shortiss</dc:creator><dc:date>2021-02-23T08:00:14Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/02/23/5-steps-to-manage-your-first-api-using-red-hat-openshift-api-management/</feedburner:origLink></entry><entry><title type="html">Quarkus 1.12 released - Fast jar as default, Multipart support for RESTEasy Reactive</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/VeARLRHGTFs/" /><author><name /></author><id>https://quarkus.io/blog/quarkus-1-12-0-final-released/</id><updated>2021-02-23T00:00:00Z</updated><content type="html">It is my pleasure to announce the release of Quarkus 1.12.0.Final. It comes with some significant changes: Fast jar is now the default packaging when you build a jar. RESTEasy Reactive keeps improving and it now has support for multipart. Vert.x Axle and RX Java managed instances have been dropped....&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/VeARLRHGTFs" height="1" width="1" alt=""/&gt;</content><dc:creator /><feedburner:origLink>https://quarkus.io/blog/quarkus-1-12-0-final-released/</feedburner:origLink></entry><entry><title type="html">Business optimisation architecture - An introduction</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/_CyI1Yi38j0/business-optimisation-an-introduction.html" /><author><name>Eric D. Schabell</name></author><id>http://feedproxy.google.com/~r/schabell/jboss/~3/eivFwA3fRaQ/business-optimisation-an-introduction.html</id><updated>2021-02-22T06:00:00Z</updated><content type="html">Part 1 - An introduction The last few years I have been digging deeply into the world of architecture blueprints with a focus on presenting access to ways of mapping successful implementations for specific use cases. It's an interesting challenge in that we have the mission of creating of architectural content based on common customer adoption patterns.  That's very different from most of the traditional marketing activities usually associated with generating content for the sole purpose of positioning products for solutions. When you're basing the content on actual execution in solution delivery, you're cutting out the chuff.  What's that mean? It means that it's going to provide you with a way to implement a solution using open source technologies by focusing on the integrations, structures and interactions that actually have been proven to work. What's not included are any vendor promises that you'll find in normal marketing content. Those promised that when it gets down to implementation crunch time, might not fully deliver on their promises. Enter the term Architectural Blueprint.  Let's look at these blueprints, how their created and what value they provide for your solution designs. THE PROCESS The first step is to decide the use case to start with, which in my case had to be linked to a higher level theme that becomes the leading focus. This higher level theme is not quite boiling the ocean, but it's so broad that it's going to require some division in to smaller parts. In this case we've aligned with the higher level theme being 'Retail' use cases, a vertical focus. This breaks down into the following use cases and in no particular order: * Supply chain integration * Point of sale * Headless eCommerce * Business optimisation * Store health and safety * Real-time stock control * Retail data framework The first case I'm tackling here is the business optimisation architecture. This use case we've defined as the following: Optimising delivery routing, automating rostering of staff, and improving efficiency of tasks across multiple stores. The approach taken is to research our existing customers that have implemented solutions in this space, collect their public facing content, research the internal implementation documentation collections from their successful engagements, and where necessary reach out to the field resources involved.  To get an idea of what these blueprints look like, we refer you to the series previously discussed here: * * * * Now on to the task at hand. WHAT'S NEXT The resulting content for this project targets the following three items. * A slide deck of the architectural blueprint for use telling the portfolio solution story. * Generic architectural diagrams providing the general details for the portfolio solution. * A write-up of the portfolio solution in a series that can be used for a customer solution brief. An overview of this series on business optimisation portfolio architecture blueprint: 1. 2. 3. Example planning optimisation 4. Example vaccine scheduling Catch up on any past articles you missed by following any published links above. Next in this series, taking a look at the generic common architecture for the business optimisation architecture. (Article co-authored by , Chief Architect Retail, Red Hat)&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/_CyI1Yi38j0" height="1" width="1" alt=""/&gt;</content><dc:creator>Eric D. Schabell</dc:creator><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/eivFwA3fRaQ/business-optimisation-an-introduction.html</feedburner:origLink></entry></feed>
